<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2017-04-14 15:13:13 -0700"-->
<rss
    version="2.0"
    xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:wfw="http://wellformedweb.org/CommentAPI/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:wp="http://wordpress.org/export/1.2/">
    <channel>
        <title>BLog</title>
        <link>http://bleonard.github.io/</link>
        <description>Strong catchphrase situation here</description>
        <pubDate>2017-04-14 15:13:13 -0700</pubDate>
        <language>en</language>
        <wp:wxr_version>1.2</wp:wxr_version>
        <wp:base_site_url>http://bleonard.github.io/</wp:base_site_url>
        <wp:base_blog_url>http://bleonard.github.io/</wp:base_blog_url>
        <wp:wp_author>
            <wp:author_login>Brian Leonard</wp:author_login>
            <wp:author_email>brian@bleonard.com</wp:author_email>
            <wp:author_display_name>Brian Leonard</wp:author_display_name>
        </wp:wp_author>
        <generator>http://wordpress.com/</generator>
        
        <item>
            <title>Architecture: Consider Kron</title>
            <link>http://bleonard.github.io/blog/2017/04/14/architecture-consider-kron/</link>
            <pubDate>2017-04-14 00:00:00 -0700</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2017/04/14/architecture-consider-kron/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>The last post in our architecture series discussed <a href="/blog/2017/03/17/architecture-background-processing/">background processing</a>. There is a special type of background processing that I wanted to make a quick note about. These are things that need to be done periodically or otherwise on a schedule.</p>

<p>In our internal speak, we call this a &#8220;kron&#8221; job. If you are familiar with <a href="https://en.wikipedia.org/wiki/Cron">cron</a> jobs, it&#8217;s the same idea. A product manager misspelled it once and it stuck! We don&#8217;t actually use regular cron infrastructure, so the spelling <em>nuance</em> is helpful.</p>

<p>The specifics of how we implement it involve our <a href="/blog/2015/04/02/queue-bus/">message bus</a> infrastructure, but I think the concept and the decisions involved could include many other implementations.</p>

<h3>When to use it</h3>

<p>Let&#8217;s take the job from the <a href="/blog/2017/03/17/architecture-background-processing/">previous article</a>. The &#8220;charge an invoice 24 hours later&#8221; case is an interesting one. The system certainly supports delaying that code to run for an arbitrary time, but that&#8217;s not always the best idea.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">InvoiceChargeWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">TResque</span><span class="o">::</span><span class="no">Worker</span>
</span><span class='line'>  <span class="n">inputs</span> <span class="ss">:invoice_id</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">worker_lock</span> <span class="ss">:invoice_id</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">work</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">unless</span> <span class="n">needed?</span>
</span><span class='line'>    <span class="n">invoice</span><span class="o">.</span><span class="n">charge!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_id</span>
</span><span class='line'>    <span class="n">invoice</span><span class="o">.</span><span class="n">to_id</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">needed?</span>
</span><span class='line'>    <span class="n">invoice</span><span class="o">.</span><span class="n">pending?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">invoice</span>
</span><span class='line'>    <span class="vi">@invoice</span> <span class="o">||=</span> <span class="no">Invoice</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">invoice_id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># When invoice is created</span>
</span><span class='line'><span class="no">InvoiceChargeWorker</span><span class="o">.</span><span class="n">enqueue_at</span><span class="p">(</span><span class="mi">24</span><span class="o">.</span><span class="n">hours</span><span class="o">.</span><span class="n">from_now</span><span class="p">,</span> <span class="n">invoice_id</span><span class="p">:</span> <span class="n">invoice</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>One reason would be memory. When there a lot of invoices (woot!), we still have to save the notion of what should be done somewhere until it gets processed. In this case, the <a href="https://redis.io/">Redis</a> instance will have it stored in memory. The memory could fill up and adding more workers won&#8217;t help because of the delay.</p>

<p>The second reason is stability. This is important stuff and Redis could have issues and lose the data. We made everything <a href="http://www.restapitutorial.com/lessons/idempotency.html">idempotent</a> and could recreate everything, but it would certainly be a huge hassle.</p>

<p>So when enqueueing something to run in the future, especially if it is important or a long time from now (more than a few minutes), we consider kron.</p>

<h3>Batch mode</h3>

<p>If we were going to accomplish the same things but on a schedule, the code would have to change in some way. I like the existing worker because it already has the good stuff from the last article: source of truth, knowing whether or not it still needs to be run, and mutual exclusion. When batch processing, I believe it&#8217;s also good to still operate on this one at a time where the count (memory for redis) is low or the risk of issues is high. Both are the case here.</p>

<p>To turn it into a batch processor we need to know what needs to be processed at any given moment. This is easy to determine because we have the <code>needed?</code> method. It looks to be invoices that are in the <code>pending</code> state. Sometimes we need to add a <code>state</code> column or other piece of data to know what needs to be in the batch but in this case we are good to go.</p>

<p>From there we can decide if we are going to update the class as-is or make a batch worker. A batch worker is its own worker and would look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">InvoiceChargeBatchWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">TResque</span><span class="o">::</span><span class="no">Worker</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">worker_lock</span> <span class="ss">:all</span>
</span><span class='line'>  <span class="n">queue_lock</span>  <span class="ss">:all</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">work</span>
</span><span class='line'>    <span class="no">Invoice</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">stat</span><span class="p">:</span> <span class="s1">&#39;pending&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">find_each</span> <span class="k">do</span> <span class="o">|</span><span class="n">invoice</span><span class="o">|</span>
</span><span class='line'>      <span class="no">InvoiceChargeWorker</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="n">invoice_id</span><span class="p">:</span> <span class="n">invoice</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># process all pending invoices</span>
</span><span class='line'><span class="no">InvoiceChargeBatchWorker</span><span class="o">.</span><span class="n">enqueue</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it. Because of the worker lock on <code>InvoiceChargeWorker</code> and the state checking, it would be ok even if we were to enqueue it twice or something. Making a custom batch worker also prevents us from running this code twice.</p>

<p>We could also stick it as a class method on the original:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">InvoiceChargeWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">TResque</span><span class="o">::</span><span class="no">Worker</span>
</span><span class='line'>  <span class="n">inputs</span> <span class="ss">:invoice_id</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">worker_lock</span> <span class="ss">:invoice_id</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">process_all!</span>
</span><span class='line'>    <span class="no">Invoice</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">stat</span><span class="p">:</span> <span class="s1">&#39;pending&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">find_each</span> <span class="k">do</span> <span class="o">|</span><span class="n">invoice</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="n">invoice_id</span><span class="p">:</span> <span class="n">invoice</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">work</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">unless</span> <span class="n">needed?</span>
</span><span class='line'>    <span class="n">invoice</span><span class="o">.</span><span class="n">charge!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">needed?</span>
</span><span class='line'>    <span class="n">invoice</span><span class="o">.</span><span class="n">pending?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">invoice</span>
</span><span class='line'>    <span class="vi">@invoice</span> <span class="o">||=</span> <span class="no">Invoice</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">invoice_id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># process all pending invoices</span>
</span><span class='line'><span class="no">InvoiceChargeWorker</span><span class="o">.</span><span class="n">process_all!</span>
</span></code></pre></td></tr></table></div></figure>


<h3>How it works</h3>

<p>Again, in any given architecture there is probably a best way to do it. For example, maybe <a href="https://medium.com/airbnb-engineering/chronos-a-replacement-for-cron-f05d7d986a9d">this</a> is a good way to do it on top of <a href="http://mesos.apache.org/">Mesos</a>.</p>

<p>The challenge is running something on a schedule. In this case, process all invoices that need to be paid. That is what regular cron is made to do. However, we do not want to run that on every box. If we did that, we would have serious race conditions and might pay an invoice twice. Rather, we want to run it once globally across the entire infrastructure or at least per service.</p>

<p>We could probably do this by noting in the devops setup that one of the servers is special. It should get the cron setup. We could use something like the <a href="https://github.com/javan/whenever">whenever gem</a> to say what to do and we would only run that on one box per system. It needs to be per system because it has to be able to know what worker to enqueue or, in general, what code to run.</p>

<p>What we do instead is have a single service that has a process that sends out a heartbeat on the <a href="/blog/2015/04/02/queue-bus/">message bus</a>. Every minute, it publishes an event that looks like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># for Tue, 11 Apr 2017 00:25:00 UTC +00:00</span>
</span><span class='line'>  <span class="c1"># epoch time: 1491870300</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">QueueBus</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="n">heartbeat_seconds</span><span class="s2">&quot;, {</span>
</span><span class='line'><span class="s2">    &quot;</span><span class="n">epoch_seconds</span><span class="s2">&quot;=&gt;1491870300,</span>
</span><span class='line'><span class="s2">    &quot;</span><span class="n">epoch_minutes</span><span class="s2">&quot;=&gt;24864505,</span>
</span><span class='line'><span class="s2">    &quot;</span><span class="n">epoch_hours</span><span class="s2">&quot;=&gt;414408,</span>
</span><span class='line'><span class="s2">    &quot;</span><span class="n">epoch_days</span><span class="s2">&quot;=&gt;17267,</span>
</span><span class='line'><span class="s2">    &quot;</span><span class="n">minute</span><span class="s2">&quot;=&gt;25,</span>
</span><span class='line'><span class="s2">    &quot;</span><span class="n">hour</span><span class="s2">&quot;=&gt;0, </span>
</span><span class='line'><span class="s2">    &quot;</span><span class="n">day</span><span class="s2">&quot;=&gt;11,</span>
</span><span class='line'><span class="s2">    &quot;</span><span class="n">month</span><span class="s2">&quot;=&gt;4,</span>
</span><span class='line'><span class="s2">    &quot;</span><span class="n">year</span><span class="s2">&quot;=&gt;2017,</span>
</span><span class='line'><span class="s2">    &quot;</span><span class="n">yday</span><span class="s2">&quot;=&gt;101,</span>
</span><span class='line'><span class="s2">    &quot;</span><span class="n">wday</span><span class="s2">&quot;=&gt;2</span>
</span><span class='line'><span class="s2">  })</span>
</span></code></pre></td></tr></table></div></figure>


<p>The current code for the process is already checked into <a href="https://github.com/queue-bus/queue-bus">queue-bus</a> and ready to use <a href="https://github.com/queue-bus/queue-bus/blob/5c009a3b2d2d58994813bdca0dc78547a18b0295/lib/queue_bus/heartbeat.rb">here</a>.</p>

<p><a href="https://github.com/queue-bus/resque-bus">Resque bus</a> supports this using the <a href="https://github.com/resque/resque-scheduler">resque-scheduler gem</a>. It is setup off by calling <code>QueueBus.heartbeat!</code>. We make sure it&#8217;s setup every time we start up Resque.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:resque</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:setup</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:environment</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">require</span> <span class="s1">&#39;resque_scheduler&#39;</span>
</span><span class='line'>    <span class="nb">require</span> <span class="s1">&#39;resque/scheduler&#39;</span>
</span><span class='line'>    <span class="nb">require</span> <span class="s1">&#39;tresque&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">QueueBus</span><span class="o">.</span><span class="n">heartbeat!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This <code>setup</code> is automatically called every time Resque starts.</p>

<h3>Usage</h3>

<p>So now we can subscribe to this event to run something every minute, hour, day, Monday, month, whatever.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># every minute</span>
</span><span class='line'><span class="n">subscribe</span> <span class="s2">&quot;every_minute&quot;</span><span class="p">,</span> <span class="s1">&#39;bus_event_type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;heartbeat_minutes&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">attributes</span><span class="o">|</span>
</span><span class='line'>  <span class="no">InvoiceChargeWorker</span><span class="o">.</span><span class="n">process_all!</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># every hour: 4:22, 5:22, 6:22, etc</span>
</span><span class='line'><span class="n">subscribe</span> <span class="s2">&quot;once_an_hour&quot;</span><span class="p">,</span> <span class="s1">&#39;bus_event_type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;heartbeat_minutes&#39;</span><span class="p">,</span> <span class="s1">&#39;minute&#39;</span> <span class="o">=&gt;</span> <span class="mi">22</span> <span class="k">do</span> <span class="o">|</span><span class="n">attributes</span><span class="o">|</span>
</span><span class='line'>  <span class="no">InvoiceChargeWorker</span><span class="o">.</span><span class="n">process_all!</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># every day at 12:05 am</span>
</span><span class='line'><span class="n">subscribe</span> <span class="s2">&quot;once_a_day&quot;</span><span class="p">,</span> <span class="s1">&#39;bus_event_type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;heartbeat_minutes&#39;</span><span class="p">,</span> <span class="s1">&#39;hour&#39;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;minute&#39;</span> <span class="o">=&gt;</span> <span class="mi">5</span> <span class="k">do</span> <span class="o">|</span><span class="n">attributes</span><span class="o">|</span>
</span><span class='line'>  <span class="no">InvoiceChargeWorker</span><span class="o">.</span><span class="n">process_all!</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># every monday at 1:52 am</span>
</span><span class='line'><span class="n">subscribe</span> <span class="s2">&quot;early_monday_morning&quot;</span><span class="p">,</span> <span class="s1">&#39;bus_event_type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;heartbeat_minutes&#39;</span><span class="p">,</span> <span class="s1">&#39;wday&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;hour&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;minute&#39;</span> <span class="o">=&gt;</span> <span class="mi">52</span> <span class="k">do</span> <span class="o">|</span><span class="n">attributes</span><span class="o">|</span>
</span><span class='line'>  <span class="no">InvoiceChargeWorker</span><span class="o">.</span><span class="n">process_all!</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># the 3rd of every month at 2:10 am</span>
</span><span class='line'><span class="n">subscribe</span> <span class="s2">&quot;once_a_month&quot;</span><span class="p">,</span> <span class="s1">&#39;bus_event_type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;heartbeat_minutes&#39;</span><span class="p">,</span> <span class="s1">&#39;day&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;hour&#39;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;minute&#39;</span> <span class="o">=&gt;</span> <span class="mi">10</span> <span class="k">do</span> <span class="o">|</span><span class="n">attributes</span><span class="o">|</span>
</span><span class='line'>  <span class="no">InvoiceChargeWorker</span><span class="o">.</span><span class="n">process_all!</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># every 5 minutes: 4:00, 4:05, 4:10, etc</span>
</span><span class='line'><span class="n">subscribe</span> <span class="s2">&quot;every 5 minutes&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">attributes</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># if it doesn&#39;t fit the subscribe pattern, just subscribe to every minute and use ruby</span>
</span><span class='line'>  <span class="k">next</span> <span class="k">unless</span> <span class="n">attributes</span><span class="o">[</span><span class="s1">&#39;minute&#39;</span><span class="o">]</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="no">InvoiceChargeWorker</span><span class="o">.</span><span class="n">process_all!</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Summary</h3>

<p>So that is how &#8220;kron&#8221; works.</p>

<p>Over time, we have decided this is a much more reliable way to process items in the background when a delay is acceptable. By setting up some sort of centralized architecture for this, many services and subscribe in a way that is familiar and unsurprising. We have found a lot of value in that.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Architecture: Consider Kron</wp:post_id>
            <wp:post_date>2017-04-14 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Architecture: Background Processing</title>
            <link>http://bleonard.github.io/blog/2017/03/17/architecture-background-processing/</link>
            <pubDate>2017-03-17 00:00:00 -0700</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2017/03/17/architecture-background-processing/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>So we have a bunch of <a href="/blog/2017/02/24/architecture-models/">models</a> and are doing stuff with them in <a href="/blog/2017/03/03/architecture-service-objects/">service objects</a>. The next thing we might need is to process some code in the background.</p>

<p>Not everything can be done inline from the API request. For example, we might need to geocode a user&#8217;s postal code when they change it in their account. Or when an invoice is created, we want to charge it 24 hours later.</p>

<p>When working with background jobs, we default to the following practices:</p>

<ul>
<li>Workers are enqueued with a dictionary of inputs</li>
<li>These inputs should be used to fetch data from the source of truth</li>
<li>Workers know how to check if they still need to run</li>
<li>Locking schemes should protect parallel execution</li>
</ul>


<h3>Enqueue</h3>

<p>When we enqueue a worker, we have found that it&#8217;s quite helpful to always use a dictionary (hash) of key/value pairs. <a href="https://github.com/resque/resque">Resque</a> and <a href="http://sidekiq.org/">Sidekiq</a> both take a list of arguments like <a href="https://github.com/mperham/sidekiq/wiki/Getting-Started">so</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HardWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Sidekiq</span><span class="o">::</span><span class="no">Worker</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># do something with name, count</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># enqueue</span>
</span><span class='line'><span class="no">HardWorker</span><span class="o">.</span><span class="n">perform_async</span><span class="p">(</span><span class="s1">&#39;bob&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This has proved to be problematic when adding new parameters or having optional parameters. For example, if we add a new (third) input parameter, there might be stuff in the queue with the old two. When the new code gets deployed, it will throw an &#8216;invalid number of arguments&#8217; type of error. When using a hash, we can give it a default, fail gracefully, or do whatever we like on a class by class basis.</p>

<p>So to provide better change management and optional arguments, we always do it like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HardWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">TResque</span><span class="o">::</span><span class="no">Worker</span>
</span><span class='line'>  <span class="n">inputs</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:count</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">work</span>
</span><span class='line'>    <span class="c1"># do something with self.name, self.count</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># enqueue</span>
</span><span class='line'><span class="no">HardWorker</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;bob&#39;</span><span class="p">,</span> <span class="n">count</span><span class="p">:</span> <span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Source of Truth</h3>

<p>Let&#8217;s say we want to update a search index every time a user record is changed. We need to write their first name, last name, etc to <a href="https://www.elastic.co/">Elasticsearch</a>.</p>

<p>We could do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserIndexWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">TResque</span><span class="o">::</span><span class="no">Worker</span>
</span><span class='line'>  <span class="n">inputs</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:etc</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">work</span>
</span><span class='line'>    <span class="no">Elasticsearch</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="nb">id</span><span class="p">,</span> <span class="n">first_name</span><span class="p">:</span> <span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="p">:</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">etc</span><span class="p">:</span> <span class="n">etc</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># When user changes</span>
</span><span class='line'><span class="no">UserIndexWorker</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">attributes</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:etc</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This certainly would work, but is not considered best practice. It is better to be <a href="http://www.restapitutorial.com/lessons/idempotency.html">idempotent</a>. It writes everything that should ) by passing the minimal information to the background worker, who then looks up the source of truth. That way, if there is any delay between when it is enqueued and run, it will still send the correct information.</p>

<p>The better approach would look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserIndexWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">TResque</span><span class="o">::</span><span class="no">Worker</span>
</span><span class='line'>  <span class="n">inputs</span> <span class="ss">:user_id</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">work</span>
</span><span class='line'>    <span class="no">Elasticsearch</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">attributes</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:etc</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">user</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">||=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># When user changes</span>
</span><span class='line'><span class="no">UserIndexWorker</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the same vein, the worker should be in charge of whether or not it needs to do anything in the first place. For example, we can enqueue a worker to run later about an <code>Invoice</code>. If, at that time, the payment is <code>Invoice</code> still should be charged, then charge it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">InvoiceChargeWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">TResque</span><span class="o">::</span><span class="no">Worker</span>
</span><span class='line'>  <span class="n">inputs</span> <span class="ss">:invoice_id</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">work</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">unless</span> <span class="n">needed?</span>
</span><span class='line'>    <span class="n">invoice</span><span class="o">.</span><span class="n">charge!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">needed?</span>
</span><span class='line'>    <span class="n">invoice</span><span class="o">.</span><span class="n">pending?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">invoice</span>
</span><span class='line'>    <span class="vi">@invoice</span> <span class="o">||=</span> <span class="no">Invoice</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">invoice_id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># When invoice is created</span>
</span><span class='line'><span class="no">InvoiceChargeWorker</span><span class="o">.</span><span class="n">enqueue_at</span><span class="p">(</span><span class="mi">24</span><span class="o">.</span><span class="n">hours</span><span class="o">.</span><span class="n">from_now</span><span class="p">,</span> <span class="n">invoice_id</span><span class="p">:</span> <span class="n">invoice</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is another example of single source of truth. Even for jobs that are run immediately, this check is something we always put in place: return immediately if the worker is no longer relevant.</p>

<h3>Mutual Exclusion</h3>

<p>Let&#8217;s say the <code>User</code> object can sometimes change a few times rapidly. The &#8220;source of truth&#8221; approach will make sure the right thing always gets indexed. So that&#8217;s great. But it is pretty silly to index the same data twice or more times, right?</p>

<p>In this case, we add a queue lock. The effect is that if something is in the queue and waiting to be processed and you try to enqueue another one with the same inputs, then it will be a no-op. It looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserIndexWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">TResque</span><span class="o">::</span><span class="no">Worker</span>
</span><span class='line'>  <span class="n">inputs</span> <span class="ss">:user_id</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">queue_lock</span> <span class="ss">:user_id</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another case that often arises is mutual exclusion for <em>runtime</em>. Maybe weird payment things happen to the payment service if two invoices for the same user are happening at the same time.</p>

<p>In this case, we add a worker lock. The effect is that if something is in the queue and about to start running and there is another running at that moment, then it will re-enqueue itself to run later. It looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">InvoiceChargeWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">TResque</span><span class="o">::</span><span class="no">Worker</span>
</span><span class='line'>  <span class="n">inputs</span> <span class="ss">:invoice_id</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">worker_lock</span> <span class="ss">:to_id</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">work</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">unless</span> <span class="n">needed?</span>
</span><span class='line'>    <span class="n">invoice</span><span class="o">.</span><span class="n">charge!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_id</span>
</span><span class='line'>    <span class="n">invoice</span><span class="o">.</span><span class="n">to_id</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">needed?</span>
</span><span class='line'>    <span class="n">invoice</span><span class="o">.</span><span class="n">pending?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">invoice</span>
</span><span class='line'>    <span class="vi">@invoice</span> <span class="o">||=</span> <span class="no">Invoice</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">invoice_id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>For either type, you don&#8217;t have to lock on all the attributes or can (as shown in the last example) use calculations. The namespace of the lock is the worker class name. You can also set the namespace to allow locking between different workers.</p>

<h3>Message Bus</h3>

<p>Our <a href="/blog/2015/04/02/queue-bus/">message bus</a> and our use of background processes have a lot in common. In fact, the message bus is built on top of the same background processing infrastructure. The question that arises is this: when should something be enqueued directly and when should it publish and respond to a bus subscription?</p>

<p>The first note is that you should <em>always be publishing</em> (ABP). It doesn&#8217;t hurt anything to give (optional) visibility to other systems what is happening. Or use this as logging framework.</p>

<p>Just publishing, however, doesn&#8217;t mean we have to use that to do work in the background. Be can bother publish and enqueue a background worker. We enqueue a worker when the work in the background is essential to the correct operation of the use case at hand.</p>

<p>One example to enqueue directly would be the geocoding worker I mentioned earlier: when the user gives a new postal code, figure out where that is. It&#8217;s key to the account management system.</p>

<p>The search example I&#8217;ve been using might not actually be the best one because we would have the search system subscribed to changes in the account system. What I didn&#8217;t show that the <code>enqueue</code> call might actually happen from within a subscription.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">subscribe</span> <span class="s2">&quot;user_changed&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">attributes</span><span class="o">|</span>
</span><span class='line'>  <span class="no">UserIndexWorker</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">attributes</span><span class="o">[</span><span class="s1">&#39;id&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So these two concepts can work together. Why not just index it right in the subscription, though? A primary reason might be to use some of the locking mechanisms as the bus does not have that. It also might be the case that the worker is enqueued from other locations and this keeps things DRY. The worker is also easier to unit test.</p>

<h3>TResque</h3>

<p>We use <a href="https://github.com/resque/resque">Resque</a> as a base foundation and built on top of it with an abstraction layer called <a href="https://github.com/taskrabbit/tresque">TResque</a>. That&#8217;s TR (TaskRabbit) Resque. Get it? It puts all of these practices into place as well as adding and abstraction layer for the inevitable, but as yet unprioritized, move to <a href="http://sidekiq.org/">Sidekiq</a>.</p>

<p>I don&#8217;t necessarily expect anyone to use this, but it doesn&#8217;t hurt to make it available as an example of how we are using these tools.</p>

<p>You define a worker and enqueue things as show in the examples above. Then only layer left is around prioritization. You can give a queue name to a worker and then register what priority those workers are. If no queue is given, it is assumed to be the <code>default</code> queue.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;tresque&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Account</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">RegularWorker</span>
</span><span class='line'>    <span class="kp">include</span> <span class="o">::</span><span class="no">TResque</span><span class="o">::</span><span class="no">Worker</span>
</span><span class='line'>    <span class="c1"># defaults to account_default queue</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Account</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">RegularWorker</span>
</span><span class='line'>    <span class="kp">include</span> <span class="o">::</span><span class="no">TResque</span><span class="o">::</span><span class="no">Worker</span>
</span><span class='line'>    <span class="n">queue</span> <span class="ss">:refresh</span> <span class="c1"># lower priority account_refresh queue</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">TResque</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s2">&quot;account&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">queue</span> <span class="ss">:default</span><span class="p">,</span> <span class="mi">100</span>
</span><span class='line'>  <span class="n">queue</span> <span class="ss">:refresh</span><span class="p">,</span> <span class="o">-</span><span class="mi">5000</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then when you run Resque, you can use these registrations to process the queues in the right order.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;resque/tasks&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;resque_scheduler/tasks&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;resque_bus/tasks&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:resque</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:setup</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:environment</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">require</span> <span class="s1">&#39;resque_scheduler&#39;</span>
</span><span class='line'>    <span class="nb">require</span> <span class="s1">&#39;resque/scheduler&#39;</span>
</span><span class='line'>    <span class="nb">require</span> <span class="s1">&#39;tresque&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:queues</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:setup</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">queues</span> <span class="o">=</span> <span class="o">::</span><span class="no">TResque</span><span class="o">::</span><span class="no">Registry</span><span class="o">.</span><span class="n">queues</span>
</span><span class='line'>    <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;QUEUES&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="n">queues</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;TResque: </span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;QUEUES&quot;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="err">$</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">resque</span><span class="ss">:queues</span> <span class="n">resque</span><span class="ss">:work</span>
</span><span class='line'>  <span class="no">TResque</span><span class="p">:</span> <span class="n">account_default</span><span class="p">,</span> <span class="n">account_refresh</span>
</span></code></pre></td></tr></table></div></figure>


<p>This registration layer allows each of the systems (<a href="/blog/2014/02/11/rails-4-engines/">engines</a>) to work independently and still have centralized background processing.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Architecture: Background Processing</wp:post_id>
            <wp:post_date>2017-03-17 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Architecture: Surface Area</title>
            <link>http://bleonard.github.io/blog/2017/03/10/architecture-surface-area/</link>
            <pubDate>2017-03-10 00:00:00 -0800</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2017/03/10/architecture-surface-area/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>The last post in the <a href="https://www.taskrabbit.com">TaskRabbit</a> architecture series was about <a href="/blog/2017/03/03/architecture-service-objects/">service objects</a>. This an example of what I call minimizing &#8220;surface area&#8221; of the code.</p>

<p>Frankly, I might be using the term wrong. It seems possible &#8220;surface area&#8221; usually refers to API signature of some objects. What I&#8217;m talking about here is the following train of thought:</p>

<ul>
<li>I change or add a line of code</li>
<li>What did I just affect?</li>
</ul>


<p>The &#8220;surface area&#8221; is the other things I have to look over. It is the area that I have to make sure has appropriate test coverage. Having a large surface area is what slows down development teams. The goal is to minimize it.</p>

<h3>Service Objects</h3>

<p>So how does our use of service objects relate to this concept?</p>

<p>Let&#8217;s say we have a new requirement that&#8217;s applicable when a Tasker submits an invoice that modifies what gets saved. If I were to add the code to the <code>InvoiceJobOp</code> from the <a href="/blog/2017/03/03/architecture-service-objects/">previous article</a>, then it will only apply when the <code>Op</code> is run. If we were to do something in a <code>before_save</code> in the <code>Invoice</code> model, then it might accidentally kick in anytime an <code>Invoice</code> is changed.</p>

<p>That&#8217;s a lot more tests and things to keep in our mind. If it is just in the <code>Op</code>, that is less of those kinds of debt, so adding in the <code>Op</code> is an example of minimizing the surface area of the change.</p>

<h3>Namespacing</h3>

<p>We went through a <a href="/blog/2015/10/06/v2-retrospective/">roundabout journey</a> to end up where were we are. Many of the changes were about surface area and trying to reduce it.</p>

<p>People like microservices and SOA because of this same principle. We tried it and that part of it worked out really well. There was just no way that a change in service A could affect service B. As <a href="/blog/2015/10/06/v2-retrospective/">discussed</a>, however, we ran into issues in other dimensions.</p>

<p>Our current use of <a href="/blog/2014/02/11/rails-4-engines/">engines</a> follows the same approach to achieve the same surface area effect. It is all about namespacing. Modifying the user management engine can not affect the marketplace engine. This allows us to proceed with more confidence when making such changes.</p>

<p>A particular aspect of our setup is that any given model is &#8220;owned&#8221; by only one engine. The rest of the engines are allowed to read from the database but they cannot write. This provides sanity and minimizes the surface area. For example, the validations only need to live in one spot. You also know that no other code can go rogue and start messing with the data by accident or otherwise.</p>

<h3>Bus</h3>

<p>Of course, the world isn&#8217;t always cut and dry. Venn diagrams overlap. No abstraction or encapsulation is perfect. The seams in namespacing show up when something that happens in one service (engine) needs to affect something in another one.</p>

<p>For example, we were so happy just a few paragraphs ago that changes to the user management engine do not affect the marketplace engine. That is true and it is great. There is no direct effect from the code. However, as they tend to do, these pesky functional requirements always mess up perfect plans for the code. In this case, when a user changes their first name (in the account engine), the marketplace engine might need to update some data in <a href="https://www.elastic.co/">Elasticsearch</a>.</p>

<p>We use a <a href="/blog/2015/04/02/queue-bus/">message bus</a> to observe changes like this and react as appropriate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Whenever the user changes</span>
</span><span class='line'><span class="n">subscribe</span> <span class="s1">&#39;user_may_have_changed&#39;</span><span class="p">,</span> <span class="n">bus_observer_touched</span><span class="p">:</span> <span class="s1">&#39;user&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">attributes</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># update the profile in ElasticSearch</span>
</span><span class='line'>  <span class="no">ProfileStoreWorker</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">attributes</span><span class="o">[</span><span class="s1">&#39;id&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>An important note here is that <code>ProfileStoreWorker</code> is <a href="http://www.restapitutorial.com/lessons/idempotency.html">idempotent</a>. It writes everything that should go in Elasticsearch every time. This technique reduces surface area by not depending on this single event and its contents, but rather only as a trigger.</p>

<p>One might say that these subscriptions are just as coupled as doing everything all in one spot. I see that point because, of course, the same things end up happening. However, we have this technique to be better for a few reasons.</p>

<ul>
<li>The trigger code (in the account engine) does not need to know about the rest of the system. It can mind its own business.</li>
<li>The subscribing code (in the marketplace engine) can be self-contained instead of being mixed up in the trigger code path.</li>
<li>Many different code paths might necessitate the <code>ProfileStoreWorker</code> to run. By decoupling it, we actually save complexity in many code paths.</li>
</ul>


<h3>Summary</h3>

<p>In code, developers tend to weave a tangled web wherein seemingly innocuous changes have far-reaching effects. We have been able to create more stable and agile code by considering the &#8220;surface area&#8221; of a change and minimizing it through some encapsulation and decoupling techniques.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Architecture: Surface Area</wp:post_id>
            <wp:post_date>2017-03-10 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Architecture: Service Objects</title>
            <link>http://bleonard.github.io/blog/2017/03/03/architecture-service-objects/</link>
            <pubDate>2017-03-03 00:00:00 -0800</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2017/03/03/architecture-service-objects/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>This is the second post in what is now indisputably a &#8220;series&#8221; of articles about how we build things at <a href="https://www.taskrabbit.com">TaskRabbit</a>. Over time, we/I have internalized all kinds of lessons and patterns and are trying to take the time to write some of the key things down.</p>

<p>Building upwards from the <a href="/blog/2017/02/24/architecture-models/">last article about models</a>, let&#8217;s talk about how we use them. The models represent rows in the database in the <a href="http://guides.rubyonrails.org/active_record_basics.html">Rails ORM</a>. What code is deciding what to put in those rows and which ones should be created, etc? In our architecture, this role is filled by <a href="https://www.netguru.co/blog/service-objects-in-rails-will-help">service objects</a>.</p>

<p>Overall, we default to the following rules when using models in our system:</p>

<ul>
<li>Models contain data/state validations and methods tied directly to them</li>
<li>Models are manipulated by service objects that reflect the user experience</li>
</ul>


<h3>Something has to be fat</h3>

<p>In the beginning, there was <a href="http://ideum.com/2006/07/05/102/">Rails</a> and we saw that it was good. The world was optimized around the CRUD/REST use cases. Controllers had <code>update_attributes</code> and such. When there was more logic/nuance, it was put there in the controller (or the view).</p>

<p>There was a backlash of sorts against that and the new paradigm was <a href="http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model">&#8220;Fat model, skinny controller&#8221;</a>. The controllers were simple and emphasized workflow instead of business logic. Views were simpler. That stuff was put in the models. Model code was easier to reuse.</p>

<p>Thus arose the great <a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">&#8220;God Model&#8221;</a> issue. Fat is one thing, but we had some seriously obese models. Things like <code>User</code> and <code>Task</code> simply had too much going on. We could put stuff in mixins/concerns but that didn&#8217;t change the fact that there was tons of code that all could be subtly interacting with each other.</p>

<p>Business logic has to go somewhere. For us, that somewhere is in service objects.</p>

<h3>Operations</h3>

<p>In our architecture, we call them &#8220;Operations&#8221; and they extend a class called <code>Backend::Op</code>. This more or less uses the <a href="https://github.com/mnelson/subroutine">subroutine</a> gem.</p>

<p>Much can be read about what it means to be a service object, but here is my very scientific (Rails-specific) definition.</p>

<ul>
<li>Includes <code>ActiveModel</code> stuff like <code>Naming</code>, <code>Validations</code>, and <code>Callbacks</code></li>
<li>Allows declaration of what fields (input parameters) it uses</li>
<li>Reflects an action in the system like &#8220;sign up a user&#8221; or &#8220;invoice a job&#8221;</li>
<li>Does whatever it needs to do to accomplish the action when asked including updating or creating one or more models</li>
</ul>


<p>Here&#8217;s a simplified example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">InvoiceJobOp</span> <span class="o">&lt;</span> <span class="o">::</span><span class="no">Backend</span><span class="o">::</span><span class="no">Op</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mixins</span><span class="o">::</span><span class="no">AtomicOperation</span> <span class="c1"># all in same transaction</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:hours</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:job_id</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:job_id</span><span class="p">,</span> <span class="n">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">validate</span>  <span class="ss">:validate_hour</span>       <span class="c1"># hours given</span>
</span><span class='line'>  <span class="n">validate</span>  <span class="ss">:validate_assignment</span> <span class="c1"># tasker is assigned</span>
</span><span class='line'>  <span class="c1"># ... other checks</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">perform</span>
</span><span class='line'>    <span class="n">create_invoice!</span>    <span class="c1"># record hours and such</span>
</span><span class='line'>    <span class="n">generate_payment!</span>  <span class="c1"># pending payment transaction</span>
</span><span class='line'>    <span class="n">appointment_done!</span>  <span class="c1"># note that appointment completed</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">ongoing?</span>
</span><span class='line'>      <span class="n">schedule_next_appointment!</span> <span class="c1"># schedule next if more</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">complete_assignment!</span>       <span class="c1"># otherwise, no more</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">enqueue_background_workers!</span>  <span class="c1"># follow up later on stuff</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>No Side Effects</h3>

<p>When we followed the &#8220;Fat Model&#8221; pattern, we got what we wanted. This was usually methods in one of the models. Sometimes there were callbacks added. These were the most dangerous because they were happening on every <code>save</code>. Often, this added unnecessary side effects.</p>

<p>With the service object approach, it is very clear what is happening for the action at hand. When you &#8220;invoice a job,&#8221; you create the invoice, generate the payment, mark the appointment done, schedule the next appointment, and enqueue some background workers.</p>

<p>This certainty leads to less technical and product debt. When something new needs to be added to this action, it&#8217;s very clear where it goes.</p>

<h3>Errors</h3>

<p>Our <code>Op</code> class above does several model manipulations to the related invoices, appointments, etc. Each some of these does a <code>save</code> to something. Those <code>save</code> calls could raise errors. If any of those raise an error, then the <code>Op</code> itself will inherit it and it will be available on the <code>op.errors</code> method just like a normal <code>ActiveRecord</code> object.</p>

<p>This also allows chaining of operations. If there was a <code>ScheduleAppointmentOp</code> class, it could be used in the above <code>schedule_next_appointment!</code> method. If it raised an error, it would propagate to the <code>InvoiceJobOp</code>.</p>

<h3>Controllers</h3>

<p>Generally speaking, we have one <code>Op</code> per controller action that declares what it expects and manipulates the backend data as needed.</p>

<p>Here is a typical example from one of our controllers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">JobsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">confirm</span>
</span><span class='line'>    <span class="vi">@job</span> <span class="o">=</span> <span class="no">Job</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">authorize</span> <span class="vi">@job</span><span class="p">,</span> <span class="ss">:confirm?</span> <span class="c1"># authorization</span>
</span><span class='line'>    <span class="n">op</span> <span class="o">=</span> <span class="no">Organic</span><span class="o">::</span><span class="no">JobConfirmOp</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">current_user</span><span class="p">)</span>
</span><span class='line'>    <span class="n">op</span><span class="o">.</span><span class="n">submit!</span><span class="p">(</span><span class="n">params</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">job_id</span><span class="p">:</span> <span class="vi">@job</span><span class="o">.</span><span class="n">id</span><span class="p">))</span> <span class="c1"># perform action</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">:show</span> <span class="c1"># render template</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>An action will typically do the following:</p>

<ul>
<li>Load a resource</li>
<li>Authorize the user is allowed do do an action</li>
<li>Perform the action with an operation (other things are in place to render and error if the op fails)</li>
<li>Render a template</li>
</ul>


<p>Note that this is clearly not a typical RESTful route. We&#8217;ve found that becomes less important when using this pattern. When the controllers are just wiring things up and are all a 5 lines or less, it feels like there is more flexibility.</p>

<p>It probably gets summed up something like this: wherever the fat (real work) is, that should be focused. For us, it&#8217;s not the controller because of service objects. The real work is 1 to 1 focused with the use case. If more was in the controllers, we&#8217;d probably be closer to the standard index, show, etc methods because of the focus concept.</p>

<h3>Sharing</h3>

<p>So we have pushed everything out closer to the user experience and away from the models. But what if something is needed in a few pieces of the experience?</p>

<p>A few ways we have done sharing:</p>

<ul>
<li>Two <code>Op</code>s can use a lower-level one or other type of class as noted above.</li>
<li>Two <code>Op</code>s can have a mixin with the shared behavior.</li>
<li>We can add a method to an applicable model. We tend to do this on simple methods that are interpreting the model data to answer a commonly-asked question or commonly-used display value.</li>
</ul>


<h3>Summary</h3>

<p>We have found that this approach provides a more maintainable and overall successful way of building Rails apps.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Architecture: Service Objects</wp:post_id>
            <wp:post_date>2017-03-03 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Architecture: Models</title>
            <link>http://bleonard.github.io/blog/2017/02/24/architecture-models/</link>
            <pubDate>2017-02-24 00:00:00 -0800</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2017/02/24/architecture-models/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>This is the first post in what I hope will be a series of articles about how we build things at <a href="https://www.taskrabbit.com">TaskRabbit</a>. Over time, we/I have internalized all kinds of lessons and patterns, but have never written them down explicitly and publicly. So let&#8217;s give that a try.</p>

<p>I thought we&#8217;d start with models. That&#8217;s what <a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html">Rails</a> calls database tables where each row is an instance of that model class.</p>

<p>Overall, we default to the following rules when designing the models in a system:</p>

<ul>
<li>Keep the scope small and based on decisions in the workflow</li>
<li>Use state machines to declare and lock in the valid transitions</li>
<li>Denormalize as needed to optimize use cases in the experience</li>
</ul>


<h3>Scope</h3>

<p>When designing a feature (or the whole app in its early days), you have to decide what the models represent. I&#8217;m calling that the &#8220;scope&#8221; of the model.</p>

<p>For example, most applications have a <code>User</code> model. What columns will it have? Stuff about the user, obviously. But what stuff? One of the tradeoffs to consider is <code>User</code> vs. <code>Account</code> vs. <code>Profile</code>. If you put everything about the user in the same table as the one that&#8217;s pointed to in many foreign keys through the system, there will be a performance impact.</p>

<p>So we put the most commonly needed items on every screen load in the <code>User</code> model and &#8220;extra&#8221; stuff in the <code>Profile</code>.</p>

<ul>
<li><code>User</code>: authentication, name, avatar, state</li>
<li><code>Profile</code>: address, average rating, bio information</li>
</ul>


<p>There are plenty of ways to cut this up into other models and move things around, but that&#8217;s what I mean about &#8220;scope&#8221; of a model.</p>

<h3>States</h3>

<p>State machines are built into the foundation of the system. Almost every model has a <code>state</code> column and an initial state. There are then valid transitions to other states.</p>

<p>For example, there is a <code>PaymentTransaction</code> model. It has an initial &#8220;pending&#8221; state that represents the time between when an invoice is submitted and when we charge the credit card. During this time, it can move to a &#8220;canceled&#8221; state if it should not happen. Or, if things go as planned, it can transition to a &#8220;settled&#8221; state. After that, if there is an issue of some sort, it would go to a &#8220;refunded&#8221; state. Notably, going from &#8220;pending&#8221; to &#8220;refunded&#8221; is <em>not</em> a valid transition.</p>

<div class="jumbotron">
<img src="http://bleonard.github.io/images/posts/architecture-models/states.png" class="bigPicture" />
</div>


<p>Creating these state and transitions preserves some sanity in the system. It&#8217;s a safety check. By asserting what is possible, we can (try to) prevent things that should not be possible.</p>

<h3>Nouns and Verbs</h3>

<p>The TaskRabbit marketplace creates a job that is sent to a Tasker. The Tasker can chat with the Client and can say they will do the job. Or they can decline. If they agree, they are officially assigned to the job and make an appointment. When they complete the job, they invoice the Client for the time worked. In most cases, it&#8217;s done at that point. In other cases, it is &#8220;ongoing&#8221; where they come back next week (to clean again, for example). At more or less any time, the whole thing can be canceled.</p>

<p>If given that description, you could come up with many possible model structures. They would all have a set of pros and cons, but many would work out just fine.</p>

<p>For example, you could have a <code>Job</code> model with these kinds of states: <code>invited</code>, <code>invitation_declined</code>, <code>assigned</code>, <code>appointment_made</code>, <code>invoiced</code>, <code>invoice_paid</code>, <code>canceled</code>, etc. Each would only allow the valid transitions as described above. You would also need the columns to represent the data: <code>client_id</code>, <code>tasker_id</code>, <code>appointment_at</code>, etc.</p>

<p>The main benefit of this approach is centrality. You can <code>SELECT * FROM jobs WHERE client_id = 42</code> and get all of that user&#8217;s situation. Over time, however, we came to value a more decentralized approach.</p>

<p>Now, the models of our system reflect its objects and decisions that the actors make about them. Each fork in the experience has a corresponding model with a simple state machine.</p>

<p>For example, the <code>Invitation</code> model is created first to note the decision the Tasker must make. It then either transitions to <code>accepted</code> or <code>declined</code>.  If accepted, it spawns an <code>Assignment</code>. It, in turn, can move to states like <code>completed</code> or <code>ongoing</code>.</p>

<div class="jumbotron">
<img src="http://bleonard.github.io/images/posts/architecture-models/invitations.png" class="bigPicture" />
</div>


<p>There is still the the <code>Job</code> model but it contains the &#8220;description&#8221; of the work to do and its <code>id</code> ties together the decision-based models.</p>

<h3>Trade-offs</h3>

<p>Everything is pros and cons. The decentralized approach has more global complexity (more objects and interactions) but less local complexity (simpler decisions, states).</p>

<p>It seemed to be the single, monolithic state machine that doomed the single <code>Job</code> model. Everything is fine as long as that&#8217;s the only path through the system. However, as soon as there is a new way for a Task to be assigned, we have a tangled web of states.</p>

<p>Not every task has the invitation pattern noted above. Some are &#8220;broadcast&#8221; to many Taskers at once and shown in a browse-able &#8220;Available Tasks&#8221; section in the their app. That&#8217;s a new fork in the experience. Ongoing tasks also create a state loop of sorts.</p>

<p>These cause the single state machine to get a bit tangled up, but is more easily handled in the decentralized approach. We can make a <code>Broadcast</code> model instead of an <code>Invitation</code> one. That can have its own set of states. Success in that local state machine can also spawn an <code>Assignment</code> and everything goes on as before.</p>

<h3>Denormalization</h3>

<p>To try and get the best of both worlds, we have also aggressively embraced a variety of forms of denormalization.</p>

<p>We actively try not to do SQL <code>JOIN</code>s for simplicity and performance reasons, but that is at odds with all these little models all over the place. So we have said it&#8217;s OK to have duplicate data. For example, each of these &#8220;decision&#8221; models have the <code>client_id</code>, <code>tasker_id</code>, and pricing information. It just gets passed along. This makes everything a local decision and queries very straightforward.</p>

<p>The big hole in the decentralized approach is to &#8220;get all my stuff&#8221; easily. For that we have different tactics, both of which are denormalization with use cases in mind.</p>

<p>On write to an object, we can update a central model with the current situation for that <code>Job</code>. For example, when an <code>Assignment</code> gets created, we recalculate and store data in two different tables. One for both the Tasker and the Client on what they should be seeing on their respective dashboards. Thus, the API call to &#8220;get all my stuff&#8221; uses one of those tables. That is done in the same transaction as the original write.</p>

<p>The other option is basically the same thing but for either less time-sensitive data or more complicated queries. We use a <a href="/blog/2015/04/02/queue-bus/">message bus</a> to observe changes. We then denormalize applicable data for a specific use case into a table or <a href="http://www.elastic.co">Elasticsearch</a>. For example, when an <code>Appointment</code> is created, we would update the Taskers availability schedule in the database. Updating this schedule would also trigger an update to our recommendation algorithm which uses Elasticsearch.</p>

<p>One important note: all of these denormalizations should be <a href="http://www.restapitutorial.com/lessons/idempotency.html">idempotent</a>. This allows us to recreate the whole thing from the source of truth or recover if any given event is dropped.</p>

<h3>Summary</h3>

<p>At TaskRabbit, we default to the following rules when designing the models in a system:</p>

<ul>
<li>Keep the scope small and based on decisions in the workflow</li>
<li>Use state machines to declare and lock in the valid transitions</li>
<li>Denormalize as needed to optimize use cases in the experience</li>
</ul>


<p>As always, these are just the default guidelines. In any given case, there may be a reason to deviate, but it would have to be clear why that case was special.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Architecture: Models</wp:post_id>
            <wp:post_date>2017-02-24 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Developing an Amazon Alexa Skill on Rails</title>
            <link>http://bleonard.github.io/blog/2016/12/02/amazon-alexa-rails/</link>
            <pubDate>2016-12-02 00:00:00 -0800</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2016/12/02/amazon-alexa-rails/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>In March, we had a hack day at <a href="https://www.taskrabbit.com">TaskRabbit</a> and I did a demo of posting a task using a borrowed new-ish (at the time) Amazon <a href="https://www.amazon.com/echo">Echo</a> via <a href="https://developer.amazon.com/alexa">Alexa</a>. For the first time in a year, I made a new <a href="/blog/2014/02/11/rails-4-engines/">engine</a> that would handle all these new-fangled conversational UIs and bots and stuff.</p>

<p>The hack day came and went (I didn&#8217;t win) and this branch was just sitting there every time I did a <code>git branch</code> command. I only have a few there. Keep it clean, people! Then I saw the Cyber Monday deals on Amazon. I decided that it had sat there long enough so I dusted it off to try and bring it to the finish line.</p>

<p>I more or less started over, of course, because that&#8217;s how it goes. I thought I would document the process for anyone else on the trail.</p>

<div class="jumbotron">
  <image src="http://bleonard.github.io/images/posts/alexa/skill_store.png" class="bigPicture"/>
</div>


<h3>Alexa Sessions</h3>

<p>The <a href="https://developer.amazon.com/alexa-skills-kit">Alexa API</a> uses JSON to make requests and receive responses. Each session has a guid and (optional) user information.</p>

<p>The API has some cool session management tricks. You can <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/alexa-skills-kit-interface-reference">return attributes</a> that will also get passed back on the next request. This effectively gives you &#8220;memory&#8221; of the previous parts of a conversation. I chose to not do this because I am hoping to use the same engine for other similiar interfaces. Instead I save the same stuff but to a table table using the session guid as the key. In ether case, it&#8217;s important to know where you&#8217;ve been and what you need to move forward.</p>

<p>In our case, we want to check the box that says there has to be a linked user. Because this is checked, the Alexa App will send them through an OAuth flow on our site. So we generate a token that maps to the user in our system and Alexa stores that token in hers. Side note: it&#8217;s hard to not fully personify Alexa after talking (arguing) back and forth all week.</p>

<h3>Hello World</h3>

<p>Alexa is given a single endpoint for a skill. It will POST the request to that route. So I added the line to the <code>routes.rb</code> file and sent it to a new <code>SkillsController</code>. It looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SkillsController</span> <span class="o">&lt;</span> <span class="o">::</span><span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">root</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">=</span> <span class="no">AlexaRubykit</span><span class="o">::</span><span class="no">Response</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">session_end</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">output</span><span class="o">.</span><span class="n">add_speech</span><span class="p">(</span><span class="s2">&quot;Hello World&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">render</span> <span class="n">json</span><span class="p">:</span> <span class="n">output</span><span class="o">.</span><span class="n">build_response</span><span class="p">(</span><span class="n">session_end</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>I used the <a href="https://github.com/damianFC/alexa-rubykit">alexa_rubykit</a> gem with some <a href="https://github.com/damianFC/alexa-rubykit/pull/5">modifications</a> to parse the request and write the response.</p>

<p>So how can we get the Echo on the desk to talk to the computer? It&#8217;s only 12 inches away and yet&#8230; so far! The Alexa app in the developer console has to point to a publically accessible HTTPS site. I googled around a little bit and stumbled upon <a href="https://ngrok.com">ngrok</a>. You install ngrok and run <code>ngrok http 3000</code>. This gives you a public https site that forwards to your localhost that you can put in the developer console.</p>

<h3>Alexa Intents</h3>

<p>To know what the user said involves the <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/alexa-skills-kit-interaction-model-reference">intents</a> that are created in the developer console.</p>

<p>A simple example to get whatever the user said would look like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;intents&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;intent&quot;</span><span class="p">:</span> <span class="s2">&quot;UserInput&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;slots&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Generic&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;AMAZON.LITERAL&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You also use &#8220;utterances&#8221; to give examples of this generic input.</p>

<p>There are also several other helpful intents that normalize data. For example, the user can say the date and time in many ways but Amazon can normalize that and send over a known format. Other examples include commands commands like <em>yes</em>, <em>no</em>, <em>cancel</em>, and <em>stop</em>.</p>

<p>Here are the intents I ended up with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;intents&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;intent&quot;</span><span class="p">:</span> <span class="s2">&quot;AMAZON.YesIntent&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;intent&quot;</span><span class="p">:</span> <span class="s2">&quot;AMAZON.NoIntent&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;intent&quot;</span><span class="p">:</span> <span class="s2">&quot;AMAZON.CancelIntent&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;intent&quot;</span><span class="p">:</span> <span class="s2">&quot;AMAZON.StopIntent&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;intent&quot;</span><span class="p">:</span> <span class="s2">&quot;TaskPost&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;slots&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Generic&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;AMAZON.LITERAL&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;ScheduleDate&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;AMAZON.DATE&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;ScheduleTime&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;AMAZON.TIME&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I used the <a href="https://github.com/sidoh/alexa_generator">alexa_generator</a> gem with some <a href="https://github.com/sidoh/alexa_generator/pull/1">updates</a> to declare these in a way that looks like routes. It also allows you to give examples which helps generate all the files that is needed.</p>

<p>For example, here is my <code>alexa.rb</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;alexa_generator&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Interactive</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">AlexaModel</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">get</span>
</span><span class='line'>      <span class="vi">@instance</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">define</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@instance</span> <span class="o">=</span> <span class="no">AlexaGenerator</span><span class="o">::</span><span class="no">InteractionModel</span><span class="o">.</span><span class="n">build</span> <span class="k">do</span> <span class="o">|</span><span class="n">model</span><span class="o">|</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">model</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Interactive</span><span class="o">::</span><span class="no">AlexaModel</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span> <span class="o">|</span><span class="n">model</span><span class="o">|</span>
</span><span class='line'>  <span class="n">model</span><span class="o">.</span><span class="n">add_intent</span><span class="p">(</span><span class="s2">&quot;AMAZON.YesIntent&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">model</span><span class="o">.</span><span class="n">add_intent</span><span class="p">(</span><span class="s2">&quot;AMAZON.NoIntent&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">model</span><span class="o">.</span><span class="n">add_intent</span><span class="p">(</span><span class="s2">&quot;AMAZON.CancelIntent&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">model</span><span class="o">.</span><span class="n">add_intent</span><span class="p">(</span><span class="s2">&quot;AMAZON.StopIntent&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">model</span><span class="o">.</span><span class="n">add_intent</span><span class="p">(</span><span class="ss">:TaskPost</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">intent</span><span class="o">|</span>
</span><span class='line'>    <span class="n">intent</span><span class="o">.</span><span class="n">add_slot</span><span class="p">(</span><span class="ss">:Generic</span><span class="p">,</span> <span class="s2">&quot;AMAZON.LITERAL&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">slot</span><span class="o">|</span>
</span><span class='line'>      <span class="n">slot</span><span class="o">.</span><span class="n">add_bindings</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;find me a handyman&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;clean my house&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="c1"># ... many, many things here ...</span>
</span><span class='line'>        <span class="s1">&#39;wait in line&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">intent</span><span class="o">.</span><span class="n">add_slot</span><span class="p">(</span><span class="ss">:ScheduleDate</span><span class="p">,</span> <span class="s2">&quot;AMAZON.DATE&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">slot</span><span class="o">|</span>
</span><span class='line'>      <span class="n">slot</span><span class="o">.</span><span class="n">add_bindings</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;tomorrow&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;today&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;this friday&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;thursday&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">intent</span><span class="o">.</span><span class="n">add_slot</span><span class="p">(</span><span class="ss">:ScheduleTime</span><span class="p">,</span> <span class="s2">&quot;AMAZON.TIME&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">slot</span><span class="o">|</span>
</span><span class='line'>      <span class="n">slot</span><span class="o">.</span><span class="n">add_bindings</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;morning&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;afternoon&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;evening&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;noon&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;six pm&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">intent</span><span class="o">.</span><span class="n">add_utterance_template</span><span class="p">(</span><span class="s1">&#39;{Generic}&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">intent</span><span class="o">.</span><span class="n">add_utterance_template</span><span class="p">(</span><span class="s1">&#39;{ScheduleDate} at {ScheduleTime}&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">intent</span><span class="o">.</span><span class="n">add_utterance_template</span><span class="p">(</span><span class="s1">&#39;{ScheduleDate} {ScheduleTime}&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">intent</span><span class="o">.</span><span class="n">add_utterance_template</span><span class="p">(</span><span class="s1">&#39;{ScheduleTime} {ScheduleDate}&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">intent</span><span class="o">.</span><span class="n">add_utterance_template</span><span class="p">(</span><span class="s1">&#39;{ScheduleDate}&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">intent</span><span class="o">.</span><span class="n">add_utterance_template</span><span class="p">(</span><span class="s1">&#39;{ScheduleTime}&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running a rake job I wrote will the generate the above intents json as well as the sample utterances for the developer console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>TaskPost {find me a handyman|Generic}
</span><span class='line'>TaskPost {clean my house|Generic}
</span><span class='line'>... many, many things here ...
</span><span class='line'>TaskPost {wait in line|Generic}
</span><span class='line'>TaskPost {ScheduleDate}
</span><span class='line'>TaskPost {ScheduleDate} at {ScheduleTime}
</span><span class='line'>TaskPost {ScheduleDate} {ScheduleTime}
</span><span class='line'>TaskPost {ScheduleTime}
</span><span class='line'>TaskPost {ScheduleTime} {ScheduleDate}
</span></code></pre></td></tr></table></div></figure>


<h3>Simple Response</h3>

<p>A simple skill would probably have one-ish intent and few examples. It would receives those in the controller, return the response, and then end the session. We would also handle a few of the states to help the user out.</p>

<p>The controller might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SkillsController</span> <span class="o">&lt;</span> <span class="o">::</span><span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">root</span>
</span><span class='line'>    <span class="n">input</span> <span class="o">=</span> <span class="no">AlexaRubykit</span><span class="o">.</span><span class="n">build_request</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">=</span> <span class="no">AlexaRubykit</span><span class="o">::</span><span class="no">Response</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">session_end</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;There was an error.&quot;</span> <span class="c1"># unknown thing happened</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="n">input</span><span class="o">.</span><span class="n">type</span>
</span><span class='line'>    <span class="k">when</span> <span class="s2">&quot;LAUNCH_REQUEST&quot;</span>
</span><span class='line'>      <span class="c1"># user talked to our skill but did not say something matching intent</span>
</span><span class='line'>      <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Say something see what happens.&quot;</span>
</span><span class='line'>    <span class="k">when</span> <span class="s2">&quot;INTENT_REQUEST&quot;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">input</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>      <span class="k">when</span> <span class="s2">&quot;UserInput&quot;</span>
</span><span class='line'>        <span class="c1"># our custom, simple intent from above that user matched</span>
</span><span class='line'>        <span class="n">given</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="n">slots</span><span class="o">[</span><span class="s2">&quot;Generic&quot;</span><span class="o">].</span><span class="n">value</span>
</span><span class='line'>        <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;You said, </span><span class="si">#{</span><span class="n">given</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">when</span> <span class="s2">&quot;SESSION_ENDED_REQUEST&quot;</span>
</span><span class='line'>      <span class="c1"># it&#39;s over</span>
</span><span class='line'>      <span class="n">message</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">output</span><span class="o">.</span><span class="n">add_speech</span><span class="p">(</span><span class="n">message</span><span class="p">)</span> <span class="k">unless</span> <span class="n">message</span><span class="o">.</span><span class="n">blank?</span>
</span><span class='line'>    <span class="n">render</span> <span class="n">json</span><span class="p">:</span> <span class="n">output</span><span class="o">.</span><span class="n">build_response</span><span class="p">(</span><span class="n">session_end</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conversations</h3>

<p>It all gets a bit more complicated when there is a back and forth conversation. At this point, I would say Alexa is not yet optimized for this use case.</p>

<p>For example, in our app with the shown set of intents, any one of them could come through. I could ask the user a yes/no question like &#8220;Your task is ready to book. Continue?&#8221; but the user could say &#8220;clean my house&#8221; or literally&#8230; anything. So I&#8217;d be expecting a <code>AMAZON.YesIntent</code> but get a <code>AMAZON.LITERAL</code> one. At the same time, it&#8217;s very helpful to use the built in intents for their normalization capabilities. Otherwise, I&#8217;d have to do my own natural language stuff to know all the variations of dates and ways to cancel, etc.</p>

<p>So the trick of a conversation seems to be to know the state, know the related intents that are expected, and merge them together as best as possible. As noted, I store the state and the data collected in the database. In concept (in reality this is spread out over many classes), we add a case statement to the controller.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SkillsController</span> <span class="o">&lt;</span> <span class="o">::</span><span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">root</span>
</span><span class='line'>    <span class="n">input</span> <span class="o">=</span> <span class="no">AlexaRubykit</span><span class="o">.</span><span class="n">build_request</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">=</span> <span class="no">AlexaRubykit</span><span class="o">::</span><span class="no">Response</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">session_end</span> <span class="o">=</span> <span class="kp">false</span> <span class="c1"># probably going to keep going</span>
</span><span class='line'>    <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;There was an error.&quot;</span> <span class="c1"># unknown thing happened</span>
</span><span class='line'>    <span class="n">session</span> <span class="o">=</span> <span class="no">Session</span><span class="o">.</span><span class="n">find_or_initialize_by</span><span class="p">(</span><span class="n">session_id</span><span class="p">:</span> <span class="n">input</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">session_id</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="n">input</span><span class="o">.</span><span class="n">type</span>
</span><span class='line'>    <span class="k">when</span> <span class="s2">&quot;LAUNCH_REQUEST&quot;</span>
</span><span class='line'>      <span class="c1"># user talked to our skill but did not say something matching intent</span>
</span><span class='line'>      <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Hi. How can we help?&quot;</span>
</span><span class='line'>    <span class="k">when</span> <span class="s2">&quot;INTENT_REQUEST&quot;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">session</span><span class="o">.</span><span class="n">state</span>
</span><span class='line'>      <span class="k">when</span> <span class="s2">&quot;selecting_category&quot;</span>
</span><span class='line'>        <span class="n">category</span> <span class="o">=</span> <span class="n">select_category</span><span class="p">(</span><span class="n">slot_params</span><span class="p">)</span> <span class="c1"># uses generic</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">category</span>
</span><span class='line'>          <span class="n">session</span><span class="o">.</span><span class="n">category</span> <span class="o">=</span> <span class="n">category</span>
</span><span class='line'>          <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;What date and time?&quot;</span>
</span><span class='line'>          <span class="n">session</span><span class="o">.</span><span class="n">state</span> <span class="o">=</span> <span class="s2">&quot;deciding_time&quot;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Sorry, missed that. Try cleaning or handyman.&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">when</span> <span class="s2">&quot;deciding_time&quot;</span>
</span><span class='line'>        <span class="n">schedule</span> <span class="o">=</span> <span class="n">select_schedule</span><span class="p">(</span><span class="n">slot_params</span><span class="p">)</span> <span class="c1"># uses date/time</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">schedule</span>
</span><span class='line'>          <span class="n">session</span><span class="o">.</span><span class="n">schedule</span> <span class="o">=</span> <span class="n">schedule</span>
</span><span class='line'>          <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Tell us more about it&quot;</span>
</span><span class='line'>          <span class="n">session</span><span class="o">.</span><span class="n">state</span> <span class="o">=</span> <span class="s2">&quot;adding_details&quot;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Try things like Friday at noon.&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">when</span> <span class="s2">&quot;adding_details&quot;</span> <span class="c1"># etc</span>
</span><span class='line'>      <span class="k">when</span> <span class="s2">&quot;confirming&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">did_confirm?</span><span class="p">(</span><span class="n">slot_params</span><span class="p">)</span> <span class="c1"># uses yes</span>
</span><span class='line'>          <span class="c1"># do it!</span>
</span><span class='line'>          <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Your task has been booked&quot;</span>
</span><span class='line'>          <span class="n">session</span><span class="o">.</span><span class="n">state</span> <span class="o">=</span> <span class="s2">&quot;completed&quot;</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="n">did_exit?</span><span class="p">(</span><span class="n">slot_parms</span><span class="p">)</span>  <span class="c1"># uses no</span>
</span><span class='line'>          <span class="n">session</span><span class="o">.</span><span class="n">state</span> <span class="o">=</span> <span class="s2">&quot;canceled&quot;</span>
</span><span class='line'>          <span class="n">session_end</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Ready to confirm? Say yes or no&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">when</span> <span class="s2">&quot;completed&quot;</span>      <span class="c1"># etc</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">when</span> <span class="s2">&quot;SESSION_ENDED_REQUEST&quot;</span>
</span><span class='line'>      <span class="c1"># it&#39;s over</span>
</span><span class='line'>      <span class="n">message</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="n">session_end</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">session</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>    <span class="n">output</span><span class="o">.</span><span class="n">add_speech</span><span class="p">(</span><span class="n">message</span><span class="p">)</span> <span class="k">unless</span> <span class="n">message</span><span class="o">.</span><span class="n">blank?</span>
</span><span class='line'>    <span class="n">render</span> <span class="n">json</span><span class="p">:</span> <span class="n">output</span><span class="o">.</span><span class="n">build_response</span><span class="p">(</span><span class="n">session_end</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">slot_params</span>
</span><span class='line'>    <span class="c1"># returns all the intent slots</span>
</span><span class='line'>    <span class="c1"># e.g. {&quot;generic&quot; =&gt; &quot;what they said&quot;, &quot;schedule_date&quot; =&gt; &quot;2016-12-05&quot;}</span>
</span><span class='line'>    <span class="k">return</span> <span class="vi">@slot_params</span> <span class="k">if</span> <span class="vi">@slot_params</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@slot_params</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">return</span> <span class="vi">@slot_params</span> <span class="k">unless</span> <span class="n">input</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;INTENT_REQUEST&quot;</span>
</span><span class='line'>    <span class="n">input</span><span class="o">.</span><span class="n">slots</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">slot</span><span class="o">|</span>
</span><span class='line'>      <span class="n">key</span> <span class="o">=</span> <span class="nb">name</span><span class="o">.</span><span class="n">underscore</span> <span class="c1"># category_noun, etc</span>
</span><span class='line'>      <span class="n">value</span> <span class="o">=</span> <span class="n">slot</span><span class="o">[</span><span class="s1">&#39;value&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@slot_params</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@slot_params</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using this pattern, you can have a decent conversation.</p>

<h3>SDK Update Requests</h3>

<p>There are two simple things that I think would make this a much better platform.</p>

<p>The first is to be able to handle conversations better. If I could include which intents I am expecting back from the thing I just asked, everything would be 10x better.</p>

<p>The issue can be seen when the app asks for more details about the app. Basically, it wants wants to get a <code>AMAZON.Literal</code> of a few sentences and write it down. I found that if the user happens to say &#8220;tomorrow&#8221; in there somewhere, it sometimes matches the Date and that&#8217;s the only data I get.</p>

<p>The issue is that what I&#8217;m interested in is specified globally and therefore does not have the context. If we could respond with expected intents or something to that effect, conversations would be much better.</p>

<p>The other feature is to be able to return links in the card. When I return <code>LinkAccount</code> card in a response, there is a call to action on the card in the Alexa App to do OAuth. I would like to return text and URL to put arbitrary things in the same spot. That way I could link the user to their task they just posted to create a more seamless experience.</p>

<h3>Summary</h3>

<p>Alexa development is fairly straightforward assuming you don&#8217;t need or already have the OAuth provider bits set up. Most of the docs talk about a Java package but doing it in the Rails environment was no trouble with existing gems or parsing the json yourself.</p>

<p>It&#8217;s not quite as easy for conversations but you can make it work. A few more tweaks, along with push notifications, would add a ton of value.</p>

<p>The TaskRabbit Skill is now published! Check it out.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Developing an Amazon Alexa Skill on Rails</wp:post_id>
            <wp:post_date>2016-12-02 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Post Election</title>
            <link>http://bleonard.github.io/blog/2016/11/10/post-election/</link>
            <pubDate>2016-11-10 00:00:00 -0800</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2016/11/10/post-election/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>I&#8217;ve been thinking a lot about the book <a href="https://en.wikipedia.org/wiki/The_City_%26_the_City"><em>The City &amp; the City</em></a> by China Miéville. It describes a town in which two sets of people share the same physical space but do not acknowledge each other. For that matter, they are forbidden to do so.</p>

<p>I remember being surprised in 1992 when Bill Clinton won the election. I lived in Texas and everyone I knew was voting for Bush. Now, I live in California and the same thing snuck up on me again this week. There&#8217;s very little learning there.</p>

<p>But it&#8217;s not just where I live because technology has allowed a nation like in the book. Today, my Twitter feed is filled with anxiety, sadness, outrage, and very scared people. I am certain there are people nearby, not to mention in all those (many) red states, that have an exceptionally different feed: one full of hope, expectation, and triumph. And there is no connection between the two.</p>

<p>In that 1992 election, it was the economy (<a href="https://en.wikipedia.org/wiki/It%27s_the_economy,_stupid">stupid</a>) and the need for change. I&#8217;m certainly not a political analyst, but that rings just as true this week. All the jobs numbers are up over the last 8 years, but not everywhere and not for everyone. This has caused a rift.</p>

<h2>Forward</h2>

<p>Where do we go from here? I believe it&#8217;s best for each of use to use our talents and position as leverage to make a difference. In my case, I can help literally provide work in these areas of the country.</p>

<p><a href="https://www.taskrabbit.com">TaskRabbit</a> has been focusing on its largest markets because there is still plenty of room to grow there. And the whole thing is a hard problem. The focus helps, but our map is somewhat bare in Middle America. For me, this election is a kick in the pants to get there sooner than later.</p>

<p>The biggest fail there would be to believe that we can &#8220;save&#8221; people from on high by bestowing the magic of technology. Fortunately, even as the chief technologist at TaskRabbit, I understand that&#8217;s not where the value lies. It&#8217;s always been about neighbors helping neighbors. We&#8217;re just there to make the real-life connection.</p>

<p>I don&#8217;t know about you, but I think we could all really use a few more real-life connections at the moment.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Post Election</wp:post_id>
            <wp:post_date>2016-11-10 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>React Native Android Launch</title>
            <link>http://bleonard.github.io/blog/2016/03/24/react-native-android-launch/</link>
            <pubDate>2016-03-24 00:00:00 -0700</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2016/03/24/react-native-android-launch/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>Yesterday, we launched our updated Tasker app to our Android community. As noted <a href="/blog/2015/12/17/react-native-launch/">before</a> on the iOS launch, this is the app that Taskers use to get their work done. This completes our migration to <a href="https://facebook.github.io/react-native/">React Native</a>.</p>

<p>All of the credit goes to the team that made this happen, especially <a href="https://twitter.com/jrichardlai">JR</a> and <a href="http://jeremyeaton.co/">Jeremy</a>. It was a lot harder than expected to get everything working on both platforms and they showed great dedication and persistence.</p>

<h2>Approach</h2>

<p>The goal of the last release was for the iOS users to not even notice. Mission (more or less) accomplished! However, for this one, it didn&#8217;t make sense to fork the code by platform without a good reason. So admittedly, the app looks more like an iOS app and than an Android one. However, we did go screen by screen looking for places where Android-specific attention would help the user.</p>

<h2>Differences</h2>

<p>I&#8217;ll let JR do a followup to his <a href="/blog/2016/01/11/react-native-android/">previous post</a> of all the differences, but the biggest ones in my mind were the handling of the hardware back button and different pickers (date, for example) in the forms. The <code>Platform</code> directory strategy we had put in place during the first cycle worked out pretty well.</p>

<p>We also really struggled with getting push notifications right. This is key for our business and there were many more nuances on the Android platform to work out. We hope to publish what we came up with.</p>

<p>Of course, there was also the more extensive testing to do. Our Android pile:</p>

<div class="jumbotron">
  <img src="http://bleonard.github.io/images/posts/react-native-android-launch/pile.jpg" class="bigPicture"/>
</div>


<h2>Stats</h2>

<ul>
<li>App Javascript: 302 files with 21515 lines of code</li>
<li>Test Javascript: 47 files with 5708 lines of code</li>
<li>iOS Javascript: 19 files with 449 lines of code</li>
<li>Android Javascript: 19 files with 770 lines of code</li>
<li>Objective C: 17 files with 885 lines of code</li>
<li>Java: 15 files with 912 lines of code</li>
<li>iOS Config files: 18 files with 2538 lines of stuff</li>
<li>Android Config files: 16 files with 1106 lines of stuff</li>
<li>React Components: 124</li>
<li>Screens (addressable url patterns): 25</li>
<li>Avg. components per screen: 5</li>
<li>Dispatcher Events: 55</li>
<li>Shared JS (vs. Platform JS) percentage: 94%</li>
<li>JS (vs. Native ObjC/Java) percentage: 92%</li>
<li>Total shared code percentage: 87%</li>
<li>Total shared (including config) percentage: 75%</li>
</ul>


<h2>Next steps</h2>

<p>Now, we certainly didn&#8217;t do this engineering project because the tech was cool (even though it is). We did it to create a foundation that allows us to deliver value more effectively to our community. So that&#8217;s the next order of business. Time to get rolling! I estimate that we can ship features to both platforms at least twice as quickly with half the engineers than we had before.</p>

<p>Too long, but did read anyway: For you execs out there that somehow read this far (even past lines of code counts!), I&#8217;d say that we&#8217;ve found React Native to be at least 5x more productive than traditional mobile development.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>React Native Android Launch</wp:post_id>
            <wp:post_date>2016-03-24 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>React Native Launch</title>
            <link>http://bleonard.github.io/blog/2015/12/17/react-native-launch/</link>
            <pubDate>2015-12-17 00:00:00 -0800</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2015/12/17/react-native-launch/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>This week, we launched our updated Tasker app to the community. This is not the app on the app store, but rather the one the Taskers use to get their work done. Functionally, not much has changed since the last release. But underneath, the app has been completely rewritten in <a href="https://facebook.github.io/react-native/">React Native</a>.</p>

<p>First and foremost, a huge congratulations needs to go out to the team, especially <a href="https://twitter.com/jrichardlai">JR</a>. I&#8217;ve never been on an engineering project that went as smoothly or was as fun as this one. So good!</p>

<h2>Prototype</h2>

<p>I started looking into React Native in the beginning of August. It&#8217;s a really great story. First of all, it&#8217;s <a href="https://facebook.github.io/react/">React</a>. I&#8217;ve now decided that&#8217;s just about the best thing out there. Secondly, I was 10x more productive than when developing a regular iOS app. Finally, there was a decent chance much of the code could be reused on Android. If every feature did not have to be developed twice, we could choose to develop twice as many features or have half the engineers work on something else.</p>

<p>I created a prototype to see if I thought it could work. The main concerns I had we around navigation, push notifications, other native features, data storage, and just getting the right project structure. More or less, I ended up with the <a href="https://github.com/taskrabbit/ReactNativeSampleApp">React Native Sample App</a> that we published. All of those things showed great promise or at least that they were possible.</p>

<!-- more -->


<p>The community was also evolving rapidly. It&#8217;s super exciting to be working at the beginning of a technology that shows great promise. Each week, there would be a new thing on github that solved one of our needs. Our strategy was to put off a feature to see if the core team or community would make something available. If they did not, we went ahead and <a href="https://github.com/taskrabbit/react-native-parsed-text">wrote</a> it. I&#8217;m sure everyone was doing something similar. Let&#8217;s call it bootstrap chicken.</p>

<p>The prototype was enough to convince me and enough to get people excited about it. Towards the end of September, JR started working full-time on it. My time in greenfield projects had to come to a close. Back to real life, but I stayed involved as the Product Manager.</p>

<h2>Product Management</h2>

<p>I can&#8217;t imagine anyone saying that I&#8217;m a very good PM. In particular, my story acceptance followup is horrendous. Fortunately, <a href="https://twitter.com/pdevine">Paul</a> helped me out. I did do a pretty good job of writing the stories and putting them in the right order.</p>

<p>One decision made this project work, though. It was to acknowledge that this is an engineering project, not a product one. It&#8217;s so very tempting to update the functionality of the app &#8220;while you&#8217;re at it.&#8221; But opening that door would have doubled the length of the project. Those discussions with design and others would eat up the development time. It would have made the rollout harder. We could do a soft release because it&#8217;s basically the same app. I&#8217;ve written about <a href="/blog/2015/10/26/rewrite/">rewrites</a> before, but that was to drastically change the product. If you can get away with it, do it in place and keep it the same. At least we followed one of those.</p>

<p>So I dragged stories around while JR worked his butt off. This is not a small app and we hit critical functional parity (with many UI tweaks needed) at the beginning of October. We put this in the hands of some Taskers and got their feedback. From there it was getting the less critical features done, getting feedback, shipping new builds, making it prettier, and fixing bugs.</p>

<h2>Shipping</h2>

<p>By last week, we felt really good about it but needed to buckle down to get the release out. We&#8217;d been working so quickly that it was hard to slow down and be more methodical in the final run up. We felt good because <a href="http://jeremyeaton.co/">Jeremy</a> joined the team, we had great <a href="/blog/2015/11/08/react-native-integration-tests/">test coverage</a>, and real Taskers in multiple countries were actually using the thing.</p>

<p>We put out another release to a wider audience and incorporated a few final items. Then&#8230; ship it. The reception has been neutral. Nothing good or bad. This is amazing! That means success in a technology project with no new features except all of the old ones.</p>

<h2>Notes</h2>

<p>I just wanted to note a few interesting things that we did or encountered.</p>

<ul>
<li><p>We have been beta testing React Native integration from <a href="https://realm.io">Realm</a>. All of our lists (non-singletons) stores are backed by a Realm database. For example, we use this for storing tasks. The various lists and drill-down screens all use the same data. That means its very likely to be always up to date. If you&#8217;re interested in trying it out, sign up <a href="http://goo.gl/forms/UvS8ZM9LOA">here</a>.</p></li>
<li><p>Be careful about the JS runtime (iOS version). We&#8217;ve been testing in iOS 9. Right before release, we realized a library we use was using <code>new Symbol()</code>. It works in 9.0+ but not in 8.x versions of the OS.</p></li>
<li><p>Our navigation scheme really is awesome. It makes everything easier. Check out more information <a href="/blog/2015/09/21/react-native-example-app/">here</a>.</p></li>
<li><p>Internationalization was really interesting. I&#8217;ll write up more on this topic but, briefly: each component declares its own words and we have code to go through all the components and collect them up. Then we can send that off for translation.</p></li>
<li><p><a href="https://facebook.github.io/react/docs/flux-overview.html">Flux</a> and event dispatching in general really worked out well. Just having minor piece of indirection reduces coupling and leads to great results</p></li>
<li><p>JR is trying to convert me to ES2015 and also away from <a href="https://facebook.github.io/react/docs/reusable-components.html#mixins">mixins</a>. He did this <a href="https://github.com/taskrabbit/react-component-extension">extension</a> thing. He&#8217;s probably right.</p></li>
<li><p>I think there&#8217;s a missing pattern for how to run things in the &#8220;background&#8221; in these apps. For example, maybe we&#8217;re supposed to sync something with the server every hour or so. We made something up but I haven&#8217;t seen anything else about it.</p></li>
<li><p>Everything that is iOS specific is in one directory right now and it&#8217;s not much. I&#8217;m really looking forward to the Android build.</p></li>
</ul>


<h2>Stats</h2>

<ul>
<li>Javascript: 351 files with 37168 lines of code</li>
<li>Objective C: 12 files with 1029 lines of code</li>
<li>React Components: 112</li>
<li>Screens (addressable url patterns): 25</li>
<li>Dispatcher Events: 52</li>
<li>Platform (iOS specific): 18 files with 605 lines of code</li>
<li>JS / C percentage: 97%</li>
<li>Shareable code percentage: 93% (so far - we&#8217;ll see with Android)</li>
<li>Avg. components per screen: 4.5</li>
</ul>


<h2>Next steps</h2>

<p>Now we are going to fix up a few minor things and on to Android. How exciting!</p>

<p>Ok, this video is a bit of a lie because it&#8217;s the old app. But the main point was that the React app looks just like this one. So to get an idea of the functionality we&#8217;ve implemented in React Native&#8230;</p>

<iframe src="https://player.vimeo.com/video/148648842" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>

]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>React Native Launch</wp:post_id>
            <wp:post_date>2015-12-17 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>React Native Integration Tests</title>
            <link>http://bleonard.github.io/blog/2015/11/08/react-native-integration-tests/</link>
            <pubDate>2015-11-08 00:00:00 -0800</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2015/11/08/react-native-integration-tests/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>Coming from a Rails <a href="http://guides.rubyonrails.org/testing.html">background</a>, we are very familiar with testing our code. While writing our new <a href="/blog/2015/09/21/react-native-example-app/">React Native app</a>, we found ourself missing a way to test it and ship with confidence. I&#8217;ve updated the <a href="https://github.com/taskrabbit/ReactNativeSampleApp">sample app</a> with the approach we are using for integration tests.</p>

<h2>Test Levels</h2>

<p>When thinking about what and how to test a React Native app, a few levels come to mind:</p>

<ul>
<li>Unit: Testing some pure Javascript object and it&#8217;s methods. Just run in Javascript.</li>
<li>Component: Testing a React component in isolation. You&#8217;d want to check its reaction to various state and props. Maybe run just in Javascript with heavy stubbing or in the simulator.</li>
<li>Integration: Testing a single screen or workflow in the &#8220;real&#8221; app. Run in the simulator or on the device.</li>
</ul>


<p>The approach shown here is the last one: integration testing. We did this one first because if you are only going to do one of the above, it is probably your best bet. By actually testing out what the user does, you get the highest level of &#8220;don&#8217;t screw it up&#8221; coverage.</p>

<p>There are some tradeoffs in this choice. They mostly stem from the fact that it&#8217;s the slowest (runtime) approach. Because of that, to test many edges cases takes f-o-r-e-v-e-r to actually run the tests. Something lower-level without the simulator would be much faster.</p>

<h2>Running Tests</h2>

<p>In the <a href="https://github.com/taskrabbit/ReactNativeSampleApp">sample app</a>, you follow these steps:</p>

<ul>
<li>Make sure you have the 9.0 simulators installed in XCode</li>
<li>Compile app for the test environment: <code>npm run compile:test</code></li>
<li>Launch simulator and tests: <code>npm test</code></li>
</ul>


<p>Running <code>npm test</code> will launch the simulator and the robots take over.</p>

<div class="jumbotron">
  <image src="http://bleonard.github.io/images/posts/react-native-integration-tests/follows.gif" class="bigPicture" />
</div>




<!-- more -->


<h2>Plumbing</h2>

<p>The tests are written in Javascript using the <a href="https://mochajs.org/">mocha</a> testing framework. This allows you to declare your cases much like <a href="http://rspec.info/">rspec</a> does in Ruby. It gives you hooks to run things before and after as well.</p>

<p>The simulator is run and controlled using <a href="http://appium.io/">Appium</a>. This is some serious magic that implements the <a href="http://www.seleniumhq.org/">Selenium</a> web testing framework but for iOS and Android.</p>

<p>The compile step is important because it compiles the iOS code with a slightly different environment.</p>

<p>The environment lets the iOS code knows to talk to a different port to get it&#8217;s code. The React Native <a href="https://github.com/facebook/react-native/tree/master/packager">packager</a> needs to be running on that port so the test suite launches it automatically. This means you don&#8217;t have to recompile the <code>jsbundle</code> each time you make a JS change - jsut like on the simulator with Command+R. In the same way, this is a tremendous improvement to the development process.</p>

<p>The environment also lets the the JS code do a few things differently. For example, it talks to a different localhost API port than the development app. The test suite launches a small <a href="http://koajs.com/#introduction">koa</a> server on that port. This allows any given test to specify exactly what the server should return for any given API call so we can test the app in a known state.</p>

<p>When in test mode, the <a href="https://github.com/taskrabbit/ReactNativeSampleApp/blob/9863a1037b2eb2259518c62d37cd50840790e099/App/Root.js#L87">Root</a> component also adds in a <a href="https://github.com/taskrabbit/ReactNativeSampleApp/blob/9863a1037b2eb2259518c62d37cd50840790e099/App/Root/TestRunner.js#L19">TestRunner</a> component at the top. But giving Appium buttons, it allows the suite to reset the test each time and bootstrap the app. It gets it&#8217;s bootstrap commands from the koa server. It also hooks logging so that all the <code>console.log</code> calls are sent to the koa server so everything can be logged in the test terminal. In both these, it&#8217;s the koa server that is the &#8220;bridge&#8221; between the tests and the simulator.</p>

<p>Putting it all together:</p>

<ul>
<li><code>npm test</code> runs mocha</li>
<li>mocha <a href="https://github.com/taskrabbit/ReactNativeSampleApp/blob/9863a1037b2eb2259518c62d37cd50840790e099/test/helpers/driver.js">spawns</a> an Appium driver process (which launches the simulator)</li>
<li>mocha <a href="https://github.com/taskrabbit/ReactNativeSampleApp/blob/9863a1037b2eb2259518c62d37cd50840790e099/test/helpers/packager.js">spawns</a> a React Native Packager process</li>
<li>mocha <a href="https://github.com/taskrabbit/ReactNativeSampleApp/blob/9863a1037b2eb2259518c62d37cd50840790e099/test/helpers/server.js">spawns</a> a koa server process</li>
<li>the test starts</li>
<li>the test clicks &#8220;ResetTest&#8221; to be sure to start over (which sends a message to the iOS code to delete some documents)</li>
<li>the test clicks &#8220;Bootstrap&#8221; to get setup instructions.</li>
<li>the test uses the Appium API (<code>driver.findElementById('Log in').click()</code>) to do stuff and see how it goes</li>
</ul>


<h2>Bootstrap</h2>

<p>The concept of &#8220;Bootstrap&#8221; might warrant a little more explanation.</p>

<p>The sample app has been set up to use the <a href="https://facebook.github.io/react/docs/flux-overview.html">flux pattern</a> and <a href="/blog/2015/09/21/react-native-example-app/">url-based routing</a>. These two things allow a test to put the world in the state it needs to check the behavior.</p>

<p>When writing Appium tests on our Objective-C app, to test an acount management feature, it would log in, tap the sidebar, tap the gear, then tap &#8220;Change Password&#8221; or whatever. Then the test really starts. This time really adds up.</p>

<p>It gets easier with flux and routes. For example, because everything in our React Native app is based on events from the dispatcher, we don&#8217;t have to <em>actually</em> log in. We can just dispatch the <code>LOGIN_USER</code> action with the right properties.</p>

<p>Then, because it&#8217;s based on URLs, we don&#8217;t have to navigate to the spot we want. We can just dispatch the <code>LAUNCH_ROUTE_PATH</code> with the appropriate URL and go right to the screen under test.</p>

<p>All of this saves a tremendous amount of time and headache when things change.</p>

<p>So how does this work? The test says what it wants to do to set up the world. That might look like this: <code>yield bootstrap().login().nav("dashboard/follows/friend").launch(driver);</code>. This registers actions (login, navigate) with the koa server.</p>

<p>Then when the test clicks &#8220;Bootstrap&#8221; on the app, it fetches a particular url form the koa server to get its intructions. In this case, it will dispatch the <code>LOGIN_USER</code> action, followed by the <code>LAUNCH_ROUTE_PATH</code> action. Any arbitrary action could be set, but these are the most common.</p>

<h2>Example</h2>

<p>This is what it looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="c1">// name the test something relevant</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should create a new post&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="o">*</span> <span class="p">(</span><span class="nx">driver</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// stub the fetch request to get the initial lists of posts with commonly used json</span>
</span><span class='line'>    <span class="nx">server</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;/api/posts/tester&quot;</span><span class="p">,</span> <span class="nx">fixtures</span><span class="p">.</span><span class="nx">home</span><span class="p">());</span>
</span><span class='line'>    <span class="c1">// stub creation and set expectations of endpoint to create new post</span>
</span><span class='line'>    <span class="nx">server</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">&quot;/api/posts&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span> <span class="nx">content</span><span class="o">:</span> <span class="s1">&#39;new post here&#39;</span><span class="p">,</span> <span class="nx">username</span><span class="o">:</span> <span class="s1">&#39;tester&#39;</span><span class="p">},</span> <span class="c1">// return this content</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">content</span><span class="o">:</span> <span class="s1">&#39;new post here&#39;</span><span class="p">}</span>                               <span class="c1">// expect this content</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="c1">// automatically log the test user in</span>
</span><span class='line'>    <span class="nx">yield</span> <span class="nx">bootstrap</span><span class="p">().</span><span class="nx">login</span><span class="p">().</span><span class="nx">launch</span><span class="p">(</span><span class="nx">driver</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// tap the upper right to create a new post</span>
</span><span class='line'>    <span class="nx">yield</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">elementById</span><span class="p">(</span><span class="s1">&#39;+&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// make sure the screen when there</span>
</span><span class='line'>    <span class="nx">yield</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">elementById</span><span class="p">(</span><span class="s1">&#39;New Post&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// type in some stuff</span>
</span><span class='line'>    <span class="nx">yield</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">execute</span><span class="p">(</span><span class="s2">&quot;target.frontMostApp().keyboard().typeString(&#39;new post here&#39;)&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// tap the submit button</span>
</span><span class='line'>    <span class="nx">yield</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">elementById</span><span class="p">(</span><span class="s1">&#39;Submit&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// check that we are back on the dashboard</span>
</span><span class='line'>    <span class="nx">yield</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">elementById</span><span class="p">(</span><span class="s1">&#39;Dashboard&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// make sure the new post is there</span>
</span><span class='line'>    <span class="nx">yield</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">elementById</span><span class="p">(</span><span class="s1">&#39;new post here&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// all done!</span>
</span><span class='line'>    <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here it is running:</p>

<div class="jumbotron">
  <image src="http://bleonard.github.io/images/posts/react-native-integration-tests/new_post.gif" class="bigPicture" />
</div>


<p>I find all the <code>yield</code> stuff kind of annoying but it also prevents the <a href="http://www.joshwright.com/tips/javascript-christmas-trees-promises-and-event-emitters">christmas tree of doom</a> situation.</p>

<h2>Test On!</h2>

<p>Now that we&#8217;ve written the integration tests, we can run them on a CI service like <a href="https://travis-ci.org/">Travis</a>.</p>

<p>I set up a <a href="https://github.com/taskrabbit/ReactNativeSampleApp/blob/9863a1037b2eb2259518c62d37cd50840790e099/.travis.yml">.travis.yml</a> file in the sample app and it&#8217;s <a href="https://travis-ci.org/taskrabbit/ReactNativeSampleApp">green</a>!</p>

<p>Well, that&#8217;s it. This is a very new space and we didn&#8217;t see a great way out there to do this kind of testing in a painless-as-possible kind of way. Hopefully, what we&#8217;ve done here can be useful for you in your own journey towards React Native apps that work as expected.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>React Native Integration Tests</wp:post_id>
            <wp:post_date>2015-11-08 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>To rewrite or not to rewrite?</title>
            <link>http://bleonard.github.io/blog/2015/10/26/rewrite/</link>
            <pubDate>2015-10-26 00:00:00 -0700</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2015/10/26/rewrite/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>To rewrite, or not to rewrite- that is the question: 
</span><span class='line'>Whether 'tis better for the product to suffer
</span><span class='line'>The features and debt of outrageous history
</span><span class='line'>Or to once again battle a sea of edge cases,
</span><span class='line'>And by forgetting relive them. To wish- to hope-
</span><span class='line'>No more; and by hope to say we end
</span><span class='line'>The heartache, and the thousand unnatural cases
</span><span class='line'>That code can error to. 'Tis a codebase
</span><span class='line'>Devoutly to be wish'd. To wish- to hope.
</span><span class='line'>To hope- perchance to rebuild: ay, there's the rub!
</span><span class='line'>For in that hope of clarity what simplicity comes
</span><span class='line'>When we have removed this outdated cruft
</span><span class='line'>Must give us success. But give the respect
</span><span class='line'>To the current repo of such long life.
</span><span class='line'>For who would bear the features of the past,
</span><span class='line'>High expectations, the race conditions,
</span><span class='line'>The admin tools, the product delay,
</span><span class='line'>The exhaustion overcome, and the data
</span><span class='line'>That shall posthaste be moved to a new store
</span><span class='line'>As each mistake of the past be brought back
</span><span class='line'>With sighs of regret? Who would these issues bear,
</span><span class='line'>To toil and code under a weary life,
</span><span class='line'>But that the chance of something rebuilt
</span><span class='line'>That undiscover'd codebase, from whose lines
</span><span class='line'>No complexity returns- tempts the will,
</span><span class='line'>And makes us choose between those ills we have
</span><span class='line'>Than sprint towards others we know not of?
</span><span class='line'>Thus the unknowns make cowards of us all,
</span><span class='line'>And thus the heavy weight of such choice
</span><span class='line'>Is oft tempered by promises of thought,
</span><span class='line'>And refactorings of great scope and breadth
</span><span class='line'>With this regard the hope does turn awry
</span><span class='line'>And lose the name of action.- What say you?
</span><span class='line'>The lauded pivot! Siren of opportunity
</span><span class='line'>May all our sins be forgotten.</span></code></pre></td></tr></table></div></figure>


<p>The internal struggle of the rewrite decision eats away at developers. It could be so much better. We have learned so much. Let&#8217;s start over. It causes inaction over months accompanied by much grumbling. But if you do it, how can you make sure it doesn&#8217;t turn into a tragedy?</p>

<p>I can&#8217;t say that I am happy or proud that we have rewritten TaskRabbit twice. That doesn&#8217;t feel right. Conceptually, if we would have done it correctly the first time, then it wouldn&#8217;t have been needed. Or maybe we should have done it in place. I would say that&#8217;s absolutely fair, but doesn&#8217;t capture the reality of development of the last 6 years.</p>

<p>When I started writing this post, I just felt like mapping my existential crisis to Hamlet&#8217;s and now I&#8217;m heading towards defending myself against Joel&#8217;s famous <a href="http://www.joelonsoftware.com/articles/fog0000000069.html">post</a> stating the fact that you should never do a rewrite. I just went back and read it (again) and I (still) agree. It&#8217;s hard to argue with. Maybe it&#8217;s best to discuss the times we did rewrite to the times we didn&#8217;t.</p>

<!-- more -->


<h3>Refactor</h3>

<p>The <a href="/blog/2015/10/06/v2-retrospective/">V2 timeline</a> notes the rewrites and some of the major refactoring efforts that we&#8217;ve gone though. There were obviously many times that we did <em>not</em> rewrite the whole system. Ha.</p>

<p>A few of those projects:</p>

<ul>
<li>Switching out Delayed Job for Resque</li>
<li>Refactoring the ratings system</li>
<li>Extracting local services out into external ones</li>
<li>Allowing multiple Taskers on a Task (1 to N change)</li>
<li>Making it possible to have hourly rates.</li>
<li>Doing more things asynchronously using Resque Bus</li>
<li>Allowing users to &#8220;half sign up&#8221; for the site</li>
</ul>


<p>Most of these things were somewhere on the spectrum between features and major refactors, but all of them had some key components that might have been a trigger to consider a rewrite.</p>

<p>Usually, it&#8217;s when some underlying assumption is just no longer the case. For example, a task no longer has a single Tasker, but rather can have many. Or the <code>current_user</code> might only be partially &#8220;logged-in&#8221; to the site. Much of the code has to be touched to undo that assumption.</p>

<p>Or maybe it&#8217;s a data migration/timing issue. When switching background job processors, there is plenty of coordination to do. When changing the table(s) that data is stored in there is a double-write situation like in a completely new system. This is because they <em>are</em> new systems, just in the shell of the current one.</p>

<h3>Service-Oriented</h3>

<p>That architectures move towards being service-oriented seems to be common knowledge. We found that there are various <a href="/blog/2015/10/06/v2-retrospective/">pros and cons</a> with the approach. However, I would say that what we did was a type of rewrite.</p>

<p>It&#8217;s a more gradual and sustainable version, though, because it&#8217;s a continuum. Very gradually, we moved functionality to new apps that leveraged the original app&#8217;s APIs. The stuff inside that shell didn&#8217;t really change. It just got a new face and became the data provider.</p>

<p>It seems likely that something like this is the recommended path of handling a rewrite. First, you draw a line around the system that needs the overhaul. Then you encapsulate that system and expose an API. You write lots of tests on the API and have other things depend on it. Then you swap in the system. Ideally, you are <a href="http://onstartups.com/tabid/3339/bid/97052/How-To-Survive-a-Ground-Up-Rewrite-Without-Losing-Your-Sanity.aspx">double-writing</a> just like in the minor refactor so you can do it gradually and in parallel to see issues.</p>

<h3>Rewrite</h3>

<p>So what is the right time to make a completely new shell (app/repo)? I&#8217;ll agree that the correct answer could be &#8220;never.&#8221; However, the siren song of the full rewrite is strong.</p>

<p>The main thing to understand is that the goal was to test a new business model. We had experimented with many different ways to get tasks done and thought that we now knew the single, best way. The &#8220;single&#8221; is the important part there. As <a href="/blog/2015/10/06/v2-retrospective/">noted</a>, the current codebase had support for many iterations and combinations that were created in search of product-market fit. While it would have been technically possible to shoehorn the new model in as yet another variation, we were already overrun with combinations.</p>

<p>The second note is that this was to be a test in a new market. Specifically, we were going to launch this test in London. While Londoners do speak English, we really wanted to do full translation the right way on the whole site. It would have taken a really long time to do i18n right in the current app. It was just not build with that in mind. And the majority wouldn&#8217;t have been needed. To do it correctly would have also meant spreading the notion of &#8220;locale&#8221; through the entire ecosystem including the payment system, database, background workers, etc. Overall, it was much easier to start with the requirement of i18n than bolt it on.</p>

<p>The main locale changes could have taken place in the core app and most of the translation could have occurred in another SOA app that used the APIs just like our US app. The truth is that we had definitely grown weary of that whole pattern. The coupling would have been even stronger between the two systems. The core app took forever to boot up. The test suite took days on days. It was a new direction for the company that we thought was the future. We could leave the baggage behind and simplify.</p>

<p>We could launch this simplified experience and codebase in a new country and see if it worked. Specifically, it&#8217;s not the case that we were changing the airplane in flight. Because of the market segmentation, it was closer to a new startup. It would start with one person in London posting just like we did years ago in Boston instead of the whole load of our US app. This minimized the risk of technical glitches and being wrong about the business model substantially. I found it hard to argue with <code>rails new</code> in that reduced-risk environment.</p>

<h3>Merge</h3>

<p>When the new product did very well in London, the next step was to bring it to the US. It now went from being a new startup to having a merger with the old one. That&#8217;s the part of the scenario where things get tricky, of course. I&#8217;ll talk about the technical details of the migration some other time, but it actually went really smoothly. Because all the code was already running the London marketplace, there were no real technical issues either.</p>

<p>If there was a reason to do it all in the same ecosystem, it would have been the more human factor. It would have been easier/necessary to evolve towards the new product. This would have been a more gradual change for the people used to the way the site worked. It likely would have been a smoother transition, but also very painful behind the scenes. We would not have the clarity, simplicity, and improved power to innovate that we got from the rewrite.</p>

<p>A year and a half later, it&#8217;s pretty clear we made the right choice. The business is great and the tech stack is still pretty fresh and clean. At least it worked out better than it did for Hamlet and that&#8217;s all we can really hope for.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>To rewrite or not to rewrite?</wp:post_id>
            <wp:post_date>2015-10-26 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Building React Native Apps</title>
            <link>http://bleonard.github.io/blog/2015/10/18/building-react-native-apps/</link>
            <pubDate>2015-10-18 00:00:00 -0700</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2015/10/18/building-react-native-apps/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>We&#8217;ve been using and loving React Native as noted in my <a href="/blog/2015/09/21/react-native-example-app">previous post</a>. As we are working towards rolling out a fully-featured app, one thing that needed solved was how we should build the app for different environments. For example, how can we make (slightly different) development, staging, and production builds?</p>

<p>In a <a href="https://github.com/facebook/react-native/issues/2246">Github issue</a>, I ran into a few other people also wondering how to do this, so I&#8217;ve added a few ways to the <a href="https://github.com/taskrabbit/ReactNativeSampleApp">Example App</a> to show the approaches we are using.</p>

<p>The three approaches we are trying out are:</p>

<ul>
<li>Configurations</li>
<li>Compile Flags</li>
<li>Run Variables</li>
</ul>


<h2>Environments</h2>

<p>I had already added the <code>Environment</code> <a href="https://github.com/taskrabbit/ReactNativeSampleApp/blob/2cf43f3ce17f830ff17065d6b4d973ac85043b05/App/Models/Environment.js">model</a> and <code>EnvironmentStore</code> <a href="https://github.com/taskrabbit/ReactNativeSampleApp/blob/2cf43f3ce17f830ff17065d6b4d973ac85043b05/App/Stores/EnvironmentStore.js">store</a> to the project. However, I just added actual dynamic configurations to the XCode project and the <code>EnvironmentManager</code> <a href="https://github.com/taskrabbit/ReactNativeSampleApp/blob/2cf43f3ce17f830ff17065d6b4d973ac85043b05/ios/Sample/EnvironmentManager.m">code</a> is using that.</p>

<!-- more -->


<p>Here is the staging config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include "Pods/Target Support Files/Pods/Pods.staging.xcconfig"
</span><span class='line'>
</span><span class='line'>GCC_PREPROCESSOR_DEFINITIONS = $(inherited) kEnvironment="@\"staging\""</span></code></pre></td></tr></table></div></figure>


<p>That gets used by the <code>EnvironmentManager</code> to send that, along with other data, over to JS land.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">RCT_EXPORT_METHOD</span><span class="p">(</span><span class="nl">get:</span><span class="p">(</span><span class="n">RCTResponseSenderBlock</span><span class="p">)</span><span class="n">callback</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">locale</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSLocale</span> <span class="n">currentLocale</span><span class="p">]</span> <span class="n">localeIdentifier</span><span class="p">];</span>
</span><span class='line'>  <span class="n">locale</span> <span class="o">=</span> <span class="p">[</span><span class="n">locale</span> <span class="nl">stringByReplacingOccurrencesOfString:</span><span class="s">@&quot;_&quot;</span> <span class="nl">withString:</span><span class="s">@&quot;-&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSNumber</span> <span class="o">*</span> <span class="n">simulator</span> <span class="o">=</span> <span class="err">@</span><span class="n">NO</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span> <span class="n">version</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">infoDictionary</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="s">@&quot;CFBundleShortVersionString&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span> <span class="n">buildCode</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">objectForInfoDictionaryKey:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">kCFBundleVersionKey</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span> <span class="n">envName</span> <span class="o">=</span> <span class="n">kEnvironment</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">passed</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSProcessInfo</span> <span class="n">processInfo</span><span class="p">]</span> <span class="n">environment</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">override</span> <span class="o">=</span> <span class="p">[</span><span class="n">passed</span> <span class="nl">valueForKey:</span><span class="s">@&quot;SAMPLE_ENV&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">override</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">envName</span> <span class="o">=</span> <span class="n">override</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">#ifdef TEST_ENVIRONMENT</span>
</span><span class='line'>  <span class="n">envName</span> <span class="o">=</span> <span class="s">@&quot;test&quot;</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#ifdef STAGING_ENVIRONMENT</span>
</span><span class='line'>  <span class="n">envName</span> <span class="o">=</span> <span class="s">@&quot;staging&quot;</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">  </span>
</span><span class='line'><span class="cp">  </span>
</span><span class='line'><span class="cp">#if TARGET_IPHONE_SIMULATOR</span>
</span><span class='line'>  <span class="n">simulator</span> <span class="o">=</span> <span class="err">@</span><span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">callback</span><span class="p">(</span><span class="err">@</span><span class="p">[</span> <span class="err">@</span><span class="p">{</span>
</span><span class='line'>                <span class="s">@&quot;name&quot;</span><span class="o">:</span> <span class="n">envName</span><span class="p">,</span>
</span><span class='line'>                <span class="s">@&quot;buildCode&quot;</span><span class="o">:</span> <span class="n">buildCode</span><span class="p">,</span>
</span><span class='line'>                <span class="s">@&quot;simulator&quot;</span><span class="o">:</span> <span class="n">simulator</span><span class="p">,</span>
</span><span class='line'>                <span class="s">@&quot;version&quot;</span><span class="o">:</span> <span class="n">version</span><span class="p">,</span>
</span><span class='line'>                <span class="s">@&quot;locale&quot;</span><span class="o">:</span> <span class="n">locale</span>
</span><span class='line'>            <span class="p">}]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>By naming a scheme, that uses this config, we can launch the app knowing that its world is slightly different as determined by the <code>Environment</code> model. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Model</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getApiHost</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">switch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;test&#39;</span><span class="o">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="s1">&#39;http://localhost:3001&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;debug&#39;</span><span class="o">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="s1">&#39;http://localhost:3000&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;staging&#39;</span><span class="o">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="s1">&#39;https://someday.herokuapp.com&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="k">throw</span><span class="p">(</span><span class="s2">&quot;Unknown Environment.getApiHost: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>By the way, I also added some of the other information from Objective-C like the version, build code, locale, and whether we&#8217;re running in the simulator. We&#8217;ve found a use for all of those in our Javascript code.</p>

<h3>Configurations</h3>

<p>This new build is using the <code>kEnvironment</code> from our custom <code>xcconfig</code> files as seen above. So we can pass in the environment name via configuration.</p>

<p>XCode has these schemes that set up the configurations. The <a href="https://github.com/facebook/react-native/issues/2246">issue</a> I wrote up was lamenting the fact that all the of the child projects (like React Native) have the use the same name (&#8220;Debug&#8221; or &#8220;Release&#8221;) for it to work as expected. For example, I can&#8217;t really have a configuration called &#8220;Staging&#8221; that gets all the good stuff from the &#8220;Debug&#8221; configurations.</p>

<p>I&#8217;ve more or less just accepted this and moved on. Our &#8220;Staging&#8221; and &#8220;Production&#8221; configurations just end up using the default (&#8220;Release&#8221;) configurations from all the children. That&#8217;s working well enough. The the other two approaches are ways to mitigate this issue, though. So when I said I accepted it, I guess that&#8217;s not quite true.</p>

<p>As a side-note, I&#8217;ve now realized one piece of magic that <a href="https://cocoapods.org/">CocoaPods</a> has. It does all this stuff for you somehow and that&#8217;s probably why there is a different configuration that it makes for each of mine. Should React Native be on CocoaPods? I don&#8217;t know.</p>

<h3>Compile Flags</h3>

<p>But I want the &#8220;test&#8221; build to run in &#8220;Debug&#8221; mode. Or maybe I need to debug the &#8220;Staging&#8221; build on the phone. In these cases, I&#8217;ve shown how are are compiling the app via the command line. This allows us to define extra, non-configuration variables. Therefore, we can use the regular ones like &#8220;Debug.&#8221;</p>

<p>There is a new <code>Compiler</code> <a href="https://github.com/taskrabbit/ReactNativeSampleApp/blob/2cf43f3ce17f830ff17065d6b4d973ac85043b05/tasks/compiler.js">class</a> that pulls it all together. it basically uses <code>xcodebuild</code> to compile it and adds extra info like <code>TEST_ENVIRONMENT=1</code>, which the <code>EnvironmentManager</code> can then use to override the environment name.</p>

<p>It also uses the <code>ios-deploy</code> <a href="https://github.com/phonegap/ios-deploy">tool</a> to put it on the phone if you ask it to do so. Try this out: <code>npm run install:staging</code></p>

<h3>Run Variables</h3>

<p>When setting up schemes, I found that I could pass environment variables in the &#8220;Run&#8221; section of &#8220;Edit Scheme.&#8221; Then I&#8217;m using this to allow a &#8220;staging&#8221; name even though I&#8217;m in running the &#8220;Debug&#8221; configuration. This is then available as seen in the <code>[[NSProcessInfo processInfo] environment]</code> code above.</p>

<p>However, there is a fatal flaw. This is a run-time argument that is only used once. You lose that data if you launch the app again. It is, however, the best way that I&#8217;ve found to debug the &#8220;Staging&#8221; build in XCode.</p>

<h2>Auto-Compile</h2>

<p>So now there are lots of ways to launch and run this app, but I kept forgetting to bundle the new Javascript code when launching it from XCode onto the phone. There&#8217;s nothing worse than working on something and realizing 10 minutes later, the code on the phone is not the newest build.</p>

<p>The <code>Compiler</code> class does this automatically, but I looked for a way to automate the instructions in the <code>AppDelegate</code>. It wants you to run with localhost when in the simulator and run <code>react-native bundle --minify</code> when putting it on the phone.</p>

<p>So let&#8217;s automatically make those decisions based on the target runtime:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="cp">#if TARGET_IPHONE_SIMULATOR</span>
</span><span class='line'>  <span class="n">jsCodeLocation</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://localhost:8081/index.ios.bundle?platform=ios&quot;</span><span class="p">];</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="n">jsCodeLocation</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">URLForResource:</span><span class="s">@&quot;main&quot;</span> <span class="nl">withExtension:</span><span class="s">@&quot;jsbundle&quot;</span><span class="p">];</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>This automatically causes it to use the bundle when running on the phone, but we still need to remember to compile it. So I added a &#8220;Run Script&#8221; build phase to do the bundle command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;${PLATFORM_NAME}&quot;</span> !<span class="o">=</span> <span class="s2">&quot;iphonesimulator&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">source</span> ~/.nvm/nvm.sh
</span><span class='line'>    <span class="nb">cd</span> <span class="k">${</span><span class="nv">PROJECT_DIR</span><span class="k">}</span>/.. <span class="o">&amp;&amp;</span> react-native bundle --minify
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>This assumes that you are using <a href="https://github.com/creationix/nvm">nvm</a>.</p>

<p>Now it&#8217;s impossible to forget and everything is always based on the target. Nice.</p>

<h2>Summary</h2>

<p>I&#8217;ve updated the code of the <a href="https://github.com/taskrabbit/ReactNativeSampleApp">Example App</a> to have a few ways to build a React Native app with environment nuances. We&#8217;re mainly using the Configurations approach but the others have come in handy a few times. I hope that is helpful.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Building React Native Apps</wp:post_id>
            <wp:post_date>2015-10-18 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>V2 - Retrospective</title>
            <link>http://bleonard.github.io/blog/2015/10/06/v2-retrospective/</link>
            <pubDate>2015-10-06 00:00:00 -0700</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2015/10/06/v2-retrospective/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>TaskRabbit began as <a href="http://www.boston.com/business/technology/articles/2009/07/05/web_start_up_takes_entrepreneurs_idea_and_runs_with_it/">RunMyErrand</a> in 2008 when Leah had the <a href="http://techli.com/2011/09/taskrabbit-interview-leah-busque/">idea</a> and coded up the first version of the site. In 2009, I had the opportunity to help out in little ways like adding Facebook Connect support just after it launched and Leah got into <a href="http://techcrunch.com/2009/05/28/facebook-names-first-class-of-fbfund-rev-its-new-incubator/">Facebook Fund</a>. From there, she raised a <a href="http://www.xconomy.com/boston/2009/10/30/runmyerrand-picks-up-1-million-from-west-coast-venture-firms/">seed round</a> and I came on full-time.</p>

<p>For a few weeks after starting, I worked on the RunMyErrand codebase, adding features and fixing bugs. Quickly, though, a few things became clear. First, we were probably going to change our name. RunMyErrand made people think only about laundry. Second, the changes we wanted to make drastic and hard to make with confidence in a codebase with no tests. I was hoping to work and live with this code for several years and we did not have the foundation that would make that a productive and enjoyable experience.</p>

<p>So around Christmas 2009, I started a new Rails project. It was still called <code>runmyerrand</code> because we still didn&#8217;t have a new name. For a while at the end we called it <code>core</code> because it was at the center of a large service-oriented architecture. Today, we call it <code>V2</code> because it has now itself been replaced.</p>

<p>It&#8217;s been a year and half. It&#8217;s never too late for a retrospective.</p>

<h2>Launch</h2>

<p>The original site was my first Rails project to work on and V2 was my first one from scratch. Rails 3 wasn&#8217;t yet released so I was nervous to get on that bleeding edge because most of the gems didn&#8217;t work quite yet. I had been immersing myself in Ruby news. In particular, I&#8217;d been listening to <a href="http://ruby5.envylabs.com/">Ruby5</a> and others podcasts and been taking notes about gems/tools that seemed relevant. In hindsight and with experience, it was a problem to rely on gems for fairly simple things, but at the time they seemed sent from heaven to solve my problems.</p>

<p>I started over Christmas at the very beginning.</p>

<div class="jumbotron">
  <image src="http://bleonard.github.io/images/posts/v2-retrospective/tracker2009.png" alternate="Tracker 2009" class="bigPicture" />
</div>


<p>The site was black and white with a simple layout. At some point in January, Leah saw what I was working on. I, of course, discussed with her the notion of rebuilding the site, but I don&#8217;t think the ramifications quite came across until she saw the starkness of that layout. It was probably a huge leap of faith for her at that moment to have the trust in me that she did.</p>

<p>I worked on both sites through January and February, eventually getting to 100% on new stuff. For the most part, I was building a feature-complete version of RunMyErrand with TBD branding and stronger Rails conventions like <a href="http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model">skinny controllers</a> and tests. There were some new features and many minor upgrades from the learnings we&#8217;d had.</p>

<p>By the end of April, it was about ready to go. We had <a href="http://blog.taskrabbit.com/2010/04/08/runmyerrand-is-now-taskrabbit/">picked a name</a>, gotten help from <a href="http://www.mikekivikoski.com/">designers</a> and <a href="https://twitter.com/dpickett">Dan</a>, a great contractor to pull it over the finish line. In one hour on <a href="http://bostinno.streetwise.co/2010/04/13/runmyerrand-relaunches-with-new-name/">April 5th</a>, we launched the new code and rebranded the company.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Name                 | Lines |   LOC | Classes | Methods | M/C | LOC/M |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Controllers          |  1848 |  1483 |      32 |     174 |   5 |     6 |
</span><span class='line'>| Helpers              |  2257 |  1892 |      45 |     245 |   5 |     5 |
</span><span class='line'>| Jobs                 |   399 |   295 |      11 |      33 |   3 |     6 |
</span><span class='line'>| Models               |  4584 |  3509 |      61 |     526 |   8 |     4 |
</span><span class='line'>| Observers            |    42 |    22 |       2 |       5 |   2 |     2 |
</span><span class='line'>| Libraries            |  2987 |  2272 |      30 |     287 |   9 |     5 |
</span><span class='line'>| Configuration        |  1233 |   669 |       4 |      17 |   4 |    37 |
</span><span class='line'>| Spec Support         |  1416 |  1152 |       4 |      30 |   7 |    36 |
</span><span class='line'>| Integration Tests    |    91 |    73 |       0 |       1 |   0 |    71 |
</span><span class='line'>| Lib Tests            |   101 |    83 |       0 |       1 |   0 |    81 |
</span><span class='line'>| Model Tests          |  3397 |  2522 |       0 |      18 |   0 |   138 |
</span><span class='line'>| Cucumber Support     |   739 |   521 |       0 |       1 |   0 |   519 |
</span><span class='line'>| Cucumber Features    |  2711 |  2487 |      29 |     145 |   5 |    15 |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Total                | 21805 | 16980 |     218 |    1483 |   6 |     9 |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>  Code LOC: 10142     Test LOC: 6838     Code to Test Ratio: 1:0.7
</span></code></pre></td></tr></table></div></figure>


<h2>Iteration</h2>

<p>In the three or so years that followed, we <a href="http://www.bizjournals.com/boston/blog/mass-high-tech/2010/03/web-startup-runmyerrand-to-move-execs-west.html?page=all">moved to San Francisco</a>, worked at <a href="http://fourhourworkweek.com/2011/06/07/whats-your-start-up-bus-count-7-myths-of-entrepreneurship-and-programming/">Pivotal Labs</a> a bit, grew the team, <a href="http://techcrunch.com/2011/07/28/taskrabbit-drops-its-amazing-iphone-app/">launched a mobile app</a>, and kept building things in the codebase. It held up fairly well. The test suite gave us the confidence that we weren&#8217;t breaking anything and we forged ahead. What follows are some of the quirks and learnings from that time.</p>

<h3>Timeline Events</h3>

<p>One of the major new changes in the TaskRabbit site was the idea of the timeline. Facebook&#8217;s news feed was sort of a new thing and lots of people were showing activity in that way. We also wanted to show people that things were actually being done on the site. I used and adapted version of <a href="https://github.com/jamesgolick/timeline_fu">timeline_fu</a> to record all of these events.</p>

<p>Fairly soon, everything revolved around this concept. It was just me making a fairly full-featured site so I made it very easy to show lists of objects or timeline events that pointed to objects. There were various helper functions and something like <a href="http://robertomurray.co.uk/blog/2014/decorators-presenters-delegators-rails/">presenters</a> before I knew to call it that. These facilitated handling rendering of <a href="http://railscasts.com/episodes/154-polymorphic-association">polymorphic</a> lists in a seamless way.</p>

<p>I was (am) also a fan of modeling everything strictly as a state machine. The site used <a href="https://github.com/aasm/aasm">aasm</a> with several additions. One of them came out of the understanding that the most interesting times in the system were when state changed. One of the additions was to automatically create a timeline event on that transition. It would be hard to count the number of times over those 4 years that I was glad we did that. It&#8217;s a lot. It is useful because it provides a history of the lifecycle of every object in the system.</p>

<p>The next thing I noticed was that these were the same times that we wanted to send notifications like email or SMS. Because of that, as the timeline event was being saved, it checked if there were messages to send to the people associated and queued up workers to do that. The result of this was more or less magic when, for example, a Task was assigned. The <code>task_assigned</code> timeline event would be saved, it would show up on the global timeline and the one for that city as well as the one for that task, and two mails and/or push notifications would be sent. If you wanted to send a new mail that had nothing to do with state changes (5%), then you&#8217;d make a timeline event. This turned out to be a great record as well to note things that were happening.</p>

<p>Eventually, as the ecosystem grew to disparate systems, we also added publishing to <a href="https://github.com/taskrabbit/resque-bus">Resque Bus</a> to the list so those systems could subscribe to be notified of the changes as they occurred. Overall, this is great pattern. Being event-driven is very effective in a lot of cases and is the reason V3 still uses Resque Bus for all the reasons I talked about in <a href="/blog/2013/09/28/resque-bus/">that article</a>. Having strong patterns like this is also important. Once you understand the pattern and have the mental model, you can easily grasp most concepts in the system.</p>

<p>However, few things easily stand the test of time and evolving requirements. It seems possible that the stronger the pattern, the less likely it will hold up because it made some assumptions about the older world. As more and more features and nuance we added to the system, those helpers got crazier and crazier with <code>if</code> or <code>case</code> statements about exactly what kind of task we were trying to show (for example). Also, not every event should be public, different people should see different events, or the same same events but with different content. This, along with the polymorphic nature to begin with, really hurt performance because we couldn&#8217;t cache it very well. Over time, we relied less and less on the actual display of timeline. Each list became more custom for the case at hand. That was probably a good thing, but it was a good crutch at the beginning.</p>

<p>The events themselves were still there, of course. Which was good. There were a lot of them though and the list was growing exponentially. In V3, we have the same concept, but it subscribes to the Resque Bus instead doing the publishing and stores them in <a href="http://www.elasticsearch.org/">Elastic Search</a> instead of <a href="http://www.mysql.com/">MySQL</a>.</p>

<h3>API</h3>

<p>A similar type of tradeoff was made when developing the API. That is, we made choices that made it very easy to handle requests and respond with JSON, but it had nuances and performance implications that ultimately led to us abandoning the approach.</p>

<p>The system had several primary objects like Task, User, Location, and Offer. Any given call had a response of some combination of these objects and their relationships. A User had posted Tasks or was doing Tasks. Tasks had Locations and Offers. And so on. At the time, it seemed fairly obvious to have a standard JSON representation of these things and piece them together.</p>

<p>The standard at the time was to use the <code>to_json</code> (or maybe <code>as_json</code>) method on the object, but I found that to be quite messy. It did not elevate the API to a first class citizen or allow much flexibility. So I made a presenter object sort of thing for each that produced a <code>Hash</code> to output as JSON. For example there was a <code>UserHash</code> class that was instantiated with a User object. Calling <code>to_h</code> on it would output what should be in the JSON. It was used something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="vi">@hash</span> <span class="o">=</span> <span class="no">Api</span><span class="o">::</span><span class="no">V1</span><span class="o">::</span><span class="no">UserHash</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="vi">@user</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="n">render</span> <span class="n">json</span><span class="p">:</span> <span class="vi">@hash</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This seemed much better than <code>to_json</code> and it was. Whatever logic that needed to determine what to show could go in these objects and patterns could be shared between them all. They could also be reused. For example, the <code>TaskHash</code> had two user involved and could just use the <code>UserHash</code> to show more info about them. It was very DRY. And it worked.</p>

<p>I think the primary mistake was still being somewhat in the mindset of the <code>to_json</code> pattern. That is, that every object type had a single JSON representation. That is just not the case. The information that is needed about a User is different when it is a child of a Task and not a specific fetch of the User. Thinking about that after the fact, you end up with all these little nuances about what to display from the presenter.</p>

<p>Even that wasn&#8217;t totally crazy. If I was on that path again, I&#8217;d probably just have a <code>SimpleUserHash</code> or something like that instead of passing <code>{simple: true}</code> to the regular <code>UserHash</code>. The main issue was that, because of this single representation notion, I made it really easy to nest these objects and provide that full presentation. The goal should have been providing explicitly what was needed by the consumer.</p>

<p>Because of the completeness, performance really suffered. The requests themselves were slow for two reasons. The first was all the various SQL fetches and string rendering to just make it happen. The hidden issue was around garbage collection. Because of all these objects being created, which created hashes, which got rendered to strings, the number of Ruby Objects created in each request was massive. This led to frequent garbage collection, which led to wildly varying (and often very high) request times.</p>

<p>Our V3 API is much more use case driven and uses <a href="https://github.com/rails/jbuilder">jbuilder</a> to render the JSON. By focusing on what the clients actually need, we minimize the data needed and request time. Jbuilder templates are much easier to understand and focused. We have noticed that jbuilder is the slowest part of that request, so maybe there will be changes there too. Interestingly, the most recent option we&#8217;ve been trying is <a href="https://github.com/rails-api/active_model_serializers">serializers</a>. It seems a lot like the earlier approach by using these presenter objects. Maybe there&#8217;s just a trick in there that we missed.</p>

<h3>Feature Set</h3>

<p>TaskRabbit is a simple idea that is difficult to execute. There are lots of people and factors involved. Also, there are lots of different product choices that could be made about how the work gets done. If you&#8217;ve heard of TaskRabbit and had an idea about how it could work, we&#8217;ve probably talked about it and/or tried it.</p>

<p>I&#8217;ve learned that combinatorics can be the death of a product.</p>

<p>There was a great <a href="http://firstround.com/article/the-one-cost-engineers-and-product-managers-dont-consider">article</a> that spoke to this a while ago. It was about the hidden cost of adding features because of their maintenance and cognitive overhead. The more options we add into our product, the more paths there are through the code and experience flowchart. This slows down all future development. Even the 2010 launch of TaskRabbit had these branches. The primary one was the choice when you posted your task for it be auto-assigned or receive offers. Over the years, the options expanded in pricing (named by client, fixed, market bid), pricing units (project, hourly), number of taskers (single, team, multiple asynchronously), type of assignment (direct hire, immediate, consideration, bid, from a favorites list), recurring (yes, no). These along with different categories and A/B tests combinatorially to thousands of types of tasks.</p>

<p>Many of these options affected any given task at any given point in it&#8217;s lifecycle. That caused much time in design/development to consider these cases. Or it led to bugs when they were not considered. At the very least, it led to many tests for the interplay between the options. Projected out a few more options, something major had to change to get this under control or progress would grind to a halt.</p>

<h3>God Models</h3>

<p>In a system trying to follow the conventional &#8220;fat model, skinny controllers&#8221; paradigm, all of these options made the models morbidly obese. In particular, the Task and User models were huge.</p>

<p>We did our best to keep it clean, mostly by putting functionality related to the above characteristics into their own modules. This did a reasonably good job of keeping related functionality together and you could even test it in isolation. However, it was still hard to reason about the whole system.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Task</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Rabbit</span><span class="o">::</span><span class="no">HasMoney</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Rabbit</span><span class="o">::</span><span class="no">HasVehicles</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Rabbit</span><span class="o">::</span><span class="no">StateTransition</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Rabbit</span><span class="o">::</span><span class="no">WithGeography</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Rabbit</span><span class="o">::</span><span class="no">Cached</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Task</span><span class="o">::</span><span class="no">Properties</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Task</span><span class="o">::</span><span class="no">MultiLocation</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Task</span><span class="o">::</span><span class="no">TaskProgress</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Task</span><span class="o">::</span><span class="no">WithPromotion</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Task</span><span class="o">::</span><span class="no">Recurring</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Task</span><span class="o">::</span><span class="no">Multi</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Task</span><span class="o">::</span><span class="no">Runners</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Task</span><span class="o">::</span><span class="no">Times</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Task</span><span class="o">::</span><span class="no">Counting</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Task</span><span class="o">::</span><span class="no">Pricing</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Task</span><span class="o">::</span><span class="no">Timing</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Task</span><span class="o">::</span><span class="no">PriceComponents</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Task</span><span class="o">::</span><span class="no">Hourly</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Task</span><span class="o">::</span><span class="no">HasLocations</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Task</span><span class="o">::</span><span class="no">HasTaskType</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Task</span><span class="o">::</span><span class="no">HasStore</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># and on and on...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It became doubly-complicated when each of these modules added their own callbacks. ActiveRecord callbacks are a powerful thing but we&#8217;ve found that they can easily get out of control. Based on our current thinking, they were already being used for too many things such as enqueuing background workers. When you add in all of these different modules injecting their own behavior in the middle of the save process, it became very difficult to track down where things happened.</p>

<p>That being said, it almost always worked quite well. Once someone understood the system, it did become fairly clear and it was very well tested. The real issue was in making fast progress and introducing new team members to the beast we had created.</p>

<h3>Gem Usage</h3>

<p>V2 was my first Rails project and I was (and continue to be) amazed by the Ruby community. Everything that I wanted to do had already been done, more or less, before. I now realize that will probably always be the case. There are only so many patterns out there and building just about any app is probably about putting them together for a specific purpose. The amazing thing (and the trap) of the Ruby community is that there is already a <a href="http://rubygems.org/">gem</a> or ten available for each of those patterns.</p>

<div class="jumbotron">
  <image src="http://bleonard.github.io/images/posts/v2-retrospective/trap.jpg" alternate="It's a trap!" class="bigPicture" />
</div>


<p>I used (and continue to use) lots of gems. However, in retrospect, I was a bit too enthralled with leveraging work that already been done. There probably are really perfect use cases out there that truly cut across all apps. Building blocks like <a href="https://github.com/intridea/omniauth">authentication</a>, <a href="https://github.com/resque/resque">background processing</a>, <a href="https://github.com/lostisland/faraday">http libraries</a>, <a href="https://github.com/mperham/dalli">and</a> <a href="https://github.com/elasticsearch/elasticsearch-ruby">other</a> <a href="https://github.com/redis/redis-rb">data</a> or <a href="https://github.com/twilio/twilio-ruby">external</a> gems seem like obvious candidates. But things start getting weird when you depend on gems for your core functionality.</p>

<p>At the time, <code>acts_as_x</code> gems where very popular. This pattern was (usually) about factoring out common model behaviors into gems. Instead of building a commenting system for example, you would include <code>acts_as_commentor</code> gem and call specific methods on the <code>User</code> and the <code>Comment</code> models. This has more or less fallen out of favor as far as I can tell. I think it&#8217;s because it&#8217;s important for the app itself to own its business logic. In any given case, the value added by the gem will likely be negated that first time you need to customize the behavior to provide more value in your specific app. As a rule of thumb, I am very skeptical of any gem that includes it&#8217;s own migrations.</p>

<p>The main mistake that comes to mind was using a <a href="https://github.com/edgarjs/ajaxful-rating">gem</a> to handle our ratings system. There were <a href="https://www.ruby-toolbox.com/categories/rails_ratings">many</a> options available, but what I didn&#8217;t consider is that it&#8217;s just not that complicated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Task</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">ajaxful_rateable</span> <span class="ss">:stars</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">,</span> <span class="ss">:dimensions</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:poster</span><span class="p">,</span> <span class="ss">:tasker</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">ajaxful_rater</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the end, this just created more technical debt. We ended up switching to our own after a while just so we could have a better handle on performance and customize the behaviors a bit.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Task</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:rates</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:runner_rates</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Rate&quot;</span><span class="p">,</span> <span class="ss">:conditions</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:dimension</span> <span class="o">=&gt;</span> <span class="s2">&quot;runner&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:poster_rates</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Rate&quot;</span><span class="p">,</span> <span class="ss">:conditions</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:dimension</span> <span class="o">=&gt;</span> <span class="s2">&quot;poster&quot;</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Rate</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:task</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:ratee</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;User&quot;</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:rater</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;User&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:poster_rates</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;Rate&#39;</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="ss">:ratee_id</span><span class="p">,</span> <span class="ss">:conditions</span> <span class="o">=&gt;</span> <span class="s2">&quot;rates.dimension = &#39;poster&#39;&quot;</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:rabbit_rates</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;Rate&#39;</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="ss">:ratee_id</span><span class="p">,</span> <span class="ss">:conditions</span> <span class="o">=&gt;</span> <span class="s2">&quot;rates.dimension = &#39;rabbit&#39;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using lots of gems also made upgrading Rails more difficult and well as dependency management. We ended up creating our own gem server just to handle the minor changes that we made to gems for these reasons. In the upgrade case, maybe there was something deprecated or just not working in the next version of Rails. In the management case, it was usually a stricter dependency on something very common, like only allowing a specific version of <a href="https://github.com/intridea/multi_json">multi_json</a> that we had to loosen up.</p>

<h3>Tests</h3>

<p>Part of the reason of starting over to create V2 was to bake in really good test coverage. On launch, it had model, controller, and request <a href="http://rspec.info/">rspec</a> tests as well as <a href="http://cukes.info/">Cucumber</a> integration tests. Cucumber was the new hotness at the time and I remember going to a workshop in Boston extolling it&#8217;s many virtues.</p>

<p>I never kidded myself into thinking that some &#8220;business owner&#8221; would write the features for me and it would add massive value in that way. Obviously, the syntax was just too specific with all the regular expressions and such. But what I did like was that it was as close to the user experience as possible, which is the ultimate point of the system. Those tests gave me the confidence to know everything was working well.</p>

<p>Over the years, the whole suite (and especially the Cucumber tests) took longer and longer. Some improvements over time included:</p>

<ul>
<li><a href="https://github.com/vcr/vcr">vcr</a> to remove all external dependencies</li>
<li><a href="https://github.com/rdy/fixture_builder">fixture_builder</a> to prevent having to fully use <a href="https://github.com/thoughtbot/factory_girl">factory_girl</a> to create basic objects each test</li>
<li><a href="https://github.com/grosser/parallel_tests">parallel_tests</a> on a beefy local jenkins box to be able to run 8 threads at once</li>
<li>porting Cucumber tests over to <a href="https://github.com/jnicklas/capybara">Capybara</a></li>
<li><a href="https://www.tddium.com/">tddium</a> on its remote servers to be able to run 15 threads at once and have multiple builds going in parallel</li>
</ul>


<p>Each of the tactics showing major gains. The most laborious was porting the Cucumber tests over to Capybara. At some point, we got tired of the interpretation layer between the &#8220;test&#8221; and the code and started writing new tests in rspec/capybara. It was just more straightforward. It also seemed better at handling the Javascript on the page. Eventually, we bit the bullet and ported over the Cukes to new rspec files. This gave about a 2x improvement in running time and simplified the testing stack as well.</p>

<p>At the end of it&#8217;s life, the suite on tddium was running in 50 minutes. That was on 15 threads, so the actual running time was probably more like 12 hours. Obviously that is absurd. Making major improvements at that point would have been very difficult. It would have been about finding the slowest tests and making sure we really needed it or rewriting it. There was probably a lot of double coverage. We could have used more stubbing, but I tend to be fairly skeptical of that. It has often turned out to be quite implementation dependent and more brittle.</p>

<p>At launch, the V3 test suite was running 2 minutes on tddium. As such things happen, it&#8217;s now at 10. Will we ever learn? I&#8217;ve seen a huge organization-wide boost with the difference between a 15 (not to mention 50) minute build and a 2 minute build. In the longer case, you tend to break the flow and work on something else to stay productive (or go play ping pong). At 2 minutes, the flow seems to continue. I obviously wish it was just a few seconds locally, but we haven&#8217;t been able to hit those times and get the coverage we are looking for.</p>

<h3>Delayed Job</h3>

<p>Another major change during this time was switching from <a href="https://github.com/collectiveidea/delayed_job">Delayed Job</a> to <a href="https://github.com/resque/resque">Resque</a>. We had started to see our MySQL server resources being used up from all the Delayed Job queries and sometimes emails would send multiple times. We never could quite figure out how it was misconfigured. By that time, though, Resque was a very popular solution with plenty of helpful plugins that added value to the system.</p>

<p>In particular, I am a big fan of the the locking mechanisms that we can use in Resque because of Redis. We used various plugins to make sure there was only one job of a certain type in the queue, or that only one was running at the a time for a certain set of inputs. That kind of thing.</p>

<p>Another issue we had in both system was about class existence and method signatures. Delayed Job had a <code>struct</code> with certain inputs and Resque had a <code>perform</code> method. When queueing up a job, you would send the inputs to those spots. The gotcha in that is around what to do when changes occur. For example, when adding a new input to the job, you have to remember that there may be jobs queued with one less input and handle that gracefully. Also, when you no longer need a worker, you can&#8217;t just delete it because there may still be some in the queue that will try to initialize it. In both systems and both cases, we found that the whole thread would go down and not work any more jobs. Bad news.</p>

<p>Towards the end of V2 and now in V3, we mix(ed) in a module into our workers that standardizes these benefits and issues. Instead of using several plugins, it makes it really easy to do the locking stuff from the <a href="http://redis.io/commands/setnx">examples</a> as well as scheduling. It also makes it so that we enqueue the workers with a hash instead of a list of arguments. This has made minor signature changes much easier.</p>

<h3>A/B Testing</h3>

<p>At the top of every agile playbook is the A/B test. V2 had a system in place that worked fairly well. It would bucket new users into 100 groups. At at any given time, a group be assigned into a single test (or control). A set of the groups were also always in the control for a pure baseline. When you wanted to run a test (say &#8220;blue_botton&#8221;), you would reserve the number of groups that got you the percentage that you needed. In the Ruby or Javascript code, you could then see if that user was in the &#8220;blue_button&#8221; group.</p>

<p>This worked out fairly well, especially for the simple A/B cases like showing a blue button instead of a orange one. Marketplace dynamics proved very difficult though when the test was something much bigger. This was especially true if the test produced a new variant of task as that drastically effected both the client and the tasker and goal was to see the overall effectiveness through to completion.</p>

<p>In that case, the task itself was marked as being inside the test, not just the user and now the tasker had to do something differently as well. Maybe they were bidding hourly instead of by project. At the point, you have to decide if the test is still valid if one side of the marketplace gets both the A and the B. There are cases where that would make the test invalid. So then, it&#8217;s really more about lining up the clients in the A group with the taskers in the A group and the same with the B group (with no cross-over). Then the marketplace is much less efficient so there is a high cost to that test and my mind is a little too blown to be sure of what&#8217;s happening in the first place. The really troublesome part of these kinds of tests that affect the task dynamics is that it&#8217;s really hard to end that test. Most of the code for all those tests stayed in V2 permanently (or at least a very long time) because some of the tasks posted under some test lingered in the marketplace or became weekly tasks, or whatever.</p>

<p>All of this led to a much higher bar for doing really important tests than I would have liked to do. And when we did do them, they were often less clear that I had hoped. I&#8217;m sure there are techniques that make this kind of thing easier, but I don&#8217;t think we&#8217;ve quite found them yet.</p>

<h3>Summary</h3>

<p>This post has trended towards saying things that were wrong with the code or approach, but that is mostly just me trying to capture the learnings that we had. Overall, the code was working well. Strong patterns were put in place and followed. Once learned, it was easy to add new features and things were where you expected them to be.</p>

<p>There was the one codebase that some, including us, would have called a <a href="http://en.wikipedia.org/wiki/Monolithic_application">monolith</a>. I&#8217;d say this era lasted until about the end of September 2012. That&#8217;s when we started building out new apps.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">+----------------------+-------+-------+---------+---------+-----+-------+</span>
</span><span class='line'><span class="o">|</span> <span class="no">Name</span>                 <span class="o">|</span> <span class="no">Lines</span> <span class="o">|</span>   <span class="no">LOC</span> <span class="o">|</span> <span class="no">Classes</span> <span class="o">|</span> <span class="no">Methods</span> <span class="o">|</span> <span class="n">M</span><span class="o">/</span><span class="n">C</span> <span class="o">|</span> <span class="no">LOC</span><span class="o">/</span><span class="n">M</span> <span class="o">|</span>
</span><span class='line'><span class="o">+----------------------+-------+-------+---------+---------+-----+-------+</span>
</span><span class='line'><span class="o">|</span> <span class="no">Awards</span>               <span class="o">|</span>   <span class="mi">470</span> <span class="o">|</span>   <span class="mi">354</span> <span class="o">|</span>      <span class="mi">18</span> <span class="o">|</span>      <span class="mi">57</span> <span class="o">|</span>   <span class="mi">3</span> <span class="o">|</span>     <span class="mi">4</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Commands</span>             <span class="o">|</span>   <span class="mi">220</span> <span class="o">|</span>   <span class="mi">149</span> <span class="o">|</span>       <span class="mi">3</span> <span class="o">|</span>      <span class="mi">28</span> <span class="o">|</span>   <span class="mi">9</span> <span class="o">|</span>     <span class="mi">3</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Controllers</span>          <span class="o">|</span>  <span class="mi">9732</span> <span class="o">|</span>  <span class="mi">7826</span> <span class="o">|</span>     <span class="mi">123</span> <span class="o">|</span>     <span class="mi">880</span> <span class="o">|</span>   <span class="mi">7</span> <span class="o">|</span>     <span class="mi">6</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Filters</span>              <span class="o">|</span>  <span class="mi">1556</span> <span class="o">|</span>  <span class="mi">1276</span> <span class="o">|</span>      <span class="mi">10</span> <span class="o">|</span>     <span class="mi">137</span> <span class="o">|</span>  <span class="mi">13</span> <span class="o">|</span>     <span class="mi">7</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Helpers</span>              <span class="o">|</span>  <span class="mi">9359</span> <span class="o">|</span>  <span class="mi">7830</span> <span class="o">|</span>     <span class="mi">105</span> <span class="o">|</span>     <span class="mi">978</span> <span class="o">|</span>   <span class="mi">9</span> <span class="o">|</span>     <span class="mi">6</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Jobs</span>                 <span class="o">|</span>  <span class="mi">1936</span> <span class="o">|</span>  <span class="mi">1523</span> <span class="o">|</span>      <span class="mi">75</span> <span class="o">|</span>     <span class="mi">219</span> <span class="o">|</span>   <span class="mi">2</span> <span class="o">|</span>     <span class="mi">4</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Mailers</span>              <span class="o">|</span>  <span class="mi">1059</span> <span class="o">|</span>   <span class="mi">844</span> <span class="o">|</span>       <span class="mi">8</span> <span class="o">|</span>     <span class="mi">118</span> <span class="o">|</span>  <span class="mi">14</span> <span class="o">|</span>     <span class="mi">5</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Models</span>               <span class="o">|</span> <span class="mi">26014</span> <span class="o">|</span> <span class="mi">20161</span> <span class="o">|</span>     <span class="mi">243</span> <span class="o">|</span>    <span class="mi">2771</span> <span class="o">|</span>  <span class="mi">11</span> <span class="o">|</span>     <span class="mi">5</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Observers</span>            <span class="o">|</span>    <span class="mi">95</span> <span class="o">|</span>    <span class="mi">74</span> <span class="o">|</span>       <span class="mi">4</span> <span class="o">|</span>       <span class="mi">9</span> <span class="o">|</span>   <span class="mi">2</span> <span class="o">|</span>     <span class="mi">6</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Syncs</span>                <span class="o">|</span>   <span class="mi">369</span> <span class="o">|</span>   <span class="mi">308</span> <span class="o">|</span>       <span class="mi">9</span> <span class="o">|</span>      <span class="mi">35</span> <span class="o">|</span>   <span class="mi">3</span> <span class="o">|</span>     <span class="mi">6</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Validators</span>           <span class="o">|</span>    <span class="mi">47</span> <span class="o">|</span>    <span class="mi">42</span> <span class="o">|</span>       <span class="mi">1</span> <span class="o">|</span>       <span class="mi">4</span> <span class="o">|</span>   <span class="mi">4</span> <span class="o">|</span>     <span class="mi">8</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Webhooks</span>             <span class="o">|</span>    <span class="mi">47</span> <span class="o">|</span>    <span class="mi">33</span> <span class="o">|</span>       <span class="mi">2</span> <span class="o">|</span>       <span class="mi">6</span> <span class="o">|</span>   <span class="mi">3</span> <span class="o">|</span>     <span class="mi">3</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Libraries</span>            <span class="o">|</span>  <span class="mi">8006</span> <span class="o">|</span>  <span class="mi">6511</span> <span class="o">|</span>     <span class="mi">170</span> <span class="o">|</span>     <span class="mi">786</span> <span class="o">|</span>   <span class="mi">4</span> <span class="o">|</span>     <span class="mi">6</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Configuration</span>        <span class="o">|</span>  <span class="mi">5100</span> <span class="o">|</span>  <span class="mi">3676</span> <span class="o">|</span>      <span class="mi">20</span> <span class="o">|</span>      <span class="mi">96</span> <span class="o">|</span>   <span class="mi">4</span> <span class="o">|</span>    <span class="mi">36</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Spec</span> <span class="no">Support</span>         <span class="o">|</span>  <span class="mi">4531</span> <span class="o">|</span>  <span class="mi">3477</span> <span class="o">|</span>      <span class="mi">18</span> <span class="o">|</span>     <span class="mi">147</span> <span class="o">|</span>   <span class="mi">8</span> <span class="o">|</span>    <span class="mi">21</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Other</span> <span class="no">Tests</span>          <span class="o">|</span> <span class="mi">28476</span> <span class="o">|</span> <span class="mi">18543</span> <span class="o">|</span>       <span class="mi">1</span> <span class="o">|</span>     <span class="mi">168</span> <span class="o">|</span> <span class="mi">168</span> <span class="o">|</span>   <span class="mi">108</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Award</span> <span class="no">Tests</span>          <span class="o">|</span>   <span class="mi">561</span> <span class="o">|</span>   <span class="mi">461</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Command</span> <span class="no">Tests</span>        <span class="o">|</span>   <span class="mi">306</span> <span class="o">|</span>   <span class="mi">218</span> <span class="o">|</span>       <span class="mi">2</span> <span class="o">|</span>       <span class="mi">4</span> <span class="o">|</span>   <span class="mi">2</span> <span class="o">|</span>    <span class="mi">52</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Controller</span> <span class="no">Tests</span>     <span class="o">|</span> <span class="mi">11246</span> <span class="o">|</span>  <span class="mi">9144</span> <span class="o">|</span>      <span class="mi">10</span> <span class="o">|</span>      <span class="mi">91</span> <span class="o">|</span>   <span class="mi">9</span> <span class="o">|</span>    <span class="mi">98</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Helper</span> <span class="no">Tests</span>         <span class="o">|</span>   <span class="mi">645</span> <span class="o">|</span>   <span class="mi">526</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">2</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>   <span class="mi">261</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Integration</span> <span class="no">Tests</span>    <span class="o">|</span>    <span class="mi">55</span> <span class="o">|</span>    <span class="mi">35</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">1</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>    <span class="mi">33</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Job</span> <span class="no">Tests</span>            <span class="o">|</span>  <span class="mi">3310</span> <span class="o">|</span>  <span class="mi">2563</span> <span class="o">|</span>       <span class="mi">4</span> <span class="o">|</span>      <span class="mi">14</span> <span class="o">|</span>   <span class="mi">3</span> <span class="o">|</span>   <span class="mi">181</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Lib</span> <span class="no">Tests</span>            <span class="o">|</span>  <span class="mi">8809</span> <span class="o">|</span>  <span class="mi">7126</span> <span class="o">|</span>      <span class="mi">20</span> <span class="o">|</span>      <span class="mi">29</span> <span class="o">|</span>   <span class="mi">1</span> <span class="o">|</span>   <span class="mi">243</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Model</span> <span class="no">Tests</span>          <span class="o">|</span> <span class="mi">28178</span> <span class="o">|</span> <span class="mi">22837</span> <span class="o">|</span>      <span class="mi">12</span> <span class="o">|</span>      <span class="mi">42</span> <span class="o">|</span>   <span class="mi">3</span> <span class="o">|</span>   <span class="mi">541</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Request</span> <span class="no">Tests</span>        <span class="o">|</span>  <span class="mi">1098</span> <span class="o">|</span>   <span class="mi">865</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">6</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>   <span class="mi">142</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Routing</span> <span class="no">Tests</span>        <span class="o">|</span>   <span class="mi">297</span> <span class="o">|</span>   <span class="mi">233</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">3</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>    <span class="mi">75</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Sync</span> <span class="no">Tests</span>           <span class="o">|</span>   <span class="mi">382</span> <span class="o">|</span>   <span class="mi">303</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Webhook</span> <span class="no">Tests</span>        <span class="o">|</span>    <span class="mi">40</span> <span class="o">|</span>    <span class="mi">35</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">+----------------------+-------+-------+---------+---------+-----+-------+</span>
</span><span class='line'><span class="o">|</span> <span class="no">Total</span>                <span class="o">|</span> <span class="mi">151944</span><span class="o">|</span> <span class="mi">116973</span><span class="o">|</span>     <span class="mi">858</span> <span class="o">|</span>    <span class="mi">6631</span> <span class="o">|</span>   <span class="mi">7</span> <span class="o">|</span>    <span class="mi">15</span> <span class="o">|</span>
</span><span class='line'><span class="o">+----------------------+-------+-------+---------+---------+-----+-------+</span>
</span><span class='line'>  <span class="no">Code</span> <span class="no">LOC</span><span class="p">:</span> <span class="mi">50607</span>     <span class="no">Test</span> <span class="no">LOC</span><span class="p">:</span> <span class="mi">66366</span>     <span class="no">Code</span> <span class="n">to</span> <span class="no">Test</span> <span class="no">Ratio</span><span class="p">:</span> <span class="mi">1</span><span class="p">:</span><span class="mi">1</span><span class="o">.</span><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Service-Oriented</h2>

<p>The codebase evolved in a major way during the year that followed. We started creating satellite apps with the V2 codebase as the &#8220;core&#8221; in the center.</p>

<p>The main experiences shifted to apps targeting the primary user segments:</p>

<ul>
<li>Business clients</li>
<li>Taskers browsing for tasks to do</li>
<li>Consumer clients</li>
<li>People applying to be taskers</li>
<li>Admin tools</li>
<li>Static site for high-traffic marketing pages</li>
</ul>


<p>Additionally, there were several apps for specific functionality defined as &#8220;Bus Apps&#8221; in the <a href="/blog/2013/09/28/resque-bus/">Resque Bus post</a>:</p>

<ul>
<li>Sending emails, text messages, and push messages</li>
<li>Recording metrics</li>
<li>Fraud analysis</li>
<li>Determining and tagging category of a task</li>
</ul>


<p>Finally, there were several specific apps that were <a href="http://en.wikipedia.org/wiki/Microsite">microsites</a> or for a partnership agreement that used the API.</p>

<p>It was fun and somewhat liberating to say &#8220;Make a new app!&#8221; when there was a new problem domain to tackle. We also used it as a way to handle our growing organization. We could ask Team A to work on App A and know that they could run faster by understanding the scope was limited to that. As a side-note and in retrospect, we probably let organizational factors affect architecture way more than appropriate.</p>

<h3>Gems</h3>

<p>One great thing was the gem situation was more under control because any given app had less dependencies. App B could upgrade Rack (or whatever) because it did not depend on the crazy thing that App A depended on. App C had the terrible native code-dependent gem and we only had to put that on the App C servers. Memory usage was kept lower, allowing us to run more background workers and unicorn threads.</p>

<p>To coordinate common behaviors across the apps, we made several internal gems. For example, there we gems that handled data access, deployment, authentication, shared assets, and things like that. It was sometimes a full-time job to change these shared gems. You have to bump the version of the gem, then either tag it or put it on an internal gem server, go through each of the apps and bump the version in those gem files, and then install, test, and deploy each of them in some coordinated way.</p>

<p>Eventually, a meta-app that knew about all of other other apps. One of the things that it knew how to do was upgrade a gem in all of the apps. It would check them all out locally, create a new branch, edit the Gemfile, <code>bundle install</code>, check in the changes, push to the git server (which ran the tests), and created a pull request on <a href="https://help.github.com/articles/using-pull-requests/">Github</a>. Collectively, this saved us a ton of time as the process is very tedious.</p>

<h3>Routing</h3>

<p>I&#8217;m not actually sure if &#8220;Service-Oriented&#8221; is the right description of this setup. Yes, there were a few &#8220;pure services&#8221; that I didn&#8217;t mention, but many of these apps were directly user facing. Maybe I should call it &#8220;modular&#8221; or something like that. Anyway, in this modular approach, all of the user segments had their own app but they still had to be on the same (taskrabbit.com) domain. Because of this, it was important to put a routing scheme in place.</p>

<p>Each of the apps was given a primary namespace. For example, the business app had the namespace <code>business</code>. Most of its routes went under that path. These namespaces were them codified in our load balancer. So if the load balancer received a request to <code>/business/anything</code>, it would know to route it to the business app.</p>

<p>One easy thing to forget is to also put the assets under that namespace. This is done in the application config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">prefix</span> <span class="o">=</span> <span class="s2">&quot;/business/assets&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We conformed to the single namespace as much as possible, but there were always exceptions. It was usually for SEO reasons or because the URL had to be particularly easy to remember. For example, the static page app had mostly root-level pages such as <code>/how-it-works</code>. These each also had to be added to the load balancer rules. The meta-app knew about these routes as well and another one it its tricks was to be able to generate the rule definition that the load balancer needed.</p>

<h3>Data</h3>

<p>All of the apps used APIs to write anything to the core app that was not in their own databases. They were allowed read-only access to the core database. They used <a href="https://github.com/taskrabbit/resque-bus">Resque Bus</a> to know about relevant changes.</p>

<p>I realize this direct database access is a failure of the service-oriented mindset, but it seemed necessary. It allowed development to go much faster by preventing creation of many GET endpoints and new possible points of failure. We had started down that road and the endpoints looked like direct table reads anyway, so we just allowed that access. I believe it was the right call.</p>

<p>Some reads and all writes used the API. There were gems to standardize this interaction. They used local (intra-network) IP addresses. To our knowledge, the sites were not down, but we still got HTTP issues between the apps every now and then and never fully figured out why.</p>

<p>Each app could have its own database. These used the standard Active Record pattern. These database had somewhat tertiary information but sometimes we wanted to analyze it in combination with the core database. We learned all about joining across databases. We also dumped them all into one database using <a href="https://github.com/taskrabbit/forklift">Forklift</a>, a tool we created to snapshot and transform data.</p>

<h3>Development</h3>

<p>Setting up a development environment was considerably more complicated than back in the monolith days.</p>

<p>Having everything up to date is the first step. At any given time, someone was usually working on something that needed one satellite app and the core one. So first, you had to make sure each was rebased, bundled, and migrated. Then you&#8217;d launch the core app first (because it&#8217;s important but also because it took twice as long to start up). Then you&#8217;d launch the app you&#8217;re working on.</p>

<p>Each had it&#8217;s own port. We standardized so that we could set up YML files and such. We found it was best to override the default port so each just had to run <code>rails s</code> locally. Here is the business app on port <code>5002</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># script/rails</span>
</span><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="no">APP_PATH</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../../config/application&#39;</span><span class="p">,</span>  <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../../config/boot&#39;</span><span class="p">,</span>  <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails/commands/server&#39;</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Rails</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Server</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">default_options</span>
</span><span class='line'>      <span class="k">super</span><span class="o">.</span><span class="n">merge</span><span class="p">({</span> <span class="ss">:Port</span> <span class="o">=&gt;</span> <span class="mi">5002</span> <span class="p">})</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails/commands&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This would be enough if you were just working on one app. You would work on <code>http://localhost:5002/yourapp</code> and it would read the core database and/or use the API right to its port. However, if the flow you were working on redirected between apps, you&#8217;d want to run them all in a mounted fashion similar to the production load balancer environment. One example would be updated the home page. This was in the static app that used the core API via Javascript. Filling out an email address would use the API and the redirect to signup in the consumer app. So what we&#8217;d want to do is mount them all under <code>http://localhost:5000</code>. This was accomplished using nginx serving that port and mimicking the load balancer rules to delegate to ports 5001+.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># nginx.conf</span>
</span><span class='line'><span class="n">server</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">listen</span>       <span class="mi">5000</span><span class="p">;</span>
</span><span class='line'>    <span class="n">server_name</span>  <span class="n">localhost</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">location</span> <span class="o">~*</span> <span class="sr">/business(/</span><span class="o">.</span><span class="n">*</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="sr">/|$) {</span>
</span><span class='line'><span class="sr">        proxy_pass  http:/</span><span class="o">/</span><span class="n">localhost</span><span class="p">:</span><span class="mi">5002</span><span class="p">;</span>
</span><span class='line'>        <span class="n">proxy_buffering</span> <span class="n">off</span><span class="p">;</span>
</span><span class='line'>        <span class="n">tcp_nodelay</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">nginx</span> <span class="o">-</span><span class="n">c</span> <span class="sr">/path/</span><span class="n">to</span><span class="o">/</span><span class="n">nginx</span><span class="o">.</span><span class="n">conf</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will route <code>/business</code> and <code>/business/anything</code> to port 5002 locally. Of course, setting up this situation was pretty tedious too and we already had a place that knew all the routes. So the meta-app could also generate nginx configurations. It had a command line script that would allow you to launch everything in one go via a command like <code>trdev core business static</code>. This would generate a configuration file and run nginx and give instructions to launch each app such as <code>cd /path/to/business &amp;&amp; rails s -p 5002</code>.</p>

<p>The goal was to have minimal dependencies (and frustrations) of course. When you are working on some app, you&#8217;d have to run core. That&#8217;s just how it is. But I don&#8217;t think you should have to run the static app just to not 404 when you go to root or some other app just to be able to login. The goal was to work just on that one app and this modularization was supposed to keep us focused. So I made a middleware that was automatically inserted in development mode to handle really important paths.</p>

<p>With that, if you did hit <code>http://localhost:5002/login</code> just in your app, it would serve a bootstrap-looking login experience. Or if you hit root, it would redirect to <code>/dashboard</code> if you were logged in, just like the Javascript from the static app did. It also served <code>/dashboard</code>. One interesting thing is that each app had the ability to override what was shown on root and dashboard so that it could give helpful links to the developer to the main spots in this app. All of this was possible on things that were handled in middleware such as authentication.</p>

<p>This setup prevented having to do the whole nginx thing very often and a developer could just focus on running the one app and getting things done.</p>

<h3>Tests</h3>

<p>When testing a Rails app, it is very common to use a gem like <a href="https://github.com/vcr/vcr">vcr</a> to record the external interactions. Usually these external interactions are somewhat inconsequential in the grand scheme of things. They are also usually stateless. Examples that come to mind are geocoding an address or sending an SMS.</p>

<p>With one of these satellite apps, the core app was the opposite. It is quite important and quite stateful. The whole app depended on the current state of things and needed it to change. It was also complicated by the direct database access which generally had to line up with what the API was returning. I spent some time stubbing ActiveRecord/MySQL and that was somewhat interesting, but in the end, it was not a stable combination. It also did not fully inspire confidence about the whole system and the interplay between services. To be clear, there were several stubbed (internal) services, but we decided that core one should be tested in tandem.</p>

<p>To solve this problem, we created <a href="https://github.com/taskrabbit/offshore">offshore</a> which I have <a href="/blog/2014/03/16/offshore/">written about before</a>. It ran and refreshed a fixtured and factory-able version of the core platform for the satellite apps to use which testing. It clearly added overhead, but was the best combination of confidence, running time, and maintainability that we found.</p>

<p>The core test suite itself was more standard. It simulated the various requests that external and internal components made to it and checked the results. Of course, the suite itself was taking an hour to run, even when in parallel.</p>

<h3>Denormalized Experiences</h3>

<p>Splitting up the apps into specific user experiences had an interesting side effect that I did not predict. Because each app did a few very specific things and served very specific pages, we ended up really optimizing those experiences. Of course, there&#8217;s no reason that we couldn&#8217;t have done this in the monolithic app, but the focus seemed to empower us to customize.</p>

<p>The improved experience usually came from a specific focus on the data that targeted the use case instead of &#8220;proper&#8221; storage. For example, the primary driver of the tasker application was an <a href="http://www.elasticsearch.org/">ElasticSearch</a> index that contained all tasks currently available. It was all the same data that was somewhere in the core database, but it was stored in a way to optimize the tasker browsing experience. I&#8217;m not sure why did didn&#8217;t add this early to the core app. It&#8217;s probably because all the data was already there and we could get by with SQL queries. Or maybe adding <em>yet another</em> thing to the app was too much to think about. But in it&#8217;s own app, it was liberating.</p>

<p>The app would subscribe to the <a href="/blog/2013/09/28/resque-bus/">bus</a> to get changes and keep it&#8217;s index up to to date. It served it&#8217;s own API that the app used. This API mostly just hit the ElasticSearch index. I believe it also did a quick sanity check against the task state by checking ids in SQL just to make sure the data was not stale as the tasks got picked up quickly and the bus could take a few seconds.</p>

<h3>Back Together</h3>

<p>This is the kind of thing that&#8217;s exciting about making new apps. The plumbing was exhausting and we never really got it to a spot without friction, but we did end up creating better user experiences because of the focus. Of course, we retreated almost completely from this approach with the creation of V3. A few <a href="/blog/2013/09/28/resque-bus/">bus apps</a> exist but the whole experience in now in one app/codebase.</p>

<p>The main trick was to drastically simply what the app did in the first place by limiting feature set. On the technical level, the primary goal is to still feel that same freedom and focus when developing the features you do build. We&#8217;ve primarily done this through the use of <a href="/blog/2014/02/11/rails-4-engines/">engines</a>.</p>

<h2>Final Words</h2>

<p>So there you go: a (short - ha) blog post about four years of my technical life.</p>

<p>My colleagues and I poured our hearts into that code. There were many great pieces and if I&#8217;ve left them out it&#8217;s either because it was too much to explain, I&#8217;ve already forgotten, or that I was mostly hoping to point out various problems we encountered along the way. It&#8217;s not often when there is a such a clear start and beginning to an era of a company and even less so when the codebase clearly reflects it. We have that case here and I hope the journey is helpful to others.</p>

<p>So farewell <code>runmyerrand</code>. One day, years from now, I will find the DVD with you on it and smile. I hope I can still find a DVD drive so I can copy and paste that code I&#8217;m sure I&#8217;ll be looking for.</p>

<p>Numbers just before it went to the DVD:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Core</span>
</span><span class='line'><span class="o">+----------------------+-------+-------+---------+---------+-----+-------+</span>
</span><span class='line'><span class="o">|</span> <span class="no">Name</span>                 <span class="o">|</span> <span class="no">Lines</span> <span class="o">|</span>   <span class="no">LOC</span> <span class="o">|</span> <span class="no">Classes</span> <span class="o">|</span> <span class="no">Methods</span> <span class="o">|</span> <span class="n">M</span><span class="o">/</span><span class="n">C</span> <span class="o">|</span> <span class="no">LOC</span><span class="o">/</span><span class="n">M</span> <span class="o">|</span>
</span><span class='line'><span class="o">+----------------------+-------+-------+---------+---------+-----+-------+</span>
</span><span class='line'><span class="o">|</span> <span class="no">Apis</span>                 <span class="o">|</span>  <span class="mi">2523</span> <span class="o">|</span>  <span class="mi">1806</span> <span class="o">|</span>      <span class="mi">61</span> <span class="o">|</span>     <span class="mi">192</span> <span class="o">|</span>   <span class="mi">3</span> <span class="o">|</span>     <span class="mi">7</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Awards</span>               <span class="o">|</span>   <span class="mi">488</span> <span class="o">|</span>   <span class="mi">351</span> <span class="o">|</span>      <span class="mi">19</span> <span class="o">|</span>      <span class="mi">57</span> <span class="o">|</span>   <span class="mi">3</span> <span class="o">|</span>     <span class="mi">4</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Controllers</span>          <span class="o">|</span>  <span class="mi">9890</span> <span class="o">|</span>  <span class="mi">7777</span> <span class="o">|</span>     <span class="mi">126</span> <span class="o">|</span>     <span class="mi">880</span> <span class="o">|</span>   <span class="mi">6</span> <span class="o">|</span>     <span class="mi">6</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Filters</span>              <span class="o">|</span>  <span class="mi">1563</span> <span class="o">|</span>  <span class="mi">1274</span> <span class="o">|</span>      <span class="mi">10</span> <span class="o">|</span>     <span class="mi">136</span> <span class="o">|</span>  <span class="mi">13</span> <span class="o">|</span>     <span class="mi">7</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Helpers</span>              <span class="o">|</span>  <span class="mi">9890</span> <span class="o">|</span>  <span class="mi">8107</span> <span class="o">|</span>      <span class="mi">93</span> <span class="o">|</span>     <span class="mi">984</span> <span class="o">|</span>  <span class="mi">10</span> <span class="o">|</span>     <span class="mi">6</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Inputs</span>               <span class="o">|</span>   <span class="mi">111</span> <span class="o">|</span>    <span class="mi">95</span> <span class="o">|</span>       <span class="mi">5</span> <span class="o">|</span>       <span class="mi">6</span> <span class="o">|</span>   <span class="mi">1</span> <span class="o">|</span>    <span class="mi">13</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Mailers</span>              <span class="o">|</span>  <span class="mi">1034</span> <span class="o">|</span>   <span class="mi">784</span> <span class="o">|</span>       <span class="mi">9</span> <span class="o">|</span>      <span class="mi">99</span> <span class="o">|</span>  <span class="mi">11</span> <span class="o">|</span>     <span class="mi">5</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Models</span>               <span class="o">|</span> <span class="mi">28708</span> <span class="o">|</span> <span class="mi">21854</span> <span class="o">|</span>     <span class="mi">258</span> <span class="o">|</span>    <span class="mi">2914</span> <span class="o">|</span>  <span class="mi">11</span> <span class="o">|</span>     <span class="mi">5</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Observers</span>            <span class="o">|</span>   <span class="mi">244</span> <span class="o">|</span>   <span class="mi">172</span> <span class="o">|</span>       <span class="mi">9</span> <span class="o">|</span>      <span class="mi">29</span> <span class="o">|</span>   <span class="mi">3</span> <span class="o">|</span>     <span class="mi">3</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Presenters</span>           <span class="o">|</span>   <span class="mi">193</span> <span class="o">|</span>   <span class="mi">136</span> <span class="o">|</span>       <span class="mi">5</span> <span class="o">|</span>      <span class="mi">29</span> <span class="o">|</span>   <span class="mi">5</span> <span class="o">|</span>     <span class="mi">2</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Services</span>             <span class="o">|</span>  <span class="mi">1034</span> <span class="o">|</span>   <span class="mi">864</span> <span class="o">|</span>       <span class="mi">7</span> <span class="o">|</span>      <span class="mi">84</span> <span class="o">|</span>  <span class="mi">12</span> <span class="o">|</span>     <span class="mi">8</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Syncs</span>                <span class="o">|</span>  <span class="mi">1042</span> <span class="o">|</span>   <span class="mi">849</span> <span class="o">|</span>      <span class="mi">23</span> <span class="o">|</span>      <span class="mi">94</span> <span class="o">|</span>   <span class="mi">4</span> <span class="o">|</span>     <span class="mi">7</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Validators</span>           <span class="o">|</span>   <span class="mi">277</span> <span class="o">|</span>   <span class="mi">195</span> <span class="o">|</span>       <span class="mi">9</span> <span class="o">|</span>      <span class="mi">27</span> <span class="o">|</span>   <span class="mi">3</span> <span class="o">|</span>     <span class="mi">5</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Widgets</span>              <span class="o">|</span>   <span class="mi">560</span> <span class="o">|</span>   <span class="mi">447</span> <span class="o">|</span>      <span class="mi">13</span> <span class="o">|</span>      <span class="mi">60</span> <span class="o">|</span>   <span class="mi">4</span> <span class="o">|</span>     <span class="mi">5</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Workers</span>              <span class="o">|</span>  <span class="mi">2036</span> <span class="o">|</span>  <span class="mi">1515</span> <span class="o">|</span>      <span class="mi">81</span> <span class="o">|</span>     <span class="mi">237</span> <span class="o">|</span>   <span class="mi">2</span> <span class="o">|</span>     <span class="mi">4</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Javascripts</span>          <span class="o">|</span> <span class="mi">47956</span> <span class="o">|</span> <span class="mi">30588</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>    <span class="mi">3275</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">7</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Adapters</span>             <span class="o">|</span>   <span class="mi">535</span> <span class="o">|</span>   <span class="mi">429</span> <span class="o">|</span>      <span class="mi">12</span> <span class="o">|</span>      <span class="mi">39</span> <span class="o">|</span>   <span class="mi">3</span> <span class="o">|</span>     <span class="mi">9</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Libraries</span>            <span class="o">|</span>  <span class="mi">8193</span> <span class="o">|</span>  <span class="mi">6591</span> <span class="o">|</span>     <span class="mi">170</span> <span class="o">|</span>     <span class="mi">771</span> <span class="o">|</span>   <span class="mi">4</span> <span class="o">|</span>     <span class="mi">6</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Configuration</span>        <span class="o">|</span>  <span class="mi">5453</span> <span class="o">|</span>  <span class="mi">3837</span> <span class="o">|</span>      <span class="mi">21</span> <span class="o">|</span>     <span class="mi">103</span> <span class="o">|</span>   <span class="mi">4</span> <span class="o">|</span>    <span class="mi">35</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Gems</span>                 <span class="o">|</span>   <span class="mi">863</span> <span class="o">|</span>   <span class="mi">672</span> <span class="o">|</span>      <span class="mi">15</span> <span class="o">|</span>      <span class="mi">93</span> <span class="o">|</span>   <span class="mi">6</span> <span class="o">|</span>     <span class="mi">5</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Other</span> <span class="no">Tests</span>          <span class="o">|</span> <span class="mi">26052</span> <span class="o">|</span> <span class="mi">17280</span> <span class="o">|</span>      <span class="mi">23</span> <span class="o">|</span>     <span class="mi">167</span> <span class="o">|</span>   <span class="mi">7</span> <span class="o">|</span>   <span class="mi">101</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Spec</span> <span class="no">Support</span>         <span class="o">|</span>  <span class="mi">4987</span> <span class="o">|</span>  <span class="mi">3707</span> <span class="o">|</span>      <span class="mi">19</span> <span class="o">|</span>     <span class="mi">215</span> <span class="o">|</span>  <span class="mi">11</span> <span class="o">|</span>    <span class="mi">15</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Api</span> <span class="no">Tests</span>            <span class="o">|</span>  <span class="mi">8650</span> <span class="o">|</span>  <span class="mi">6909</span> <span class="o">|</span>       <span class="mi">7</span> <span class="o">|</span>      <span class="mi">55</span> <span class="o">|</span>   <span class="mi">7</span> <span class="o">|</span>   <span class="mi">123</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Widget</span> <span class="no">Tests</span>         <span class="o">|</span>   <span class="mi">812</span> <span class="o">|</span>   <span class="mi">608</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Award</span> <span class="no">Tests</span>          <span class="o">|</span>   <span class="mi">541</span> <span class="o">|</span>   <span class="mi">437</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Controller</span> <span class="no">Tests</span>     <span class="o">|</span>  <span class="mi">6405</span> <span class="o">|</span>  <span class="mi">5135</span> <span class="o">|</span>       <span class="mi">8</span> <span class="o">|</span>      <span class="mi">40</span> <span class="o">|</span>   <span class="mi">5</span> <span class="o">|</span>   <span class="mi">126</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Model</span> <span class="no">Tests</span>          <span class="o">|</span> <span class="mi">31273</span> <span class="o">|</span> <span class="mi">24952</span> <span class="o">|</span>      <span class="mi">10</span> <span class="o">|</span>      <span class="mi">46</span> <span class="o">|</span>   <span class="mi">4</span> <span class="o">|</span>   <span class="mi">540</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Helper</span> <span class="no">Tests</span>         <span class="o">|</span>   <span class="mi">816</span> <span class="o">|</span>   <span class="mi">651</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">2</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>   <span class="mi">323</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Lib</span> <span class="no">Tests</span>            <span class="o">|</span>  <span class="mi">4695</span> <span class="o">|</span>  <span class="mi">3677</span> <span class="o">|</span>       <span class="mi">4</span> <span class="o">|</span>      <span class="mi">33</span> <span class="o">|</span>   <span class="mi">8</span> <span class="o">|</span>   <span class="mi">109</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Observer</span> <span class="no">Tests</span>       <span class="o">|</span>   <span class="mi">299</span> <span class="o">|</span>   <span class="mi">219</span> <span class="o">|</span>       <span class="mi">1</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Request</span> <span class="no">Tests</span>        <span class="o">|</span>  <span class="mi">4472</span> <span class="o">|</span>  <span class="mi">3400</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>      <span class="mi">11</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>   <span class="mi">307</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Service</span> <span class="no">Tests</span>        <span class="o">|</span>   <span class="mi">635</span> <span class="o">|</span>   <span class="mi">487</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>      <span class="mi">11</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>    <span class="mi">42</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Presenter</span> <span class="no">Tests</span>      <span class="o">|</span>    <span class="mi">12</span> <span class="o">|</span>     <span class="mi">9</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Routing</span> <span class="no">Tests</span>        <span class="o">|</span>   <span class="mi">269</span> <span class="o">|</span>   <span class="mi">202</span> <span class="o">|</span>       <span class="mi">1</span> <span class="o">|</span>       <span class="mi">3</span> <span class="o">|</span>   <span class="mi">3</span> <span class="o">|</span>    <span class="mi">65</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Sync</span> <span class="no">Tests</span>           <span class="o">|</span>  <span class="mi">1274</span> <span class="o">|</span>   <span class="mi">988</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">1</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>   <span class="mi">986</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Validator</span> <span class="no">Tests</span>      <span class="o">|</span>    <span class="mi">78</span> <span class="o">|</span>    <span class="mi">61</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Worker</span> <span class="no">Tests</span>         <span class="o">|</span>  <span class="mi">2911</span> <span class="o">|</span>  <span class="mi">2161</span> <span class="o">|</span>       <span class="mi">7</span> <span class="o">|</span>      <span class="mi">14</span> <span class="o">|</span>   <span class="mi">2</span> <span class="o">|</span>   <span class="mi">152</span> <span class="o">|</span>
</span><span class='line'><span class="o">+----------------------+-------+-------+---------+---------+-----+-------+</span>
</span><span class='line'><span class="o">|</span> <span class="no">Total</span>                <span class="o">|</span> <span class="mi">216774</span><span class="o">|</span> <span class="mi">159226</span><span class="o">|</span>    <span class="mi">1026</span> <span class="o">|</span>   <span class="mi">10707</span> <span class="o">|</span>  <span class="mi">10</span> <span class="o">|</span>    <span class="mi">12</span> <span class="o">|</span>
</span><span class='line'><span class="o">+----------------------+-------+-------+---------+---------+-----+-------+</span>
</span><span class='line'>  <span class="no">Code</span> <span class="no">LOC</span><span class="p">:</span> <span class="mi">88343</span>     <span class="no">Test</span> <span class="no">LOC</span><span class="p">:</span> <span class="mi">70883</span>     <span class="no">Code</span> <span class="n">to</span> <span class="no">Test</span> <span class="no">Ratio</span><span class="p">:</span> <span class="mi">1</span><span class="p">:</span><span class="mi">0</span><span class="o">.</span><span class="mi">8</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="no">Other</span> <span class="no">Rails</span> <span class="no">Apps</span>
</span><span class='line'><span class="o">+----------------------+-------+-------+---------+---------+-----+-------+</span>
</span><span class='line'><span class="o">|</span> <span class="no">Name</span>                 <span class="o">|</span> <span class="no">Lines</span> <span class="o">|</span>   <span class="no">LOC</span> <span class="o">|</span> <span class="no">Classes</span> <span class="o">|</span> <span class="no">Methods</span> <span class="o">|</span> <span class="n">M</span><span class="o">/</span><span class="n">C</span> <span class="o">|</span> <span class="no">LOC</span><span class="o">/</span><span class="n">M</span> <span class="o">|</span>
</span><span class='line'><span class="o">+----------------------+-------+-------+---------+---------+-----+-------+</span>
</span><span class='line'><span class="o">|</span> <span class="no">Controllers</span>          <span class="o">|</span>  <span class="mi">5457</span> <span class="o">|</span>  <span class="mi">4138</span> <span class="o">|</span>      <span class="mi">98</span> <span class="o">|</span>     <span class="mi">463</span> <span class="o">|</span>   <span class="mi">4</span> <span class="o">|</span>     <span class="mi">6</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Helpers</span>              <span class="o">|</span>  <span class="mi">2336</span> <span class="o">|</span>  <span class="mi">1787</span> <span class="o">|</span>       <span class="mi">1</span> <span class="o">|</span>     <span class="mi">250</span> <span class="o">|</span> <span class="mi">250</span> <span class="o">|</span>     <span class="mi">5</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Models</span>               <span class="o">|</span> <span class="mi">12440</span> <span class="o">|</span>  <span class="mi">9359</span> <span class="o">|</span>     <span class="mi">245</span> <span class="o">|</span>    <span class="mi">1054</span> <span class="o">|</span>   <span class="mi">4</span> <span class="o">|</span>     <span class="mi">6</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Javascripts</span>          <span class="o">|</span> <span class="mi">54742</span> <span class="o">|</span> <span class="mi">35636</span> <span class="o">|</span>       <span class="mi">2</span> <span class="o">|</span>    <span class="mi">4357</span> <span class="o">|</span> <span class="mi">2178</span> <span class="o">|</span>     <span class="mi">6</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Processors</span>           <span class="o">|</span>   <span class="mi">142</span> <span class="o">|</span>    <span class="mi">70</span> <span class="o">|</span>       <span class="mi">4</span> <span class="o">|</span>       <span class="mi">9</span> <span class="o">|</span>   <span class="mi">2</span> <span class="o">|</span>     <span class="mi">5</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Workers</span>              <span class="o">|</span>   <span class="mi">273</span> <span class="o">|</span>   <span class="mi">203</span> <span class="o">|</span>      <span class="mi">12</span> <span class="o">|</span>      <span class="mi">31</span> <span class="o">|</span>   <span class="mi">2</span> <span class="o">|</span>     <span class="mi">4</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Widgets</span>              <span class="o">|</span>   <span class="mi">432</span> <span class="o">|</span>   <span class="mi">314</span> <span class="o">|</span>       <span class="mi">9</span> <span class="o">|</span>      <span class="mi">49</span> <span class="o">|</span>   <span class="mi">5</span> <span class="o">|</span>     <span class="mi">4</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Forms</span>                <span class="o">|</span>   <span class="mi">192</span> <span class="o">|</span>   <span class="mi">149</span> <span class="o">|</span>       <span class="mi">4</span> <span class="o">|</span>      <span class="mi">27</span> <span class="o">|</span>   <span class="mi">6</span> <span class="o">|</span>     <span class="mi">3</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Interactions</span>         <span class="o">|</span>   <span class="mi">627</span> <span class="o">|</span>   <span class="mi">442</span> <span class="o">|</span>      <span class="mi">20</span> <span class="o">|</span>      <span class="mi">70</span> <span class="o">|</span>   <span class="mi">3</span> <span class="o">|</span>     <span class="mi">4</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Apis</span>                 <span class="o">|</span>   <span class="mi">542</span> <span class="o">|</span>   <span class="mi">324</span> <span class="o">|</span>      <span class="mi">13</span> <span class="o">|</span>      <span class="mi">46</span> <span class="o">|</span>   <span class="mi">3</span> <span class="o">|</span>     <span class="mi">5</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Decorators</span>           <span class="o">|</span>    <span class="mi">92</span> <span class="o">|</span>    <span class="mi">78</span> <span class="o">|</span>       <span class="mi">1</span> <span class="o">|</span>      <span class="mi">13</span> <span class="o">|</span>  <span class="mi">13</span> <span class="o">|</span>     <span class="mi">4</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">External</span> <span class="no">Services</span>    <span class="o">|</span>   <span class="mi">712</span> <span class="o">|</span>   <span class="mi">527</span> <span class="o">|</span>      <span class="mi">13</span> <span class="o">|</span>      <span class="mi">98</span> <span class="o">|</span>   <span class="mi">7</span> <span class="o">|</span>     <span class="mi">3</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Geography</span> <span class="no">Models</span>     <span class="o">|</span>    <span class="mi">18</span> <span class="o">|</span>    <span class="mi">15</span> <span class="o">|</span>       <span class="mi">4</span> <span class="o">|</span>       <span class="mi">1</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>    <span class="mi">13</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Notifiers</span>            <span class="o">|</span>   <span class="mi">474</span> <span class="o">|</span>   <span class="mi">368</span> <span class="o">|</span>      <span class="mi">12</span> <span class="o">|</span>      <span class="mi">52</span> <span class="o">|</span>   <span class="mi">4</span> <span class="o">|</span>     <span class="mi">5</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Policies</span>             <span class="o">|</span>   <span class="mi">128</span> <span class="o">|</span>    <span class="mi">91</span> <span class="o">|</span>       <span class="mi">7</span> <span class="o">|</span>      <span class="mi">23</span> <span class="o">|</span>   <span class="mi">3</span> <span class="o">|</span>     <span class="mi">1</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Remote</span> <span class="no">Models</span>        <span class="o">|</span>   <span class="mi">707</span> <span class="o">|</span>   <span class="mi">557</span> <span class="o">|</span>      <span class="mi">36</span> <span class="o">|</span>      <span class="mi">55</span> <span class="o">|</span>   <span class="mi">1</span> <span class="o">|</span>     <span class="mi">8</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Services</span>             <span class="o">|</span>   <span class="mi">948</span> <span class="o">|</span>   <span class="mi">802</span> <span class="o">|</span>      <span class="mi">12</span> <span class="o">|</span>      <span class="mi">75</span> <span class="o">|</span>   <span class="mi">6</span> <span class="o">|</span>     <span class="mi">8</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Uploaders</span>            <span class="o">|</span>    <span class="mi">28</span> <span class="o">|</span>    <span class="mi">20</span> <span class="o">|</span>       <span class="mi">1</span> <span class="o">|</span>       <span class="mi">3</span> <span class="o">|</span>   <span class="mi">3</span> <span class="o">|</span>     <span class="mi">4</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Validators</span>           <span class="o">|</span>    <span class="mi">36</span> <span class="o">|</span>    <span class="mi">27</span> <span class="o">|</span>       <span class="mi">3</span> <span class="o">|</span>       <span class="mi">3</span> <span class="o">|</span>   <span class="mi">1</span> <span class="o">|</span>     <span class="mi">7</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Modules</span>              <span class="o">|</span>    <span class="mi">43</span> <span class="o">|</span>    <span class="mi">31</span> <span class="o">|</span>       <span class="mi">1</span> <span class="o">|</span>       <span class="mi">6</span> <span class="o">|</span>   <span class="mi">6</span> <span class="o">|</span>     <span class="mi">3</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Repos</span>                <span class="o">|</span>    <span class="mi">90</span> <span class="o">|</span>    <span class="mi">72</span> <span class="o">|</span>       <span class="mi">1</span> <span class="o">|</span>      <span class="mi">10</span> <span class="o">|</span>  <span class="mi">10</span> <span class="o">|</span>     <span class="mi">5</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Concerns</span>             <span class="o">|</span>    <span class="mi">23</span> <span class="o">|</span>    <span class="mi">20</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">3</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">4</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Jobs</span>                 <span class="o">|</span>   <span class="mi">154</span> <span class="o">|</span>   <span class="mi">109</span> <span class="o">|</span>       <span class="mi">7</span> <span class="o">|</span>      <span class="mi">20</span> <span class="o">|</span>   <span class="mi">2</span> <span class="o">|</span>     <span class="mi">3</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Presenters</span>           <span class="o">|</span>   <span class="mi">153</span> <span class="o">|</span>   <span class="mi">118</span> <span class="o">|</span>       <span class="mi">2</span> <span class="o">|</span>      <span class="mi">26</span> <span class="o">|</span>  <span class="mi">13</span> <span class="o">|</span>     <span class="mi">2</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Mailers</span>              <span class="o">|</span>    <span class="mi">25</span> <span class="o">|</span>    <span class="mi">21</span> <span class="o">|</span>       <span class="mi">1</span> <span class="o">|</span>       <span class="mi">3</span> <span class="o">|</span>   <span class="mi">3</span> <span class="o">|</span>     <span class="mi">5</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Gems</span>                 <span class="o">|</span>  <span class="mi">3879</span> <span class="o">|</span>  <span class="mi">2814</span> <span class="o">|</span>      <span class="mi">29</span> <span class="o">|</span>     <span class="mi">348</span> <span class="o">|</span>  <span class="mi">12</span> <span class="o">|</span>     <span class="mi">6</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Controller</span> <span class="no">Tests</span>     <span class="o">|</span>  <span class="mi">3422</span> <span class="o">|</span>  <span class="mi">2604</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">7</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>   <span class="mi">370</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Spec</span> <span class="no">Support</span>         <span class="o">|</span>  <span class="mi">3368</span> <span class="o">|</span>  <span class="mi">2518</span> <span class="o">|</span>      <span class="mi">30</span> <span class="o">|</span>     <span class="mi">250</span> <span class="o">|</span>   <span class="mi">8</span> <span class="o">|</span>     <span class="mi">8</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Helper</span> <span class="no">Tests</span>         <span class="o">|</span>   <span class="mi">248</span> <span class="o">|</span>   <span class="mi">147</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Integration</span> <span class="no">Tests</span>    <span class="o">|</span>   <span class="mi">307</span> <span class="o">|</span>   <span class="mi">229</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Model</span> <span class="no">Tests</span>          <span class="o">|</span>  <span class="mi">8841</span> <span class="o">|</span>  <span class="mi">6868</span> <span class="o">|</span>       <span class="mi">1</span> <span class="o">|</span>       <span class="mi">3</span> <span class="o">|</span>   <span class="mi">3</span> <span class="o">|</span>  <span class="mi">2287</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Other</span> <span class="no">Tests</span>          <span class="o">|</span>  <span class="mi">1597</span> <span class="o">|</span>  <span class="mi">1257</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">2</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>   <span class="mi">626</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Request</span> <span class="no">Tests</span>        <span class="o">|</span>  <span class="mi">1496</span> <span class="o">|</span>  <span class="mi">1198</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Feature</span> <span class="no">Tests</span>        <span class="o">|</span>  <span class="mi">6388</span> <span class="o">|</span>  <span class="mi">5082</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>      <span class="mi">15</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>   <span class="mi">336</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Form</span> <span class="no">Tests</span>           <span class="o">|</span>    <span class="mi">74</span> <span class="o">|</span>    <span class="mi">53</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Interaction</span> <span class="no">Tests</span>    <span class="o">|</span>   <span class="mi">831</span> <span class="o">|</span>   <span class="mi">586</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">External</span> <span class="no">Service</span> <span class="no">Test</span><span class="o">|</span>   <span class="mi">907</span> <span class="o">|</span>   <span class="mi">650</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Notifier</span> <span class="no">Tests</span>       <span class="o">|</span>  <span class="mi">1172</span> <span class="o">|</span>   <span class="mi">938</span> <span class="o">|</span>       <span class="mi">2</span> <span class="o">|</span>       <span class="mi">3</span> <span class="o">|</span>   <span class="mi">1</span> <span class="o">|</span>   <span class="mi">310</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Policy</span> <span class="no">Tests</span>         <span class="o">|</span>    <span class="mi">27</span> <span class="o">|</span>    <span class="mi">20</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Service</span> <span class="no">Tests</span>        <span class="o">|</span>   <span class="mi">727</span> <span class="o">|</span>   <span class="mi">563</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Worker</span> <span class="no">Tests</span>         <span class="o">|</span>   <span class="mi">252</span> <span class="o">|</span>   <span class="mi">182</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Lib</span> <span class="no">Tests</span>            <span class="o">|</span>   <span class="mi">727</span> <span class="o">|</span>   <span class="mi">572</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">1</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>   <span class="mi">570</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Concern</span> <span class="no">Tests</span>        <span class="o">|</span>    <span class="mi">15</span> <span class="o">|</span>    <span class="mi">12</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Job</span> <span class="no">Tests</span>            <span class="o">|</span>   <span class="mi">129</span> <span class="o">|</span>    <span class="mi">93</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Presenter</span> <span class="no">Tests</span>      <span class="o">|</span>   <span class="mi">144</span> <span class="o">|</span>   <span class="mi">114</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Remote</span> <span class="no">Model</span> <span class="no">Tests</span>   <span class="o">|</span>   <span class="mi">386</span> <span class="o">|</span>   <span class="mi">305</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Validator</span> <span class="no">Tests</span>      <span class="o">|</span>    <span class="mi">21</span> <span class="o">|</span>    <span class="mi">16</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Decorator</span> <span class="no">Tests</span>      <span class="o">|</span>   <span class="mi">154</span> <span class="o">|</span>   <span class="mi">130</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">1</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>   <span class="mi">128</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Mailer</span> <span class="no">Tests</span>         <span class="o">|</span>     <span class="mi">5</span> <span class="o">|</span>     <span class="mi">4</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">+----------------------+-------+-------+---------+---------+-----+-------+</span>
</span><span class='line'><span class="o">|</span> <span class="no">Total</span>                <span class="o">|</span> <span class="mi">115931</span><span class="o">|</span> <span class="mi">82233</span> <span class="o">|</span>     <span class="mi">571</span> <span class="o">|</span>    <span class="mi">7377</span> <span class="o">|</span>  <span class="mi">12</span> <span class="o">|</span>     <span class="mi">9</span> <span class="o">|</span>
</span><span class='line'><span class="o">+----------------------+-------+-------+---------+---------+-----+-------+</span>
</span><span class='line'>  <span class="no">Code</span> <span class="no">LOC</span><span class="p">:</span> <span class="mi">58092</span>     <span class="no">Test</span> <span class="no">LOC</span><span class="p">:</span> <span class="mi">24141</span>     <span class="no">Code</span> <span class="n">to</span> <span class="no">Test</span> <span class="no">Ratio</span><span class="p">:</span> <span class="mi">1</span><span class="p">:</span><span class="mi">0</span><span class="o">.</span><span class="mi">4</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="no">Shared</span> <span class="no">Gems</span>
</span><span class='line'><span class="o">+----------------------+-------+-------+---------+---------+-----+-------+</span>
</span><span class='line'><span class="o">|</span> <span class="no">Name</span>                 <span class="o">|</span> <span class="no">Lines</span> <span class="o">|</span>   <span class="no">LOC</span> <span class="o">|</span> <span class="no">Classes</span> <span class="o">|</span> <span class="no">Methods</span> <span class="o">|</span> <span class="n">M</span><span class="o">/</span><span class="n">C</span> <span class="o">|</span> <span class="no">LOC</span><span class="o">/</span><span class="n">M</span> <span class="o">|</span>
</span><span class='line'><span class="o">+----------------------+-------+-------+---------+---------+-----+-------+</span>
</span><span class='line'><span class="o">|</span> <span class="no">Controllers</span>          <span class="o">|</span>   <span class="mi">736</span> <span class="o">|</span>   <span class="mi">576</span> <span class="o">|</span>      <span class="mi">17</span> <span class="o">|</span>      <span class="mi">82</span> <span class="o">|</span>   <span class="mi">4</span> <span class="o">|</span>     <span class="mi">5</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Helpers</span>              <span class="o">|</span>   <span class="mi">238</span> <span class="o">|</span>   <span class="mi">167</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>      <span class="mi">17</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">7</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Models</span>               <span class="o">|</span>   <span class="mi">491</span> <span class="o">|</span>   <span class="mi">387</span> <span class="o">|</span>      <span class="mi">13</span> <span class="o">|</span>      <span class="mi">59</span> <span class="o">|</span>   <span class="mi">4</span> <span class="o">|</span>     <span class="mi">4</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Widgets</span>              <span class="o">|</span>   <span class="mi">220</span> <span class="o">|</span>   <span class="mi">175</span> <span class="o">|</span>       <span class="mi">8</span> <span class="o">|</span>      <span class="mi">22</span> <span class="o">|</span>   <span class="mi">2</span> <span class="o">|</span>     <span class="mi">5</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Javascripts</span>          <span class="o">|</span> <span class="mi">12695</span> <span class="o">|</span>  <span class="mi">7840</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>     <span class="mi">819</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">7</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Adapters</span>             <span class="o">|</span>    <span class="mi">69</span> <span class="o">|</span>    <span class="mi">51</span> <span class="o">|</span>       <span class="mi">1</span> <span class="o">|</span>       <span class="mi">8</span> <span class="o">|</span>   <span class="mi">8</span> <span class="o">|</span>     <span class="mi">4</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Gems</span>                 <span class="o">|</span> <span class="mi">10310</span> <span class="o">|</span>  <span class="mi">7982</span> <span class="o">|</span>     <span class="mi">153</span> <span class="o">|</span>    <span class="mi">1034</span> <span class="o">|</span>   <span class="mi">6</span> <span class="o">|</span>     <span class="mi">5</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Other</span> <span class="no">Tests</span>          <span class="o">|</span>  <span class="mi">2244</span> <span class="o">|</span>  <span class="mi">1712</span> <span class="o">|</span>      <span class="mi">17</span> <span class="o">|</span>      <span class="mi">30</span> <span class="o">|</span>   <span class="mi">1</span> <span class="o">|</span>    <span class="mi">55</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Spec</span> <span class="no">Support</span>         <span class="o">|</span>   <span class="mi">619</span> <span class="o">|</span>   <span class="mi">374</span> <span class="o">|</span>      <span class="mi">11</span> <span class="o">|</span>      <span class="mi">31</span> <span class="o">|</span>   <span class="mi">2</span> <span class="o">|</span>    <span class="mi">10</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Lib</span> <span class="no">Tests</span>            <span class="o">|</span>   <span class="mi">619</span> <span class="o">|</span>   <span class="mi">498</span> <span class="o">|</span>      <span class="mi">14</span> <span class="o">|</span>      <span class="mi">14</span> <span class="o">|</span>   <span class="mi">1</span> <span class="o">|</span>    <span class="mi">33</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="no">Model</span> <span class="no">Tests</span>          <span class="o">|</span>    <span class="mi">15</span> <span class="o">|</span>    <span class="mi">13</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>   <span class="mi">0</span> <span class="o">|</span>     <span class="mi">0</span> <span class="o">|</span>
</span><span class='line'><span class="o">+----------------------+-------+-------+---------+---------+-----+-------+</span>
</span><span class='line'><span class="o">|</span> <span class="no">Total</span>                <span class="o">|</span> <span class="mi">28256</span> <span class="o">|</span> <span class="mi">19775</span> <span class="o">|</span>     <span class="mi">234</span> <span class="o">|</span>    <span class="mi">2116</span> <span class="o">|</span>   <span class="mi">9</span> <span class="o">|</span>     <span class="mi">7</span> <span class="o">|</span>
</span><span class='line'><span class="o">+----------------------+-------+-------+---------+---------+-----+-------+</span>
</span><span class='line'>  <span class="no">Code</span> <span class="no">LOC</span><span class="p">:</span> <span class="mi">17178</span>     <span class="no">Test</span> <span class="no">LOC</span><span class="p">:</span> <span class="mi">2597</span>     <span class="no">Code</span> <span class="n">to</span> <span class="no">Test</span> <span class="no">Ratio</span><span class="p">:</span> <span class="mi">1</span><span class="p">:</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>




<div class="jumbotron">
  <image src="http://bleonard.github.io/images/posts/v2-retrospective/dvd.jpg" alternate="BL DVD" class="bigPicture" />
</div>

]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>V2 - Retrospective</wp:post_id>
            <wp:post_date>2015-10-06 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>React Native Example App: Navigation</title>
            <link>http://bleonard.github.io/blog/2015/09/21/react-native-example-app/</link>
            <pubDate>2015-09-21 00:00:00 -0700</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2015/09/21/react-native-example-app/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>At <a href="http://www.taskrabbit.com">TaskRabbit</a>, we have been looking into building an iOS application in <a href="https://facebook.github.io/react-native/">React Native</a>. This is probably the first pure technology that I&#8217;ve been this excited about since moving from C to Ruby.</p>

<p>However, it&#8217;s definitely still in its early days. There are not many examples of how people are doing things out there. To help remedy this and share what we are learning, I made a <a href="https://github.com/taskrabbit/ReactNativeSampleApp">sample React Native application</a>.</p>

<div class="jumbotron">
  <image src="http://bleonard.github.io/images/posts/react-native-navigation/screenshots.png" class="bigPicture" />
</div>


<p>The app itself is vaguely like twitter and/or tumblr. There are users that make posts. They follow other users. You can look at users they follow follows and those users&#8217; posts. And on and on! The features (or styling) isn&#8217;t the main point. At this time, we&#8217;re mostly demonstrating architectural concepts.</p>

<p>The app we&#8217;re working on is a bit ahead of this one, but I think it will be neat to have this one publicly walk through the same steps that we have done privately. Everything is pretty new and the patterns are not established. We&#8217;ll post here about some pattern or refactor and update the app and hopefully start a great conversation.</p>

<h2>Navigation</h2>

<p>The first pattern that I wanted to talk about is navigation. The web has a pretty solid navigation story (with the URLs and such) and some <a href="https://github.com/rackt/react-router">tools</a> to map that to React applications. I think it&#8217;s less clear on the phone.</p>

<p>I&#8217;m not sure why it&#8217;s different, actually, because there is still usually a &#8220;Back&#8221; button and one screen at a time. Yet, iOS development seems to have evolved in another direction. Most apps are all about this <code>NavigationController</code> and we <code>push</code> and <code>pop</code> and stuff like that. Then things get totally weird when we try to put the URLs back in for something like <a href="http://blog.originate.com/blog/2014/04/22/deeplinking-in-ios/">deep linking</a>.</p>

<!-- more -->


<p>React Native supports the same concept with the <a href="https://facebook.github.io/react-native/docs/navigatorios.html">NavigatorIOS</a> or the <a href="https://facebook.github.io/react-native/docs/navigator.html#content">Navigator</a>. We went with Navigator because it was more customizable and would like work better cross-platform. But it still had this <code>push</code> and <code>pop</code> incremental mindset that, otherwise, React totally removes because we&#8217;re always rendering the whole thing based on <code>state</code> and <code>props</code>.</p>

<p>We also knew that we needed to much better at deep linking. So I decided to make URLs into a first-class citizen. The only way to show anything on the app would be to set a URL. This means that whatever is showing on the screen and where the back button goes is all dictated by the URL.</p>

<h2>Router</h2>

<p>How does this work? For example, <code>sample://dashboard/posts</code> is the first screen when you log in. You can toggle that to <code>sample://dashboard/follows</code> to see who you are following. If you tap on &#8220;john&#8221; there, you are now at <code>sample://dashboard/follows/john/posts</code> and you see his posts. If you tap the &#8220;back&#8221; button, you&#8217;re back on <code>sample://dashboard/follows</code>.</p>

<p>To make this work, we have to parse these URLs and determine the <a href="https://facebook.github.io/react-native/docs/navigator.html#initialroutestack">routeStack</a> of the application to give to the <a href="https://facebook.github.io/react-native/docs/navigator.html">Navigator</a>. So for example <code>sample://dashboard/follows</code> would map to a single item in the stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[{</span>
</span><span class='line'>  <span class="nx">component</span><span class="o">:</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../Screens/FollowList&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">passProps</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">username</span><span class="o">:</span> <span class="nx">username</span> <span class="c1">// null for current user</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>and <code>sample://dashboard/follows/john/posts</code> would map to the new screen along with the original.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[{</span>
</span><span class='line'>  <span class="nx">component</span><span class="o">:</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../Screens/FollowList&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">passProps</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">username</span><span class="o">:</span> <span class="nx">username</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">component</span><span class="o">:</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../Screens/PostList&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">passProps</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">username</span><span class="o">:</span> <span class="nx">username</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Creating this stack is the job of the <a href="https://github.com/taskrabbit/ReactNativeSampleApp/blob/eb139dd0fcd6e57677a2f12ee257568993caeb0c/App/Navigation/Router.js#L40">Router</a> and the <a href="https://github.com/taskrabbit/ReactNativeSampleApp/blob/eb139dd0fcd6e57677a2f12ee257568993caeb0c/App/Navigation/Routes.js#L139">Routes</a>. The root of the app gets it&#8217;s state set with the <code>routeStack</code>. That&#8217;s given to a <a href="https://github.com/taskrabbit/ReactNativeSampleApp/blob/eb139dd0fcd6e57677a2f12ee257568993caeb0c/App/Navigation/NavigationBar.js#L131">Navigator</a> with it set as the <code>initialRouteStack</code>. As the state continues to change, it is set on that Navigator, who takes care of showing the current view and knowing what &#8220;back&#8221; is.</p>

<p>To do this, the Router basically just divides the url up into pieces (separated by slash) and iterates through calling <code>parse</code> on the previous result. It&#8217;s not beautiful, but it works.</p>

<p>I&#8217;d love to figure out how to extract the Router into it&#8217;s own library or use another one, but I haven&#8217;t had the time to check it out. One requirement that might be a problem is that it needs to be infinitely recursive. If it&#8217;s going to be responsible for the entire navigator state, then it has to support infinitely long urls like when I look at someone&#8217;s profile and then the users they follow and then pick one and then users they follow and then that user&#8217;s posts. It&#8217;s not clear to me if any web-based solution solves that.</p>

<p>Here what I mean by recursive. This is sample://dashboard/follows/jrichardlai/follows/taskrabbit/follows/bleonard/follows/taskrabbit/follows/bleonard/follows/jrichardlai/post (and back):</p>

<p><image src="http://bleonard.github.io/images/posts/react-native-navigation/nested.gif" style="max-width: 300px"/></p>

<h2>Actions</h2>

<p>How did that state get set in the first place? There is an <a href="https://github.com/taskrabbit/ReactNativeSampleApp/blob/eb139dd0fcd6e57677a2f12ee257568993caeb0c/App/Actions/AppActions.js#L18">AppActions</a> class with a few ways to manipulate the current state.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">AppActions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// launch given known url</span>
</span><span class='line'>  <span class="nx">launchRoutePath</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">routePath</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Dispatcher</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">actionType</span><span class="o">:</span> <span class="nx">AppConstants</span><span class="p">.</span><span class="nx">LAUNCH_ROUTE_PATH</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">routePath</span><span class="o">:</span> <span class="nx">routePath</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// launch given current and relative url</span>
</span><span class='line'>  <span class="nx">launchRelativeItem</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">currentRoute</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">navItem</span> <span class="o">=</span> <span class="nx">assign</span><span class="p">({},</span> <span class="nx">item</span><span class="p">);</span> <span class="c1">// clone so we can mess with it</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">navItem</span><span class="p">.</span><span class="nx">routePath</span> <span class="o">&amp;&amp;</span> <span class="nx">navItem</span><span class="p">.</span><span class="nx">replacePath</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">pieces</span> <span class="o">=</span> <span class="nx">currentRoute</span><span class="p">.</span><span class="nx">routePath</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">pieces</span><span class="p">[</span><span class="nx">pieces</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">navItem</span><span class="p">.</span><span class="nx">replacePath</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">navItem</span><span class="p">.</span><span class="nx">routePath</span> <span class="o">=</span> <span class="nx">pieces</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">navItem</span><span class="p">.</span><span class="nx">routePath</span> <span class="o">&amp;&amp;</span> <span class="nx">navItem</span><span class="p">.</span><span class="nx">subPath</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">navItem</span><span class="p">.</span><span class="nx">routePath</span> <span class="o">=</span> <span class="nx">currentRoute</span><span class="p">.</span><span class="nx">routePath</span> <span class="o">+</span> <span class="s2">&quot;/&quot;</span> <span class="o">+</span> <span class="nx">navItem</span><span class="p">.</span><span class="nx">subPath</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">navItem</span><span class="p">.</span><span class="nx">currentRoute</span> <span class="o">=</span> <span class="nx">currentRoute</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">launchItem</span><span class="p">(</span><span class="nx">navItem</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// go back</span>
</span><span class='line'>  <span class="nx">goBack</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">navigator</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">current</span>  <span class="o">=</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">getCurrentRoutes</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">previous</span> <span class="o">=</span> <span class="nx">current</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">current</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">previous</span> <span class="o">=</span> <span class="nx">current</span><span class="p">[</span><span class="nx">current</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">AppActions</span><span class="p">.</span><span class="nx">launchRoutePath</span><span class="p">(</span><span class="nx">previous</span><span class="p">.</span><span class="nx">routePath</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>These actions can be called when the user taps an item in the list, the back button, or whatever. It dispatches the event, it&#8217;s picked up, and the root state is changed.</p>

<h2>Navigator</h2>

<p>One great thing about iOS and it&#8217;s traditional <code>NavigationController</code> pattern is the animations. When you tap on that item in the list, it slides in from the right. When you hit the &#8220;back&#8221; button, it slides out. Launching URLs old-school web-style doesn&#8217;t do that at all. It just pops in. Lame.</p>

<p>Fortunately, we can get the best of both worlds. The routeStack is given to the component as a prop, so it triggers the <code>componentDidUpdate</code> lifecyle method. In this method, if we just did <code>this.refs.navigator.immediatelyResetRouteStack(this.props.routeStack.path)</code> then it would be abrupt like the web.</p>

<p>However, we can also look at the new stack and the previous one and be smart about it. It&#8217;s <a href="https://github.com/taskrabbit/ReactNativeSampleApp/blob/eb139dd0fcd6e57677a2f12ee257568993caeb0c/App/Navigation/NavigationBar.js#L72-L115">a bit crazy looking</a>, but it basically only ends up doing that if it&#8217;s completely different. We can handle the most common cases intelligently:</p>

<ul>
<li><code>this.refs.navigator.push(nextRoute)</code> if the new route is one item added to the previous route</li>
<li><code>this.refs.navigator.pop()</code> if the new route is one item removed from the previous route</li>
<li><code>this.refs.navigator.replace(nextRoute)</code> if the new route is a peer of the previous route</li>
<li>otherwise reset the whole stack</li>
</ul>


<p>So in this one spot, we say it&#8217;s ok to be not quite as stateful. It gives people the experience they expect and everywhere else gets to treat the world as fully URL-driven.</p>

<h2>Navigation Benefits</h2>

<p>All of this really helps with deep linking or putting the app in the correct state based on a push notification. We had tons of issues before to be able to reconfigure the app (and it&#8217;s navigation stack) when the notification is slid over. Now it&#8217;s just calling <code>AppActions.launchRoutePath()</code> and the URL can be sent within the push itself.</p>

<p>We also know/require that every single screen (display of a route) has to be able to exist all on it&#8217;s own with only the data from the URL. When tapping into some item to show it bigger, for existence, we don&#8217;t want to depend on that having been fetched from the list. Each screen can stand on it&#8217;s own though obviously we can use the data if it&#8217;s already in the store. Being URL-driven helps us there.</p>

<p>We found it useful to even use the <a href="https://github.com/taskrabbit/ReactNativeSampleApp/blob/eb139dd0fcd6e57677a2f12ee257568993caeb0c/App/Root/LoggedOut.js#L6">NavigationBar</a> even when we didn&#8217;t &#8220;need&#8221; it. That is, the sample app&#8217;s signup/login experience doesn&#8217;t show a navigation bar. We still depend on all the URL routing and rendering, though. So it just get&#8217;s hidden and we still get all that from offscreen.</p>

<h2>Other App Stuff</h2>

<p>Here are some of the other things in the sample app that we&#8217;re not planning on talking much more about. Let us know if something could benefit from a more in-depth look.</p>

<h4>Flux</h4>

<p>The Components use Actions. Actions tend to use the API Services and dispatch an event. The Stores are listening to the events. The Components add and remove listeners to the Stores.</p>

<h4>Environment</h4>

<p>There is a model called Environment that gets bootstrapped from Objective-C. It knows things that are different per environment like what API server to talk to.</p>

<h4>Data storage</h4>

<p>Info is currently stored as json to the local file system.</p>

<h4>Shared CSS</h4>

<p>It uses the <code>cssVar</code> pattern from the sample Facebook apps.</p>

<h4>API</h4>

<p>It uses superagent to do HTTP requests and sets headers and other things like that.</p>

<h4>Components</h4>

<p>Some shared components that might be helpful</p>

<ul>
<li>SegmentedControl: Non-iOS specific version of that control</li>
<li>SimpleList: make a list out of the props set</li>
<li>Button: Helper to make them all similiar</li>
</ul>


<h4>Mixins</h4>

<p>We are currently sharing code through mixins. Some of them might be generally useful.</p>

<ul>
<li>KeyboardListener: helps know the amount of space the keyboard is taking up</li>
<li>DispatcherListener: subscribes and ubsubscribes from the Dispatcher for a component</li>
<li>NavigationListener: react to navigation changes in a component</li>
</ul>


<h4>Server</h4>

<p>There is a server you can run locally using <code>cd server &amp;&amp; npm start</code> that supports the app. It seeds some data and will save (in memory) anything the app sends it.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>React Native Example App: Navigation</wp:post_id>
            <wp:post_date>2015-09-21 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Teaching CSS</title>
            <link>http://bleonard.github.io/blog/2015/08/01/teaching-css/</link>
            <pubDate>2015-08-01 00:00:00 -0700</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2015/08/01/teaching-css/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>To my surprise, my daughter asked me if I would teach her how to build a web site today. She more or less wants a blog to keep track of what is going on at a recess club she made at school: regular notes, calendar, things like that.</p>

<p>I had her draw out on paper what she wanted to build. It was interesting to see her reinvent the concept of a blog. For example, her first iteration only showed the post from &#8220;Today.&#8221; I asked her how you would see yesterday&#8217;s post. So she add a &#8220;Today&#8221; and a &#8220;Yesterday&#8221; button. So I asked her how to see the post from last week. Her answer was approximately, &#8220;Well, they just need to keep up!&#8221; However, she eventually conceded to a &#8220;Previous&#8221; and &#8220;Next&#8221; button.</p>

<p>Even on one&#8217;s first encounter, it seems that it&#8217;s impossible to teach this stuff without also teaching about concessions:</p>

<p><strong>Daughter</strong>: OK, here&#8217;s a picture of what I want to make (shows few buttons on top, content underneath)</p>

<p><strong>Dad</strong>: (Talks about closing and opening tags, gets a word on the page)</p>

<p><strong>Daughter</strong>: Make it bigger.</p>

<p><strong>Dad</strong>: (adds <code>h1</code> tag)</p>

<p><strong>Daughter</strong>: Add the other buttons.</p>

<p><strong>Dad</strong>: (adds two more <code>h1</code> tags)</p>

<p><strong>Daughter</strong>: Why are they not next to each other?</p>

<p><strong>Dad</strong>: (mumbles about <code>ul</code> and <code>li</code> - makes them a list)</p>

<p><strong>Daughter</strong>: Now they are too small again and have those dots.</p>

<p><strong>Dad</strong>: We need to &#8220;style&#8221; them. Let&#8217;s remove the dots. (inlines styles: <code>list-style-type:none;</code>)</p>

<p><strong>Daughter</strong>: OK. Now make it bigger again.</p>

<p><strong>Dad</strong>: (adds <code>font-size:50px;</code> to the first one) There.</p>

<p><strong>Daughter</strong>: What about the other ones?</p>

<p><strong>Dad</strong>: How do you think we make them bigger too?</p>

<p><strong>Daughter</strong>: (eventually adds inline style to other ones). Perfect! Now put them next to each other.</p>

<p><strong>Dad</strong>: (adds <code>display:inline;</code>)</p>

<p><strong>Daughter</strong>: You&#8217;re amazing! Ok, now make the background gold.</p>

<p><strong>Dad</strong>: (<code>background-color:Gold</code>)</p>

<p><strong>Daughter</strong>: That&#8217;s yellow.</p>

<p><strong>Dad</strong>: Here, look at <a href="http://www.w3schools.com/cssref/css_colornames.asp">this</a>.</p>

<p><strong>Daughter</strong>: Wow, so many choices! (picks GoldenRod)</p>

<p><strong>Dad</strong>: (shows how to change to that)</p>

<p><strong>Daughter</strong>: Perfect! Now make the buttons this one (points to DarkTorquise)</p>

<p><strong>Dad</strong>: (adds links makes them <code>background-color:DarkTurquoise;padding: 10px;</code>)</p>

<p><strong>Daughter</strong>: OK, let&#8217;s add the main words. In a white box.</p>

<p><strong>Dad</strong>: (adds <code>div</code> with <code>background-color:White;</code> and a few words)</p>

<p><strong>Daughter</strong>: Why is it so small?</p>

<p><strong>Dad</strong>: We need more words. (pastes Lorem Ipsum)</p>

<p><strong>Daughter</strong>: (not impressed) It needs to be bigger and in the middle.</p>

<p><strong>Dad</strong>: (adds <code>padding:20px;margin-left:auto;margin-right:auto;</code> to horizontally center content) How about that?</p>

<p><strong>Daughter</strong>: Also in the middle between the top and bottom.</p>

<p><strong>Dad</strong>: (sighs heavily. googles &#8220;vertical center div css&#8221; for the 100th time. reads for 7 minutes.)</p>

<p><strong>Daughter</strong>: What&#8217;s wrong?</p>

<p><strong>Dad</strong>: Are you sure you don&#8217;t want it near the top?</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Teaching CSS</wp:post_id>
            <wp:post_date>2015-08-01 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>OKRs</title>
            <link>http://bleonard.github.io/blog/2015/07/01/okrs/</link>
            <pubDate>2015-07-01 00:00:00 -0700</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2015/07/01/okrs/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>At <a href="http://www.taskrabbit.com">TaskRabbit</a>, we have something called Objectives and Key Results or <a href="https://en.wikipedia.org/wiki/OKR">OKRs</a> for short. Many companies do the same.</p>

<p>We&#8217;ve always talked about them as one thing. As in, &#8220;What&#8217;s the OKR?&#8221; That would more or less mean, &#8220;What number are we trying to hit?&#8221; An example would be getting better at fulfilling tasks by focusing on moving up the percentage of tasks that are posted and get successfully completed.</p>

<p>This metrics-driven approach can really work but its efficacy seems related to the metric chosen. If the team believes it&#8217;s the right number to move, it works out. If they see weird loopholes or tricks, then it is less effective. Because of this, there is much discussion each time about the best metric to focus upon. Assuming we don&#8217;t focus on something all-encompassing (&#8220;Revenue&#8221;), it often has turned out to be very difficult to find exactly the right metric.</p>

<p>My recent realization is that there are objectives <em>and</em> key results. Of course, that&#8217;s obvious because it&#8217;s the name of the thing. However, in my mind, I don&#8217;t think I ever separated them to the degree that they deserve to be separated. It was always about hitting the metric and that <em>was</em> the objective. The goal, as I now understand it, should be to make the objective more of the &#8220;intent&#8221; of the situation. The key result is simply a way to &#8220;sample&#8221; that intent.</p>

<h3>Example</h3>

<p>As an example, we could have an objective of &#8220;making TaskRabbit a habit.&#8221; I think it&#8217;s helpful to make it completely about the intent and not something like &#8220;increasing lifetime value&#8221; or &#8220;doubling monthly active users&#8221; or whatever. That helps when making decisions throughout the quarter and is open to interpretation as the understanding of it evolves. The key result, then, is for sampling the progress. It could be &#8220;increase the average number of tasks per month to X&#8221; or &#8220;get Y% more people to their 4th completed task,&#8221; or &#8220;increase the average number of consecutive weeks of usage to Z&#8221; or any number of other options.</p>

<p>Each metric will have its holes, but the best metrics will be the one or two that:</p>

<ul>
<li>are highly correlated to the intent of the objective</li>
<li>can be sampled frequently to understand and measure progress</li>
<li>are easily explainable and understandable to everyone</li>
</ul>


<p>This produces a metric that doesn&#8217;t have to have its nuances explained every time we talk about it, can be on the wall in dashboard form to see if it&#8217;s going well, and that we believe is a good enough sample of the goal.</p>

<!-- more -->


<h3>Metric</h3>

<p>I think one of the trickier traps is the allure of percentages. Let&#8217;s say that we have the retention goal as noted above. One seemingly fine metric is to make up some concept called &#8220;habitors&#8221; (those that have made TaskRabbit a habit). We could define that means they get 4 tasks done in their first 2 months. The goal could be to get 50% of new users to be a habitor, up from 40%. In my experience, this fails the &#8220;can be sampled frequently to understand and measure progress&#8221; point.</p>

<p>First, the window is too long. We can only really report a percentage after someone has had their 2 months on the platform. Anything before that and I&#8217;d have to caveat it with it being a projection. The graph will also drop off towards the current date. I can explain that, but I believe it has a psychological effect on the team. Finally, the long window tends to suggest that we need to work forward from acquiring the user. We&#8217;ll start that tomorrow with a new cohort and we&#8217;ll know if we succeeded in 2 months. That&#8217;s just not the right level of urgency.</p>

<p>Second, percents as a whole seem to be a problem - at least when combined with the long time period. It&#8217;s just hard to visualize what a 1% change means. When prioritizing work, we&#8217;ll have to understand if the work will make a meaningful dent in the problem. 1% could be 10 or 10,000 people. That&#8217;s helpful to know when calculating the likely return on investment of the feature.</p>

<p>So if percents are not actionable, what is? Straight numbers. I&#8217;ve seen better success with a metric like &#8220;1000 people post their 4th task each day.&#8221; Because the time window is so large, we already know how many people signed up and will fall in the window for at least the next two months. This enables us to just set a monthly, weekly, or daily number. This fixes the mindset issue by noting there are people right now that we should be pushing up that ladder, not starting off a new cohort. It also reduces the metric lag from weeks to being able to report on the number so far <em>today</em>. Importantly, it also has a similar level of correlation to the objective.</p>

<h3>Tactics</h3>

<p>Another issue I&#8217;ve seen is focusing the objective or key result on a tactic. It&#8217;s a viable tactic to try to reach the objective by instituting some sort of &#8220;punchcard&#8221; program like at the coffee shop. Maybe you post 3 tasks and get 1 free. It&#8217;s a fine feature, but it would be a mistake to have that hypothesis and make the objective or a key result mention it.</p>

<p>Maybe a year into the program it can be a goal to &#8220;increase punchcard participation&#8221; or something, but definitely not at the beginning. It&#8217;s just one tactic at this point. If it doesn&#8217;t move the numbers, we try the next thing.</p>

<h3>Learnings</h3>

<p>It should be easy to agree on the overall intent (objective). Let&#8217;s agree that we&#8217;re going to work towards the objective and not do any unnatural acts to hit any specific number. That being said, we need to be be able to sample a few metrics (key results) to be able to course correct and drive motivation. And yes, that&#8217;s a good tactic but let&#8217;s apply it to something higher-level so we&#8217;re open to learn as we go.</p>

<p>It&#8217;s completely possible that this is already a chapter in some book or a known theory with slightly different names. Either way, this framework helped make these conversations go much more smoothly this quarter and thought I would share.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>OKRs</wp:post_id>
            <wp:post_date>2015-07-01 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Big Decimal</title>
            <link>http://bleonard.github.io/blog/2015/06/04/big-decimal/</link>
            <pubDate>2015-06-04 00:00:00 -0700</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2015/06/04/big-decimal/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>At <a href="http://www.taskrabbit.com">TaskRabbit</a>, people have hourly rates for the tasks that they do. They get paid based on the number of hours that they work.</p>

<p>We try to deal in base units to remove ambiguity. For example, we store the hourly rate in cents as an integer instead of in dollars as a double. Reporting time worked occurs in seconds. When that reporting occurs, there is a calculation to do to understand how much the Tasker needs to be paid. It might go something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FloatCalculator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">hourly_rate_in_cents</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@hourly_rate_in_cents</span> <span class="o">=</span> <span class="n">hourly_rate_in_cents</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">total_in_dollars</span><span class="p">(</span><span class="n">seconds_worked</span><span class="p">)</span>
</span><span class='line'>    <span class="n">hours</span> <span class="o">=</span> <span class="n">seconds_worked</span> <span class="o">/</span> <span class="mi">3600</span><span class="o">.</span><span class="mi">0</span> <span class="c1"># seconds in an hour</span>
</span><span class='line'>    <span class="n">cents</span> <span class="o">=</span> <span class="vi">@hourly_rate_in_cents</span> <span class="o">*</span> <span class="n">hours</span>
</span><span class='line'>    <span class="n">dollars</span> <span class="o">=</span> <span class="n">cents</span> <span class="o">/</span> <span class="mi">100</span> <span class="c1"># make it dollars</span>
</span><span class='line'>    <span class="n">dollars</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Over the years, we saw a few errors because of <a href="http://floating-point-gui.de/">limitations of floating point math</a>. Since then, we have switched to using <a href="http://ruby-doc.org/stdlib-2.1.5/libdoc/bigdecimal/rdoc/BigDecimal.html">BigDecimal</a> to prevent these kinds of errors.</p>

<p>There were no visible performance issues, but I recently got curious because all of the docs say that they are substantial. By writing the same calculator using BigDecimal, we can see the difference.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BigDecimalCalculator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">hourly_rate_in_cents</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@hourly_rate_in_cents</span> <span class="o">=</span> <span class="no">BigDecimal</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">hourly_rate_in_cents</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">total_in_dollars</span><span class="p">(</span><span class="n">seconds_worked</span><span class="p">)</span>
</span><span class='line'>    <span class="n">hours</span> <span class="o">=</span> <span class="no">BigDecimal</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">seconds_worked</span><span class="p">)</span> <span class="o">/</span> <span class="no">BigDecimal</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3600</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cents</span> <span class="o">=</span> <span class="vi">@hourly_rate_in_cents</span> <span class="o">*</span> <span class="no">BigDecimal</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">hours</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dollars</span> <span class="o">=</span> <span class="n">cents</span> <span class="o">/</span> <span class="no">BigDecimal</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dollars</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">to_f</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This does turn out to be significantly slower, so I also benchmarked marking the constants class level variables.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BigDecimalStaticCalculator</span>
</span><span class='line'>  <span class="no">CONVERSION_RATE</span> <span class="o">=</span> <span class="no">BigDecimal</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3600</span><span class="p">)</span> <span class="o">*</span> <span class="no">BigDecimal</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">hourly_rate_in_cents</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@hourly_rate_in_cents</span> <span class="o">=</span> <span class="no">BigDecimal</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">hourly_rate_in_cents</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">total_in_dollars</span><span class="p">(</span><span class="n">seconds_worked</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dollars</span> <span class="o">=</span> <span class="vi">@hourly_rate_in_cents</span> <span class="o">*</span> <span class="no">BigDecimal</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">seconds_worked</span><span class="p">)</span> <span class="o">/</span> <span class="no">CONVERSION_RATE</span>
</span><span class='line'>    <span class="n">dollars</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">to_f</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Results</h3>

<p>The results are in!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>                     <span class="n">user</span>     <span class="nb">system</span>      <span class="n">total</span>        <span class="n">real</span>
</span><span class='line'><span class="n">floats</span>               <span class="mi">0</span><span class="o">.</span><span class="mi">220000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">230000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">231120</span><span class="p">)</span>
</span><span class='line'><span class="n">big</span> <span class="n">decimal</span>          <span class="mi">4</span><span class="o">.</span><span class="mi">130000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">070000</span>   <span class="mi">4</span><span class="o">.</span><span class="mi">200000</span> <span class="p">(</span>  <span class="mi">4</span><span class="o">.</span><span class="mi">234744</span><span class="p">)</span>
</span><span class='line'><span class="n">big</span> <span class="n">decimal</span> <span class="n">static</span>   <span class="mi">2</span><span class="o">.</span><span class="mi">620000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">040000</span>   <span class="mi">2</span><span class="o">.</span><span class="mi">660000</span> <span class="p">(</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">680582</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The cost of using BigDecimal to reduce the error rate is a slowdown of 15x-20x compared to floating point math. This is not a big deal in practice. First of all, we need to get the money correct. Secondly, these are times for 250,000 calculations. Any given request only has 1, which is nothing compared to the other stuff (SQL, template rendering) happening.</p>

<p>It seems that the initialization process takes up a lot of time, though, so one technique to speed it up is to pull out constants in your BigDecimal code to the class level. These would only be initialized once, but may also affect the base memory level.</p>

<p>These classes and the benchmark itself are available as a <a href="https://gist.github.com/bleonard/6d7ffa979e9720baf71b">gist</a> if you are interested.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Big Decimal</wp:post_id>
            <wp:post_date>2015-06-04 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Queue Bus</title>
            <link>http://bleonard.github.io/blog/2015/04/02/queue-bus/</link>
            <pubDate>2015-04-02 00:00:00 -0700</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2015/04/02/queue-bus/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>At <a href="http://www.taskrabbit.com">TaskRabbit</a>, we have been using <a href="/blog/2013/09/28/resque-bus/">resque-bus</a> for about two years. It has continued to provide value by  linking components via a loosely coupled publish/subscription model. We have seen 10x the number of events going through it, but have not yet hit any scaling issues. The benefit of using the tools we already have continues to be a huge win.</p>

<p>But other teams are using other tools like <a href="http://sidekiq.org/">Sidekiq</a>. We&#8217;re also interested in trying it out, but resque-bus (unsurprisingly) was tied closely to <a href="https://github.com/resque/resque">Resque</a>. We&#8217;ve changed that by creating <a href="https://github.com/queue-bus/queue-bus">queue-bus</a> and using an adapter pattern. There are now adapters in <a href="https://github.com/queue-bus/resque-bus">resque-bus</a> and <a href="https://github.com/queue-bus/sidekiq-bus">sidekiq-bus</a>, as well as a compatible version in <a href="https://github.com/queue-bus/node-queue-bus">node-queue-bus</a>.</p>

<p>The code interactions are basically the same but can work across systems. You can even have one app using Resque and one using Sidekiq.</p>

<h4>Pick your adapter</h4>

<p>By requiring one of the adapters, it automatically gets set up to be the one for the app.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sidekiq-bus&#39;</span> <span class="c1"># (or &#39;resque-bus&#39;)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Application A publishes an event</h4>

<p>Something happens in your application and you want to let the world know. In this case, you publish an event.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># business logic</span>
</span><span class='line'><span class="no">QueueBus</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s2">&quot;user_created&quot;</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="n">first_name</span><span class="p">:</span> <span class="s2">&quot;John&quot;</span><span class="p">,</span> <span class="n">last_name</span><span class="p">:</span> <span class="s2">&quot;Smith&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># or do it later</span>
</span><span class='line'><span class="no">QueueBus</span><span class="o">.</span><span class="n">publish_at</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">hour</span><span class="o">.</span><span class="n">from_now</span><span class="p">,</span> <span class="s2">&quot;user_created&quot;</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="n">first_name</span><span class="p">:</span> <span class="s2">&quot;John&quot;</span><span class="p">,</span> <span class="n">last_name</span><span class="p">:</span> <span class="s2">&quot;Smith&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Application B subscribes to events</h4>

<p>If the same or different application is interested when an event happens, it subscribes to it by name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># initializer</span>
</span><span class='line'><span class="no">QueueBus</span><span class="o">.</span><span class="n">dispatch</span><span class="p">(</span><span class="s2">&quot;app_b&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">subscribe</span> <span class="s2">&quot;user_created&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">attributes</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># business logic</span>
</span><span class='line'>    <span class="no">NameCount</span><span class="o">.</span><span class="n">find_or_create_by_name</span><span class="p">(</span><span class="n">attributes</span><span class="o">[</span><span class="s2">&quot;last_name&quot;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">increment!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Upgrading</h3>

<p>The formats changed a little bit with the move. The last version that used the old format (0.3.7) also can adapt to the new format. This is important because you&#8217;ll have things in the queue during the transition.</p>

<p>Steps:</p>

<ul>
<li>Upgrade everyone to 0.3.7</li>
<li>Deploy all the things</li>
<li>Upgrade everyone to the newest version</li>
</ul>


<h3>More to come</h3>

<p>If people continue to like this approach and gem, we have lots of approaches and tools built on top of it that we&#8217;d be excited to make available. Let us know on <a href="https://github.com/queue-bus/queue-bus">Github</a> that you like it by watching, starring, or creating issues with questions, etc.</p>

<p>Now that we have the adapter pattern, also let us know if you are interested in making one for your background system of choice. A special thanks goes out to <a href="https://github.com/jonsgreen">Jonathan Greenberg</a> and the team at <a href="http://www.purpose.com/">purpose.com</a> who did just that to get this whole thing going.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Queue Bus</wp:post_id>
            <wp:post_date>2015-04-02 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Apple TV Dashboard</title>
            <link>http://bleonard.github.io/blog/2015/02/16/apple-tv-dashboard/</link>
            <pubDate>2015-02-16 00:00:00 -0800</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2015/02/16/apple-tv-dashboard/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>So you have all these screens around and you want to have something awesome like on those one that Panic <a href="http://www.panic.com/blog/panic-status-board-2013-edition/">made</a>. You may also already have Apple TVs on these TVs because AirPlay is an effective way to project screens in an office full of Macs. This is position we were in at <a href="https://www.taskrabbit.com">TaskRabbit</a> and we&#8217;d tried a few things.</p>

<p>The most recent iteration was to have one Mac Mini in a closet and lots of very long wires into the TVs. It displayed a web page that cycled through the content. This wasn&#8217;t bad, but had a few issues. First, the screens all had to show the same thing. I wanted to be able to have different content on each. For example, in addition to key metrics, the conference rooms would have who had the room booked or the one by customer support would have more data on the call volume. But it just isn&#8217;t worth it to have 10 Mac Minis for this purpose. The other issue is that people still wanted to use Airplay, so they would switch the input and then not switch it back to the ambient content.</p>

<p>The solution seemed clear. I needed to get the dashboards to be the screensaver of an Apple TV.</p>

<h2>TLDR</h2>

<p><a href="https://github.com/bleonard/dashing_on_appletv">Here</a> is a sample project to ties all of this up into one package.</p>

<p>It uses the new gems, <a href="https://github.com/taskrabbit/dashing-screenshots">dashing-screenshots</a> and <a href="https://github.com/taskrabbit/icloud-photo">icloud-photo</a>, to take screenshots and upload them to iCloud. These then show up on an Apple TV</p>

<div class="jumbotron">
<img alt="Sample dashboard on the wall" src="http://bleonard.github.io/images/posts/appletv/sampletv.jpg" class="bigPicture" />
</div>


<p>(not actual dashboard)</p>

<p>To make this happen, check out the <a href="https://github.com/bleonard/dashing_on_appletv">project</a> and follow the instructions there.</p>

<h2>Dashboard</h2>

<p>Looking around at <a href="https://ducksboard.com/">various</a> <a href="https://www.geckoboard.com/">dashboard</a> <a href="http://panic.com/statusboard/">apps</a> and having made a few custom solutions, I settled on <a href="http://dashing.io/">Dashing</a> this time. It looked nice by default, had a great model for adding custom content, and is written in the language we tend to use around here (Ruby).</p>

<p>The Dashing <a href="http://dashing.io/#setup">docs</a> are quite good so I won&#8217;t go into detail of how we pulled in our data. The <a href="http://dashing.io/#widgets">samples</a> are actually the best as they show a simple use case of the pattern of how to add <code>jobs</code>. I made some helpers to be able to pull in data from <a href="http://www.looker.com/">Looker</a>. By putting the actual data in Looker, I&#8217;m hoping it will allow others to maintain the metrics definitions. This will hopefully keep the dashboard up to date and relevant. An issue we&#8217;ve had in the past is that the SQL became somewhat stale.</p>

<h2>Screenshots</h2>

<p>I&#8217;d like a fully dynamic dashboard as much as the next guy, but the screensaver of an Apple TV consists only of images. Therefore, the next step was to get a screenshot of all of the dashboards that Dashing has to offer. I have worked on a similar project within our test suite and had great success with <a href="https://rubygems.org/gems/selenium-webdriver">Selenium</a>. I added <code>selenium-webdriver</code> to the Gemfile and this file to <code>lib</code>.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;fileutils&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Dashing</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Screenshot</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">directory</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@directory</span> <span class="o">=</span> <span class="n">directory</span>
</span><span class='line'>      <span class="vi">@options</span> <span class="o">=</span> <span class="n">options</span> <span class="o">||</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">capture!</span>
</span><span class='line'>      <span class="nb">require</span> <span class="s1">&#39;selenium-webdriver&#39;</span>
</span><span class='line'>      <span class="o">::</span><span class="no">FileUtils</span><span class="o">.</span><span class="n">mkdir_p</span><span class="p">(</span><span class="vi">@directory</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@driver</span> <span class="o">=</span> <span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:firefox</span>
</span><span class='line'>      <span class="no">Dir</span><span class="o">[</span><span class="s2">&quot;dashboards/**/*.erb&quot;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>        <span class="n">file</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/^dashboards\//</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">file</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/\.erb$/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">next</span> <span class="k">if</span> <span class="o">[</span><span class="s2">&quot;layout&quot;</span><span class="o">].</span><span class="n">include?</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>        <span class="n">snap</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="vi">@driver</span><span class="o">.</span><span class="n">quit</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">snap</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Fetching </span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="vi">@options</span><span class="o">[</span><span class="ss">:log</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@driver</span><span class="o">.</span><span class="n">navigate</span><span class="o">.</span><span class="n">to</span> <span class="s2">&quot;http://localhost:3030/</span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">filename</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="vi">@directory</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">path</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="s2">&quot;__&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">.png&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;  saving: </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="vi">@options</span><span class="o">[</span><span class="ss">:log</span><span class="o">]</span>
</span><span class='line'>      <span class="nb">sleep</span> <span class="mi">2</span>
</span><span class='line'>      <span class="vi">@driver</span><span class="o">.</span><span class="n">save_screenshot</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;        SCREENSHOT ERROR: </span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is called by something like this (which I added to the Rakefile):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:dashing</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;takes screenshots&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:screenshots</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">require_relative</span> <span class="s1">&#39;./lib/screenshot&#39;</span> <span class="c1"># now available with require &#39;dashing-screenshots&#39;</span>
</span><span class='line'>    <span class="no">Dashing</span><span class="o">::</span><span class="no">Screenshot</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;screenshots&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">capture!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So running <code>bundle exec rake dashing:screenshots</code> will take pictures of all the dashboards that your Dashing project knows about. I picked the folder &#8220;screenshots,&#8221; but that could also take any path in or outside of the project.</p>

<p>There are few gotchas during the process:</p>

<ul>
<li>I also tried to use <a href="http://phantomjs.org/">PhantomJS</a> and <a href="https://github.com/teampoltergeist/poltergeist">Poltergeist</a>, but these systems both have an issue with <a href="http://www.html5rocks.com/en/tutorials/eventsource/basics/">server-sent events</a> which Dashing uses to update the data.</li>
<li>For similar updating reasons, I found that the <code>sleep 2</code> or something along those lines was necessary.</li>
<li>Dashing initially loads with data from <code>history.yml</code> so that is most likely what you&#8217;ll get from this tool. Therefore, it&#8217;s necessary to have Dashing running in the background and be updating to always get &#8220;current&#8221; data.</li>
</ul>


<h2>Apple TV</h2>

<p>I figured I was in the home stretch, but Apple had other plans for me. Other the next day or so, I struggled with ways to get these screenshots updating in (near) real-time onto the TVs. There are several ways to populate the screensaver and I still can&#8217;t believe how hard it turned out to be.</p>

<p>The best chance seemed to the the Flickr option. I knew how to upload photos to Flickr. Apple TV knew how to show photos from Flickr. Done. I made a private photo album for each TV and went about uploading the right screenshots to them. But it turns out that Apple TV doesn&#8217;t poll Flickr to get the updated sets. After several tests of changing the contents of the Flickr albums and waiting for hours, they never updated. Even restarting the device didn&#8217;t seem to help. I wanted these to update on the order of every 10 minutes or so. It just didn&#8217;t work.</p>

<p>I next tried the iTunes feature. iTunes has something called &#8220;Home Sharing&#8221; and the Apple TV knows how to get it&#8217;s photos from there. Home sharing lets you point it at a folder on the system, so I thought that would work. I just had it pointed to the screenshots folder of my Dashing project. Unfortunately, the same issue occurs here where either Apple TV or iTunes does not look for changed content. The same is true of using iPhoto for Home Sharing instead of a simple folder.</p>

<p>The final feasible option for populating the screen saver was iCloud. The Apple TV will read from your Photo Stream or an album in iCloud. I ran a manual test and literally leapt with joy (it had been hours trying all the configurations) when the screensaver updated in real time as I added things to iCloud via iPhoto. It seems that, for whatever reason, the Apple TV is set to poll for changed content in this one case. So that&#8217;s how it had to be then.</p>

<h2>iCloud</h2>

<p>Feeling some momentum, the only task left to complete was to upload the screenshots automatically to the new iCloud account I created. Following the trend, this turned out to be at least 10 times harder than expected.</p>

<p>As far as I can tell, there is no server API for iCloud Photos. I found a few projects that seem to have tried to reverse engineer various protocols, but nothing definitively for photos. There may be an iOS SDK, but that was not going to help me in this case.</p>

<p>Thinking they had figured it out, I spent a long time trying to get the right set up to make <a href="https://ifttt.com/recipes/202630-send-photos-in-dropbox-to-icloud-photo-library">this IFTTT</a> recipe work. I set it up to sync from the computer&#8217;s Dropbox to an <em>always running</em> iOS device also running Dropbox. At this point I was prepared to sacrifice the iPod touch to make it work. But it seems that the recipe is simply misnamed. It puts the photos in your iOS library and not into iCloud.</p>

<h2>Applescript</h2>

<p>Resigned to the fact that the only this that would work is doing it through iPhoto, I set out to learn Applescript to automate that process. Luckily, our new VPE Paul Devine had used it heavily in a past life. We wrote this script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
</pre></td><td class='code'><pre><code class='applescript'><span class='line'><span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;iPhoto&quot;</span>
</span><span class='line'>  <span class="nb">quit</span>
</span><span class='line'>  <span class="nb">delay</span> <span class="mi">10</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nb">activate</span>
</span><span class='line'>  <span class="nb">delay</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">tell</span> <span class="nv">album</span> <span class="s2">&quot;Photos&quot;</span>
</span><span class='line'>      <span class="k">set</span> <span class="nv">thePhotos</span> <span class="k">to</span> <span class="k">get</span> <span class="nb">every</span> <span class="nv">photo</span>
</span><span class='line'>      <span class="k">repeat</span> <span class="nv">with</span> <span class="nv">aPhoto</span> <span class="k">in</span> <span class="nv">thePhotos</span>
</span><span class='line'>          <span class="k">try</span>
</span><span class='line'>              <span class="c">-- log aPhoto&#39;s name as text</span>
</span><span class='line'>              <span class="nv">remove</span> <span class="nv">aPhoto</span>
</span><span class='line'>          <span class="nb">on</span> <span class="k">error</span> <span class="nv">errMsg</span>
</span><span class='line'>              <span class="nb">log</span> <span class="s2">&quot;ERROR: &quot;</span> <span class="o">&amp;</span> <span class="nv">errMsg</span>
</span><span class='line'>          <span class="k">end</span> <span class="k">try</span>
</span><span class='line'>      <span class="k">end</span> <span class="k">repeat</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">tell</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">set</span> <span class="nv">iFolder</span> <span class="k">to</span> <span class="s2">&quot;/Users/dashboard/screenshots&quot;</span>
</span><span class='line'>  <span class="nv">import</span> <span class="nv">photo</span> <span class="k">from</span> <span class="nv">iFolder</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nb">delay</span> <span class="mi">2</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">tell</span> <span class="k">me</span> <span class="k">to</span> <span class="nv">refreshCloud</span><span class="p">(</span><span class="s2">&quot;dashboard&quot;</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;sampletv&quot;</span><span class="p">})</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nv">empty</span> <span class="nv">trash</span>
</span><span class='line'>  <span class="nb">delay</span> <span class="mi">10</span>
</span><span class='line'>  <span class="nb">quit</span>
</span><span class='line'><span class="k">end</span> <span class="k">tell</span>
</span><span class='line'>
</span><span class='line'><span class="k">on</span> <span class="nv">refreshCloud</span><span class="p">(</span><span class="nv">cloudName</span><span class="p">,</span> <span class="nv">thePhotos</span><span class="p">)</span>
</span><span class='line'>  <span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;iPhoto&quot;</span>
</span><span class='line'>      <span class="k">set</span> <span class="nv">currentPhotos</span> <span class="k">to</span> <span class="p">{}</span>
</span><span class='line'>      <span class="k">set</span> <span class="nv">currentSize</span> <span class="k">to</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">set</span> <span class="nv">hasHold</span> <span class="k">to</span> <span class="no">false</span>
</span><span class='line'>      <span class="k">tell</span> <span class="nv">album</span> <span class="nv">cloudName</span>
</span><span class='line'>          <span class="k">set</span> <span class="nv">cloudPhotos</span> <span class="k">to</span> <span class="k">get</span> <span class="nb">every</span> <span class="nv">photo</span>
</span><span class='line'>          <span class="k">set</span> <span class="nv">currentSize</span> <span class="k">to</span> <span class="nb">the</span> <span class="nb">count</span> <span class="k">of</span> <span class="nv">cloudPhotos</span>
</span><span class='line'>          <span class="k">repeat</span> <span class="nv">with</span> <span class="nv">aPhoto</span> <span class="k">in</span> <span class="nv">cloudPhotos</span>
</span><span class='line'>              <span class="k">if</span> <span class="na">name</span> <span class="k">of</span> <span class="nv">aPhoto</span> <span class="ow">is</span> <span class="s2">&quot;hold&quot;</span> <span class="k">then</span>
</span><span class='line'>                  <span class="k">set</span> <span class="nv">hasHold</span> <span class="k">to</span> <span class="no">true</span>
</span><span class='line'>              <span class="k">else</span>
</span><span class='line'>                  <span class="k">set</span> <span class="nb">the</span> <span class="k">end</span> <span class="k">of</span> <span class="nv">currentPhotos</span> <span class="k">to</span> <span class="nv">aPhoto</span>
</span><span class='line'>              <span class="k">end</span> <span class="k">if</span>
</span><span class='line'>          <span class="k">end</span> <span class="k">repeat</span>
</span><span class='line'>      <span class="k">end</span> <span class="k">tell</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">repeat</span> <span class="nv">with</span> <span class="nv">aName</span> <span class="k">in</span> <span class="nv">thePhotos</span>
</span><span class='line'>          <span class="nb">activate</span>
</span><span class='line'>          <span class="nb">delay</span> <span class="mi">1</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">tell</span> <span class="nv">album</span> <span class="s2">&quot;Last Import&quot;</span> <span class="k">to</span> <span class="nb">select</span> <span class="nv">photo</span> <span class="nv">aName</span>
</span><span class='line'>          <span class="nb">delay</span> <span class="mi">1</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;System Events&quot;</span>
</span><span class='line'>              <span class="k">tell</span> <span class="nv">process</span> <span class="s2">&quot;iPhoto&quot;</span>
</span><span class='line'>                  <span class="nv">click</span> <span class="na">menu</span> <span class="nb">item</span> <span class="s2">&quot;iCloud…&quot;</span> <span class="k">of</span> <span class="na">menu</span> <span class="s2">&quot;Share&quot;</span> <span class="k">of</span> <span class="na">menu</span> <span class="nv">bar</span> <span class="mi">1</span>
</span><span class='line'>                  <span class="nb">delay</span> <span class="mi">1</span>
</span><span class='line'>                  
</span><span class='line'>                  <span class="nv">keystroke</span> <span class="nv">cloudName</span>
</span><span class='line'>                  <span class="nb">delay</span> <span class="mi">1</span>
</span><span class='line'>                  
</span><span class='line'>                  <span class="nv">keystroke</span> <span class="p">(</span><span class="nb">ASCII character</span> <span class="mi">13</span><span class="p">)</span> <span class="c">-- return</span>
</span><span class='line'>                  <span class="nb">delay</span> <span class="mi">1</span>
</span><span class='line'>                  
</span><span class='line'>                  <span class="nv">keystroke</span> <span class="p">(</span><span class="nb">ASCII character</span> <span class="mi">13</span><span class="p">)</span> <span class="c">-- return</span>
</span><span class='line'>                  <span class="nb">delay</span> <span class="mi">3</span>
</span><span class='line'>              <span class="k">end</span> <span class="k">tell</span>
</span><span class='line'>          <span class="k">end</span> <span class="k">tell</span>
</span><span class='line'>      <span class="k">end</span> <span class="k">repeat</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="ow">not</span> <span class="nv">hasHold</span> <span class="k">then</span>
</span><span class='line'>          <span class="c">-- need to let iCloud catch up</span>
</span><span class='line'>          <span class="nb">delay</span> <span class="mi">100</span>
</span><span class='line'>      <span class="k">end</span> <span class="k">if</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nb">delay</span> <span class="mi">20</span> <span class="c">-- make sure all uploaded and stuff</span>
</span><span class='line'>      <span class="nb">select</span> <span class="nv">album</span> <span class="nv">cloudName</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">set</span> <span class="nv">updatedSize</span> <span class="k">to</span> <span class="nb">the</span> <span class="nb">count</span> <span class="k">of</span> <span class="nb">every</span> <span class="nv">photo</span> <span class="k">in</span> <span class="nv">album</span> <span class="nv">cloudName</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="nv">updatedSize</span> <span class="o">&gt;</span> <span class="nv">currentSize</span> <span class="k">then</span>
</span><span class='line'>          <span class="c">-- for some reason, it doesn&#39;t always actually upload</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nb">count</span> <span class="k">of</span> <span class="nv">currentPhotos</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">then</span>
</span><span class='line'>              <span class="k">repeat</span> <span class="nv">with</span> <span class="nv">aPhoto</span> <span class="k">in</span> <span class="nv">currentPhotos</span>
</span><span class='line'>                  <span class="nb">activate</span>
</span><span class='line'>                  <span class="nb">delay</span> <span class="mi">1</span>
</span><span class='line'>                  <span class="nb">select</span> <span class="nv">aPhoto</span>
</span><span class='line'>                  <span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;System Events&quot;</span>
</span><span class='line'>                      <span class="nb">delay</span> <span class="mi">1</span>
</span><span class='line'>                      <span class="nv">keystroke</span> <span class="p">(</span><span class="nb">ASCII character</span> <span class="mi">127</span><span class="p">)</span> <span class="c">-- delete</span>
</span><span class='line'>                      <span class="nb">delay</span> <span class="mi">1</span>
</span><span class='line'>                      <span class="nv">keystroke</span> <span class="s2">&quot;d&quot;</span> <span class="nv">using</span> <span class="nv">command</span> <span class="nv">down</span> <span class="c">-- yes, really</span>
</span><span class='line'>                      <span class="nb">delay</span> <span class="mi">3</span>
</span><span class='line'>                  <span class="k">end</span> <span class="k">tell</span>
</span><span class='line'>              <span class="k">end</span> <span class="k">repeat</span>
</span><span class='line'>          <span class="k">end</span> <span class="k">if</span>
</span><span class='line'>      <span class="k">end</span> <span class="k">if</span>
</span><span class='line'>      
</span><span class='line'>  <span class="k">end</span> <span class="k">tell</span>
</span><span class='line'><span class="k">end</span> <span class="nv">refreshCloud</span>
</span></code></pre></td></tr></table></div></figure>


<p>It does the following:</p>

<ul>
<li>closes (if necessary) iPhoto</li>
<li>launches iPhoto</li>
<li>imports the &#8220;screenshots&#8221; folder into iCloud</li>
<li>switches to the &#8220;dashboard&#8221; iCloud album</li>
<li>notes all the photos currently in there</li>
<li>switches to the &#8220;Last Import&#8221; album</li>
<li>finds the picture named &#8220;sampletv&#8221;</li>
<li>click Share&#8230; iCloud and picks the &#8220;dashboard&#8221; and adds it</li>
<li>waits for a minute</li>
<li>goes through all the old ones in &#8220;dashboard&#8221; and removes them</li>
</ul>


<p>It waits for a minute because I found that the Apple TV screensaver is not able to recover from an empty set. It will switch permanently to National Geographic photos. I&#8217;m not sure how this is possible other than some sort of lag in iCloud. Another approach that I ended up going with is to use the &#8220;Shifting Tiles&#8221; screensaver and always made sure to always have 1 image that never got removed in the album. I set up the Applescript so that if you make &#8220;hold&#8221; the image&#8217;s name, it will leave it alone. So try that if you keep seeing beautiful whale pictures instead of your dashboard.</p>

<p>Note that is also assumes that the iCloud albums already exist. I made those manually.</p>

<p>It&#8217;s obviously exhausting that this is how it had to be. However, I&#8217;m sure very little resources are being given to Applescript these days and I find it amazing that it&#8217;s still able to automate everything in OS X.</p>

<h2>Gems</h2>

<p>The final step was to automate this in some way. I decided to keep it in Ruby.</p>

<p>To do that and reduce the maintenance of the Applescript, I made it so that the script was more configurable. Maybe it&#8217;s a terrible idea, but it turned out pretty well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;fileutils&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;tempfile&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">ICloudPhoto</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Sync</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">SCRIPT</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../../applescript/sync.applescript&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">),</span> <span class="n">encoding</span><span class="p">:</span> <span class="s2">&quot;UTF-8&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">directory</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@directory</span> <span class="o">=</span> <span class="n">directory</span>
</span><span class='line'>      <span class="vi">@targets</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">icloud_name</span><span class="p">,</span> <span class="n">image_names</span><span class="p">)</span>
</span><span class='line'>      <span class="n">image_names</span> <span class="o">=</span> <span class="o">[</span><span class="n">image_names</span><span class="o">].</span><span class="n">flatten</span>
</span><span class='line'>      <span class="vi">@targets</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">icloud_name</span><span class="p">,</span> <span class="n">image_names</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">upload!</span>
</span><span class='line'>      <span class="n">tmpfile</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="n">uploader</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="n">script</span> <span class="o">=</span> <span class="no">SCRIPT</span><span class="o">.</span><span class="n">dup</span>
</span><span class='line'>      <span class="n">script</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="s2">&quot;/Users/dashboard/screenshots&quot;</span><span class="p">,</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="vi">@directory</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">marker</span> <span class="o">=</span> <span class="s1">&#39;tell me to refreshCloud(&quot;dashboard&quot;, {&quot;sampletv&quot;})&#39;</span>
</span><span class='line'>      <span class="n">index</span> <span class="o">=</span> <span class="n">script</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">marker</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">script</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="n">marker</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@targets</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tuple</span><span class="o">|</span>
</span><span class='line'>        <span class="n">icloud_name</span><span class="p">,</span> <span class="n">image_names</span> <span class="o">=</span> <span class="n">tuple</span>
</span><span class='line'>        <span class="n">files</span> <span class="o">=</span> <span class="n">image_names</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="s2">&quot;</span><span class="se">\&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">val</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\t</span><span class="s2">tell me to refreshCloud(</span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">icloud_name</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">, {</span><span class="si">#{</span><span class="n">files</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">})</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">script</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">tmpfile</span> <span class="o">=</span> <span class="no">Tempfile</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;applescript&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">tmpfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">script</span><span class="p">)</span>
</span><span class='line'>      <span class="n">tmpfile</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">uploader</span> <span class="o">=</span> <span class="no">Tempfile</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;uploader&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">uploader</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;osacompile -o </span><span class="si">#{</span><span class="n">uploader</span><span class="o">.</span><span class="n">path</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">tmpfile</span><span class="o">.</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="sb">`osacompile -o </span><span class="si">#{</span><span class="n">uploader</span><span class="o">.</span><span class="n">path</span><span class="si">}</span><span class="sb"> </span><span class="si">#{</span><span class="n">tmpfile</span><span class="o">.</span><span class="n">path</span><span class="si">}</span><span class="sb">`</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;osascript </span><span class="si">#{</span><span class="n">uploader</span><span class="o">.</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="sb">`osascript </span><span class="si">#{</span><span class="n">uploader</span><span class="o">.</span><span class="n">path</span><span class="si">}</span><span class="sb">`</span>
</span><span class='line'>    <span class="k">ensure</span>
</span><span class='line'>      <span class="n">tmpfile</span><span class="o">.</span><span class="n">unlink</span>  <span class="k">if</span> <span class="n">tmpfile</span>
</span><span class='line'>      <span class="n">uploader</span><span class="o">.</span><span class="n">unlink</span> <span class="k">if</span> <span class="n">uploader</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the Applescript was checked into the project. This code does the following:</p>

<ul>
<li>reads the script from the file.</li>
<li>replaces my directory with the given &#8220;real&#8221; one</li>
<li>removes this &#8220;dashboard&#8221; and &#8220;sampletv&#8221; business and keeps a marker</li>
<li>for every iCloud to photo(s) mapping, it adds a line to the script in memory to call the <code>refreshCloud</code> method</li>
<li>saves that all to a temp file</li>
<li>compiles the temp file to another temp file</li>
<li>runs the compiled version</li>
</ul>


<p>It is called like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:dashing</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;takes screenshots&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:screenshots</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">require</span> <span class="s1">&#39;dashing-screenshots&#39;</span>
</span><span class='line'>    <span class="no">Dashing</span><span class="o">::</span><span class="no">Screenshot</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;screenshots&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">capture!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;uploads screenshots to iCloud&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:upload</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">require</span> <span class="s1">&#39;icloud-photo&#39;</span>
</span><span class='line'>      <span class="n">cloud</span> <span class="o">=</span> <span class="no">ICloudPhoto</span><span class="o">::</span><span class="no">Sync</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;screenshots&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># put the sampletv image in the dashboard album</span>
</span><span class='line'>      <span class="n">cloud</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s2">&quot;dashboard&quot;</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;sampletv&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cloud</span><span class="o">.</span><span class="n">upload!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;record and upload dashboards&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="n">cron</span><span class="p">:</span> <span class="o">[</span><span class="ss">:screenshots</span><span class="p">,</span> <span class="ss">:upload</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then it can be automated using the <a href="https://github.com/javan/whenever">whenever</a> gem and running <code>whenever -w</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">every</span> <span class="mi">10</span><span class="o">.</span><span class="n">minutes</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">rake</span> <span class="s2">&quot;dashing:cron&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s important to be sure to be running <code>dashing start</code> as well.
I also found it helpful to use <a href="http://semaja2.net/projects/insomniaxinfo/">Insomnia X</a> to not go to sleep when the laptop lid is shut.</p>

<h2>Apple TV setup</h2>

<p>Just a few notes on the settings I used when configuring the Apple TV</p>

<p><em>Restore to newest software</em></p>

<p><em>General</em></p>

<ul>
<li>Set up keyboard</li>
<li>Set name</li>
<li>Sleep after: never</li>
<li>Software updates - Update automatically: on</li>
</ul>


<p><em>Screensaver</em></p>

<ul>
<li>Start after: 2 minutes</li>
<li>Photos - iCloud photos - Login - Pick &#8220;dashboard&#8221; album</li>
<li>Classic  - Fade through black - 20 seconds</li>
</ul>


<p><em>AirPlay</em></p>

<ul>
<li>Conference room display - off</li>
<li>Play iTunes from the cloud - off</li>
</ul>


<p>The &#8220;Classic&#8221; screensaver will show one image at a time. This works pretty well if you are taking a picture of the whole dashboard. I&#8217;ve also had success making a &#8220;dashboard&#8221; out of each widget and taking several screenshots and uploading all of them. In this case, I would use the &#8220;Shifting Tiles&#8221; noted above to solve the iCloud empty issue. This ends up looking like the original dashboard but it moves around a bit.</p>

<h2>It works</h2>

<p>We now have an old laptop with the Dashing project and iPhoto. Every ten minutes, the screen flashes and firefox pops up and takes some screenshots. Then iPhoto pops up and things start moving around. Within a few minutes of that, the screensaver on all the Apple TVs automatically refresh to the new content.</p>

<p>It&#8217;s not pretty, but it does work. One of my fears (and hopes) is that somebody emails me a better way to make this happen. I spent about three days figuring this out but would gladly throw it away for a better solution. Ideally, there would be one that did not involved this running laptop and especially not this Applescript business.</p>

<p>To be clear, though, I don&#8217;t see it as time wasted. I believe it&#8217;s exceptionally important to increase visibility about the health of the business. By doing so in the most pervasive way I could think of, it may help set the context for people as they make decisions throughout the day. I&#8217;d say that&#8217;s worth one old laptop and some janky Applescript.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Apple TV Dashboard</wp:post_id>
            <wp:post_date>2015-02-16 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Translating Rails fields</title>
            <link>http://bleonard.github.io/blog/2015/01/06/translating-rails-fields/</link>
            <pubDate>2015-01-06 00:00:00 -0800</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2015/01/06/translating-rails-fields/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>When we launched <a href="https://www.taskrabbit.com">TaskRabbit</a> in London, one of our goals was to have a fully localized product. There are enough differences between British English and US English to not cut (m)any corners. Of course, it&#8217;s even more important in completely different languages.</p>

<p>An issue that I noticed one day was in our signup flow. It said &#8220;Last name is required.&#8221; This was caused by a blank field and a model-level validation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="n">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It was working as expected, but it should have said &#8220;Surname is required.&#8221; That&#8217;s what they want across the pond.</p>

<p>We translate all of our &#8220;en&#8221; locale into &#8220;en-GB&#8221; but this wasn&#8217;t there because it more or less works automatically. <a href="http://api.rubyonrails.org/classes/ActiveModel/Validations.html">Active Model</a> does a <code>humanize</code> call on the field name. To translate this field, which we had done on stranger field names, you add it to a YML locale file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">en</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">activerecord</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">attributes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">user</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">last_name</span><span class="p-Indicator">:</span> <span class="s">&#39;Last</span><span class="nv"> </span><span class="s">Name&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is for the one model, but there is <a href="https://github.com/rails/rails/blob/ebaf4e40cdcb80ebe16014a2c979f688213d7b92/activemodel/lib/active_model/translation.rb#L61">fallback code</a> in Active Model that also allows you to define the name for all models. You can do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">en</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">attributes</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">last_name</span><span class="p-Indicator">:</span> <span class="s">&#39;Last</span><span class="nv"> </span><span class="s">Name&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This has the advantage of also working for another model as well as an Active Model <a href="https://blog.engineyard.com/2014/keeping-your-rails-controllers-dry-with-services">service objects</a> in one shot.</p>

<!-- more -->


<h2>Generate a File</h2>

<p>So I wrote some code to make sure all fields were defined in our &#8220;en&#8221; locale. This would ensure that they would get translated into &#8220;en-GB&#8221; and others. The values are just what Active Model would have done anyway, so there&#8217;s no functional difference. It does. however, prevent us from missing anything because of Rails magic.</p>

<p>Now we have a rake job that calls <code>Translation::Fields.new.generate!</code> to:</p>

<ul>
<li>load all the models that have attributes/validations</li>
<li>clear out the file and reload I18n</li>
<li>go through all the models and look at each one&#8217;s attributes</li>
<li>if not already defined, add the humanized version to the file</li>
</ul>


<p>Here is the code. It&#8217;s been working well so far.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Translation</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Fields</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>      <span class="n">load_all_models</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">generate!</span>
</span><span class='line'>      <span class="n">clear_file</span>
</span><span class='line'>      <span class="no">I18n</span><span class="o">.</span><span class="n">backend</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:init_translations</span><span class="p">)</span> <span class="c1"># make sure init&#39;d</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">old_locale</span> <span class="o">=</span> <span class="no">I18n</span><span class="o">.</span><span class="n">locale</span>
</span><span class='line'>      <span class="no">I18n</span><span class="o">.</span><span class="n">locale</span> <span class="o">=</span> <span class="s2">&quot;en&quot;</span>
</span><span class='line'>      <span class="n">load_children</span><span class="p">(</span><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">hash</span> <span class="o">=</span> <span class="n">build_hash</span>
</span><span class='line'>      <span class="n">write_file</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>      <span class="nb">hash</span>
</span><span class='line'>    <span class="k">ensure</span>
</span><span class='line'>      <span class="no">I18n</span><span class="o">.</span><span class="n">locale</span> <span class="o">=</span> <span class="n">old_locale</span> <span class="k">if</span> <span class="n">old_locale</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">file_name</span>
</span><span class='line'>      <span class="vi">@file_name</span> <span class="o">||=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;config&quot;</span><span class="p">,</span>
</span><span class='line'>                                     <span class="s2">&quot;locales&quot;</span><span class="p">,</span>
</span><span class='line'>                                     <span class="s2">&quot;generated_default_fields.en.yml&quot;</span>
</span><span class='line'>                                    <span class="p">)</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">clear_file</span>
</span><span class='line'>      <span class="n">write_file</span><span class="p">({})</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">write_file</span><span class="p">(</span><span class="n">to_file</span><span class="p">)</span>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>        <span class="n">file</span><span class="o">.</span><span class="n">write</span><span class="p">({</span><span class="s1">&#39;en&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="s1">&#39;attributes&#39;</span> <span class="o">=&gt;</span> <span class="n">to_file</span><span class="p">}}</span><span class="o">.</span><span class="n">ya2yaml</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">load_all_models</span>
</span><span class='line'>      <span class="c1"># models</span>
</span><span class='line'>      <span class="no">Dir</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;/app/models/**/*.rb&#39;</span><span class="p">)</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span>
</span><span class='line'>        <span class="n">require_dependency</span> <span class="n">path</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># can load more objects that have validations here</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">load_children</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span>
</span><span class='line'>      <span class="n">klass</span><span class="o">.</span><span class="n">subclasses</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">klass</span><span class="o">|</span>
</span><span class='line'>        <span class="n">attributes</span> <span class="o">=</span> <span class="n">klass</span><span class="o">.</span><span class="n">attribute_names</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">attributes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute</span><span class="o">|</span>
</span><span class='line'>          <span class="n">current</span> <span class="o">=</span> <span class="no">I18n</span><span class="o">.</span><span class="n">t</span><span class="p">(</span><span class="s2">&quot;attributes.</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">default</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">next</span> <span class="k">if</span> <span class="n">current</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>          <span class="n">all_keys</span><span class="o">[</span><span class="n">attribute</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span> <span class="o">=</span> <span class="n">attribute</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">build_hash</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>      <span class="n">all_keys</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>        <span class="n">out</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="n">humanize</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">out</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">all_keys</span>
</span><span class='line'>      <span class="vi">@all_keys</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Translating Rails fields</wp:post_id>
            <wp:post_date>2015-01-06 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Rails Dead Columns</title>
            <link>http://bleonard.github.io/blog/2014/11/13/rails-dead-columns/</link>
            <pubDate>2014-11-13 00:00:00 -0800</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2014/11/13/rails-dead-columns/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>It happens. This column has to go. But in a <a href="http://rubyonrails.org/">Rails</a> app, there are a few problems. You can&#8217;t just drop it.</p>

<p>My first expectation is that we would create a <a href="http://guides.rubyonrails.org/migrations.html">migration</a> and do something like this.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class RemoveMiddleNameFromUsers &lt; ::ActiveRecord::Migration
</span><span class='line'>  def change
</span><span class='line'>    remove_column :users, :middle_name
</span><span class='line'>    remove_column :users, :gender
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>This will generally be fine but there are a few practical issues.</p>

<ul>
<li>Is any of my code still using this column?</li>
<li>What happens to the production code in the time between the migration and new code using it?</li>
</ul>


<h2>Still in use?</h2>

<p>The obvious thing to do is search the code for use of this column name, but sometimes that can be tricky. The name would be fairly common leading to difficult searching. You could also be accessing it in a fairly inconsistent way like via <code>send</code> and string interpolation or something.</p>

<p>The best way that we&#8217;ve found out that we are still using something is to freak out in test/development/staging if it is accessed. If we didn&#8217;t have the test coverage, we&#8217;d probably log it&#8217;s usage in production and check the logs for use.</p>

<!-- more -->


<h2>Deploy</h2>

<p>Even if you aren&#8217;t using the column, there&#8217;s still an issue during the deploy window after the migration and before the server reboots. Rails has cached all the columns from right after it booted up so that it can know what to write to the table when you save a new record (among other things).</p>

<p>This means that it still assumes that column is there and when it reads/writes it will look for or set that column. Obviously this will not work. So what we need is two deploys wherein we first tell ActiveRecord that column no longer exists. Then sometime in the future, we can actually remove it.</p>

<p>Incidentally, I&#8217;ve noticed a read-only (<code>def readonly?</code> returns <code>true</code>) ActiveRecord model always does a <code>SELECT *</code> instead of looking for specific columns and doesn&#8217;t have this issue.</p>

<h2>Code</h2>

<p>Here is the code use for these purposes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Mixins</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">DeadColumns</span>
</span><span class='line'>    <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">DeadColumnError</span> <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># to run in config/initializers to remove things globally</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">All</span>
</span><span class='line'>      <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">init</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">if</span> <span class="vi">@active_record_init</span>
</span><span class='line'>          <span class="vi">@active_record_init</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>          <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:include</span><span class="p">,</span> <span class="no">Mixins</span><span class="o">::</span><span class="no">DeadColumns</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">death_watch</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">columns</span><span class="p">)</span>
</span><span class='line'>          <span class="n">init</span>
</span><span class='line'>          <span class="vi">@registered_tables</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>          <span class="vi">@registered_tables</span><span class="o">[</span><span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span> <span class="o">=</span> <span class="n">columns</span><span class="o">.</span><span class="n">collect</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">table_columns_registered</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>          <span class="vi">@registered_tables</span><span class="o">[</span><span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span> <span class="o">||</span> <span class="o">[]</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>      <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>        <span class="n">alias_method_chain</span> <span class="ss">:columns</span><span class="p">,</span> <span class="ss">:death</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">dead_column_list</span>
</span><span class='line'>        <span class="k">return</span> <span class="vi">@dead_columns</span> <span class="k">if</span> <span class="vi">@dead_columns</span>
</span><span class='line'>        <span class="vi">@dead_columns</span> <span class="o">=</span> <span class="no">Mixins</span><span class="o">::</span><span class="no">DeadColumns</span><span class="o">::</span><span class="no">All</span><span class="o">.</span><span class="n">table_columns_registered</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">table_name</span><span class="p">)</span><span class="o">.</span><span class="n">dup</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">columns_with_death</span>
</span><span class='line'>        <span class="vi">@columns_with_death</span> <span class="o">||=</span> <span class="n">columns_without_death</span><span class="o">.</span><span class="n">reject</span><span class="p">{</span><span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="n">dead_column_list</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">dead_columns</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>        <span class="n">to_kill</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">collect</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">)</span>
</span><span class='line'>        <span class="n">dead_column_list</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">to_kill</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">to_kill</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">col</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">col</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>            <span class="k">raise</span> <span class="no">DeadColumnError</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">#</span><span class="si">#{</span><span class="n">col</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">col</span><span class="si">}</span><span class="s2">?&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>            <span class="k">raise</span> <span class="no">DeadColumnError</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">#</span><span class="si">#{</span><span class="n">col</span><span class="si">}</span><span class="s2">?&quot;</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">col</span><span class="si">}</span><span class="s2">_changed?&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>            <span class="k">raise</span> <span class="no">DeadColumnError</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">#</span><span class="si">#{</span><span class="n">col</span><span class="si">}</span><span class="s2">?&quot;</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># reset all these ActiveRecord caches</span>
</span><span class='line'>        <span class="vi">@dynamic_methods_hash</span> <span class="o">=</span> <span class="vi">@columns_hash</span> <span class="o">=</span> <span class="vi">@column_names</span> <span class="o">=</span> <span class="vi">@content_columns</span> <span class="o">=</span> <span class="vi">@column_defaults</span> <span class="o">=</span> <span class="vi">@columns</span> <span class="o">=</span> <span class="vi">@columns_with_death</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">attribute_names</span>
</span><span class='line'>      <span class="k">super</span> <span class="o">-</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">dead_column_list</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">as_json</span><span class="p">(</span><span class="n">options</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>      <span class="n">options</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>      <span class="n">options</span><span class="o">[</span><span class="ss">:only</span><span class="o">]</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">column_names</span> <span class="k">if</span> <span class="n">options</span><span class="o">[</span><span class="ss">:only</span><span class="o">].</span><span class="n">nil?</span>
</span><span class='line'>      <span class="k">super</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then in an initializer, we do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/dead_columns.rb</span>
</span><span class='line'>
</span><span class='line'><span class="no">Mixins</span><span class="o">::</span><span class="no">DeadColumns</span><span class="o">::</span><span class="no">All</span><span class="o">.</span><span class="n">death_watch</span><span class="p">(</span><span class="ss">:users</span><span class="p">,</span> <span class="ss">:middle_name</span><span class="p">,</span> <span class="ss">:gender</span><span class="p">)</span>
</span><span class='line'><span class="no">Mixins</span><span class="o">::</span><span class="no">DeadColumns</span><span class="o">::</span><span class="no">All</span><span class="o">.</span><span class="n">death_watch</span><span class="p">(</span><span class="ss">:tasks</span><span class="p">,</span> <span class="ss">:old_price_info</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We used to mix this in to each model, so it was more like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mixins</span><span class="o">::</span><span class="no">DeadColumns</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">dead_columns</span> <span class="ss">:middle_name</span><span class="p">,</span> <span class="o">::</span><span class="n">gender</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This worked with a slightly modified version of the above code. We stopped using that version, though, when we switched to heavily using <a href="/blog/2014/02/11/rails-4-engines/">engines</a>, and now have many <code>User</code> (and other) models. The initializer works better to make sure it hits all of them.</p>

<h2>Conclusion</h2>

<p>Hopefully, this is helpful as an example of some code to deploy so you can safely remove your columns. It feels good to drop those columns and now you can do it without the pain.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Rails Dead Columns</wp:post_id>
            <wp:post_date>2014-11-13 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Rails Stats</title>
            <link>http://bleonard.github.io/blog/2014/11/07/rails-stats/</link>
            <pubDate>2014-11-07 00:00:00 -0800</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2014/11/07/rails-stats/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>Summary: I extracted and improved on the Rails stats tool. The code is <a href="https://github.com/bleonard/rails_stats/">here</a>.</p>

<h3>Process</h3>

<p>The other day, I was curious about how our codebase had evolved over the years and knew about the <code>rake stats</code> command in Rails. So I checked out a git sha from 2010 and ran the command. Of course the gems weren&#8217;t installed. So I ran <code>bundle install</code>. It said it couldn&#8217;t find <a href="gemcutter.org">gemcutter.org</a>. That&#8217;s when I knew it wasn&#8217;t going to work out. Even if I switched it to use current standards, at least one of those gems was going to be completely gone or a million of other issues.</p>

<p>I figured that an external tool to do the same thing should be easy and I was right. I copied the 3 files related to that rake job to a new project. The code just took directories in so the only dependence on being actually <em>in</em> the Rails project was a <code>Rails.root</code> call at the beginning. I switched it to be passed in from the command line and I was done!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Name                 | Lines |   LOC | Classes | Methods | M/C | LOC/M |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Controllers          |  1848 |  1483 |      32 |     174 |   5 |     6 |
</span><span class='line'>| Helpers              |  2257 |  1892 |      45 |     245 |   5 |     5 |
</span><span class='line'>| Models               |  4584 |  3509 |      61 |     526 |   8 |     4 |
</span><span class='line'>| Libraries            |  2987 |  2272 |      30 |     287 |   9 |     5 |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Total                | 11676 |  9156 |     168 |    1232 |   7 |     5 |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>  Code LOC: 9156     Test LOC: 0     Code to Test Ratio: 1:0.0
</span></code></pre></td></tr></table></div></figure>


<p>&#8230; except things were missing. The tool that comes with Rails has a certain set of directories and it only looks for code there. It included the normal Rails stuff like models and controllers but was missing anything that strayed from the prescribed structure. These pieces were missing in the default tool:</p>

<ul>
<li>Anything added to the app directory (jobs, observers)</li>
<li>Rspec tests (it only supports Test::Unit)</li>
<li>Cucumber features</li>
<li>Any code in <a href="/blog/2014/02/11/rails-4-engines/">Engines</a></li>
</ul>


<p>It turned into a bit of time sink, but was a fun project. By modifying it to use more introspection of the directory structure, I was able to cover all the pieces of the app.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake stats<span class="o">[</span>/path/to/app/<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Directory: /path/to/app/
</span><span class='line'>
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Name                 | Lines |   LOC | Classes | Methods | M/C | LOC/M |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Controllers          |  1848 |  1483 |      32 |     174 |   5 |     6 |
</span><span class='line'>| Helpers              |  2257 |  1892 |      45 |     245 |   5 |     5 |
</span><span class='line'>| Jobs                 |   399 |   295 |      11 |      33 |   3 |     6 |
</span><span class='line'>| Models               |  4584 |  3509 |      61 |     526 |   8 |     4 |
</span><span class='line'>| Observers            |    42 |    22 |       2 |       5 |   2 |     2 |
</span><span class='line'>| Libraries            |  2987 |  2272 |      30 |     287 |   9 |     5 |
</span><span class='line'>| Configuration        |  1233 |   669 |       4 |      17 |   4 |    37 |
</span><span class='line'>| Spec Support         |  1416 |  1152 |       4 |      30 |   7 |    36 |
</span><span class='line'>| Integration Tests    |    91 |    73 |       0 |       1 |   0 |    71 |
</span><span class='line'>| Lib Tests            |   101 |    83 |       0 |       1 |   0 |    81 |
</span><span class='line'>| Model Tests          |  3397 |  2522 |       0 |      18 |   0 |   138 |
</span><span class='line'>| Cucumber Support     |   739 |   521 |       0 |       1 |   0 |   519 |
</span><span class='line'>| Cucumber Features    |  2711 |  2487 |      29 |     145 |   5 |    15 |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Total                | 21805 | 16980 |     218 |    1483 |   6 |     9 |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>  Code LOC: 10142     Test LOC: 6838     Code to Test Ratio: 1:0.7
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>Things it knows about</h3>

<ul>
<li>Any concepts you&#8217;ve added within an <code>app</code> directory</li>
<li>Configuration files</li>
<li>Library files</li>
<li>Gems that you&#8217;ve embedded in the project</li>
<li>Engines and their code</li>
<li>RSpec/Unit/Cucumber Tests</li>
</ul>


<h3>Example output</h3>

<p>Here are some open source Rails projects an their output.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake stats<span class="o">[</span>/users/brian/examples/diaspora/<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Directory: /users/brian/examples/diaspora
</span><span class='line'>
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Name                 | Lines |   LOC | Classes | Methods | M/C | LOC/M |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Collections          |   259 |   198 |       0 |      56 |   0 |     1 |
</span><span class='line'>| Helpers              |  1863 |  1478 |       0 |     218 |   0 |     4 |
</span><span class='line'>| Models               |  4694 |  3517 |      55 |     580 |  10 |     4 |
</span><span class='line'>| Pages                |   201 |   158 |       0 |      21 |   0 |     5 |
</span><span class='line'>| Controllers          |  2797 |  2168 |      40 |     208 |   5 |     8 |
</span><span class='line'>| Mailers              |   313 |   263 |      13 |      32 |   2 |     6 |
</span><span class='line'>| Presenters           |   516 |   425 |      18 |      71 |   3 |     3 |
</span><span class='line'>| Uploaders            |    84 |    63 |       2 |       9 |   4 |     5 |
</span><span class='line'>| Workers              |   600 |   399 |      32 |      33 |   1 |    10 |
</span><span class='line'>| Javascripts          |  7550 |  4941 |       0 |     741 |   0 |     4 |
</span><span class='line'>| Libraries            |  7031 |  4890 |      69 |     701 |  10 |     4 |
</span><span class='line'>| Configuration        |  2556 |   833 |       5 |      10 |   2 |    81 |
</span><span class='line'>| Controller Tests     |  4628 |  3775 |       0 |       2 |   0 |  1885 |
</span><span class='line'>| Spec Support         |  1141 |   900 |       6 |      56 |   9 |    14 |
</span><span class='line'>| Helper Tests         |   771 |   615 |       0 |       6 |   0 |   100 |
</span><span class='line'>| Integration Tests    |   891 |   647 |       0 |      14 |   0 |    44 |
</span><span class='line'>| Lib Tests            |  4076 |  3259 |       2 |       4 |   2 |   812 |
</span><span class='line'>| Other Tests          |   120 |   101 |       0 |       0 |   0 |     0 |
</span><span class='line'>| Mailer Tests         |   412 |   328 |       0 |       0 |   0 |     0 |
</span><span class='line'>| Model Tests          |  6120 |  4964 |       0 |       1 |   0 |  4962 |
</span><span class='line'>| Presenter Tests      |   353 |   303 |       0 |       0 |   0 |     0 |
</span><span class='line'>| Worker Tests         |   821 |   648 |       0 |       0 |   0 |     0 |
</span><span class='line'>| Cucumber Features    |  2157 |  1863 |      47 |     155 |   3 |    10 |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Total                | 49954 | 36736 |     289 |    2918 |  10 |    10 |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>  Code LOC: 19333     Test LOC: 17403     Code to Test Ratio: 1:0.9
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake stats<span class="o">[</span>/users/brian/examples/discourse<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Directory: /users/brian/examples/discourse
</span><span class='line'>
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Name                 | Lines |   LOC | Classes | Methods | M/C | LOC/M |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Controllers          |  5005 |  3812 |      56 |     416 |   7 |     7 |
</span><span class='line'>| Helpers              |   286 |   218 |       0 |      32 |   0 |     4 |
</span><span class='line'>| Jobs                 |  1830 |  1343 |      53 |     114 |   2 |     9 |
</span><span class='line'>| Mailers              |   438 |   340 |       7 |      24 |   3 |    12 |
</span><span class='line'>| Models               | 12378 |  8393 |     123 |     983 |   7 |     6 |
</span><span class='line'>| Serializers          |  2809 |  2223 |      73 |     374 |   5 |     3 |
</span><span class='line'>| Services             |  1353 |  1060 |      20 |     106 |   5 |     8 |
</span><span class='line'>| Javascripts          | 21722 | 13649 |       0 |    1844 |   0 |     5 |
</span><span class='line'>| Libraries            | 35298 | 27521 |     189 |    2565 |  13 |     8 |
</span><span class='line'>| Configuration        |  1758 |  1179 |       6 |      12 |   2 |    96 |
</span><span class='line'>| Other Tests          | 12998 |  9830 |      20 |      41 |   2 |   237 |
</span><span class='line'>| Controller Tests     |  7673 |  5911 |       0 |       4 |   0 |  1475 |
</span><span class='line'>| Spec Support         |   707 |   560 |       1 |      16 |  16 |    33 |
</span><span class='line'>| Helper Tests         |    88 |    71 |       0 |       0 |   0 |     0 |
</span><span class='line'>| Integration Tests    |   307 |   235 |       0 |       1 |   0 |   233 |
</span><span class='line'>| Job Tests            |  1343 |  1017 |       3 |       9 |   3 |   111 |
</span><span class='line'>| Mailer Tests         |   421 |   302 |       0 |       1 |   0 |   300 |
</span><span class='line'>| Model Tests          | 11236 |  8599 |       2 |      49 |  24 |   173 |
</span><span class='line'>| Serializer Tests     |   297 |   236 |       0 |       2 |   0 |   116 |
</span><span class='line'>| Service Tests        |  1767 |  1406 |       0 |       2 |   0 |   701 |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Total                | 119714| 87905 |     553 |    6595 |  11 |    11 |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>  Code LOC: 59738     Test LOC: 28167     Code to Test Ratio: 1:0.5
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake stats<span class="o">[</span>/users/brian/examples/gitlabhq<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Directory: /users/brian/examples/gitlabhq
</span><span class='line'>
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Name                 | Lines |   LOC | Classes | Methods | M/C | LOC/M |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Controllers          |  3690 |  2890 |      66 |     384 |   5 |     5 |
</span><span class='line'>| Finders              |   428 |   267 |       8 |      27 |   3 |     7 |
</span><span class='line'>| Helpers              |  2280 |  1761 |       0 |     222 |   0 |     5 |
</span><span class='line'>| Mailers              |   382 |   275 |       1 |      29 |  29 |     7 |
</span><span class='line'>| Models               |  6922 |  4680 |      58 |     714 |  12 |     4 |
</span><span class='line'>| Services             |  2021 |  1502 |      51 |     149 |   2 |     8 |
</span><span class='line'>| Uploaders            |    81 |    62 |       2 |      14 |   7 |     2 |
</span><span class='line'>| Workers              |   128 |    99 |       6 |       8 |   1 |    10 |
</span><span class='line'>| Javascripts          |  3843 |  2936 |       1 |     534 | 534 |     3 |
</span><span class='line'>| Libraries            |  7246 |  4785 |     120 |     438 |   3 |     8 |
</span><span class='line'>| Configuration        |  1421 |   782 |       4 |      11 |   2 |    69 |
</span><span class='line'>| Controller Tests     |   428 |   334 |       0 |       0 |   0 |     0 |
</span><span class='line'>| Spec Support         |  1119 |   715 |       2 |      27 |  13 |    24 |
</span><span class='line'>| Other Tests          |    67 |    55 |       0 |       0 |   0 |     0 |
</span><span class='line'>| Feature Tests        |  2209 |  1765 |       0 |       8 |   0 |   218 |
</span><span class='line'>| Finder Tests         |   281 |   230 |       0 |       0 |   0 |     0 |
</span><span class='line'>| Helper Tests         |  1608 |  1255 |       0 |       5 |   0 |   249 |
</span><span class='line'>| Lib Tests            |  1459 |  1180 |       1 |      11 |  11 |   105 |
</span><span class='line'>| Mailer Tests         |   630 |   478 |       0 |       0 |   0 |     0 |
</span><span class='line'>| Model Tests          |  3856 |  2669 |       0 |      10 |   0 |   264 |
</span><span class='line'>| Request Tests        |  4229 |  3600 |       0 |      10 |   0 |   358 |
</span><span class='line'>| Routing Tests        |   849 |   520 |       0 |       0 |   0 |     0 |
</span><span class='line'>| Service Tests        |  1611 |  1307 |       0 |      34 |   0 |    36 |
</span><span class='line'>| Worker Tests         |    45 |    35 |       0 |       2 |   0 |    15 |
</span><span class='line'>| Cucumber Features    |  6749 |  5734 |     141 |     947 |   6 |     4 |
</span><span class='line'>| Cucumber Support     |  6235 |  4980 |      65 |      71 |   1 |    68 |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Total                | 59817 | 44896 |     526 |    3655 |   6 |    10 |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>  Code LOC: 20039     Test LOC: 24857     Code to Test Ratio: 1:1.2
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake stats<span class="o">[</span>/users/brian/examples/redmine/<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Directory: /users/brian/examples/redmine
</span><span class='line'>
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Name                 | Lines |   LOC | Classes | Methods | M/C | LOC/M |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Controllers          |  6738 |  5005 |      51 |     416 |   8 |    10 |
</span><span class='line'>| Helpers              |  4445 |  3014 |       2 |     281 | 140 |     8 |
</span><span class='line'>| Models               | 13221 |  9369 |      86 |    1026 |  11 |     7 |
</span><span class='line'>| Libraries            | 19041 | 13499 |     137 |    1147 |   8 |     9 |
</span><span class='line'>| Configuration        |   779 |   550 |      14 |      18 |   1 |    28 |
</span><span class='line'>| Integration Tests    |  8286 |  6032 |      92 |     202 |   2 |    27 |
</span><span class='line'>| Other Tests          |   669 |   521 |       3 |      53 |  17 |     7 |
</span><span class='line'>| Test Support         |  1102 |   791 |       8 |      70 |   8 |     9 |
</span><span class='line'>| Functional Tests     | 18448 | 14784 |      61 |    1372 |  22 |     8 |
</span><span class='line'>| Unit Tests           | 23680 | 18217 |     117 |    1783 |  15 |     8 |
</span><span class='line'>| Helper Tests         |  3321 |  2567 |      16 |     171 |  10 |    13 |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Total                | 99730 | 74349 |     587 |    6539 |  11 |     9 |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>  Code LOC: 31437     Test LOC: 42912     Code to Test Ratio: 1:1.4
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake stats<span class="o">[</span>/users/brian/examples/refinerycms<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Directory: /users/brian/examples/refinerycms
</span><span class='line'>
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Name                 | Lines |   LOC | Classes | Methods | M/C | LOC/M |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Controllers          |   950 |   748 |      17 |      83 |   4 |     7 |
</span><span class='line'>| Helpers              |   399 |   308 |       0 |      28 |   0 |     9 |
</span><span class='line'>| Mailers              |    22 |    18 |       1 |       2 |   2 |     7 |
</span><span class='line'>| Models               |   846 |   570 |      14 |      86 |   6 |     4 |
</span><span class='line'>| Presenters           |   365 |   271 |       8 |      44 |   5 |     4 |
</span><span class='line'>| Javascripts          |   717 |   531 |       0 |      52 |   0 |     8 |
</span><span class='line'>| Libraries            |     4 |     4 |       0 |       0 |   0 |     0 |
</span><span class='line'>| Gems                 |  4166 |  2997 |      44 |     372 |   8 |     6 |
</span><span class='line'>| Controller Tests     |   207 |   170 |       1 |       1 |   1 |   168 |
</span><span class='line'>| Spec Support         |   309 |   243 |       2 |       6 |   3 |    38 |
</span><span class='line'>| Feature Tests        |  1907 |  1484 |       0 |       4 |   0 |   369 |
</span><span class='line'>| Lib Tests            |  1952 |  1687 |       6 |       4 |   0 |   419 |
</span><span class='line'>| Model Tests          |  1323 |  1072 |       0 |       5 |   0 |   212 |
</span><span class='line'>| Helper Tests         |   324 |   264 |       0 |       1 |   0 |   262 |
</span><span class='line'>| Presenter Tests      |   355 |   299 |       0 |       0 |   0 |     0 |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Total                | 13846 | 10666 |      93 |     688 |   7 |    13 |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>  Code LOC: 5447     Test LOC: 5219     Code to Test Ratio: 1:1.0
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake stats<span class="o">[</span>/users/brian/examples/spree<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Directory: /users/brian/examples/spree
</span><span class='line'>
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Name                 | Lines |   LOC | Classes | Methods | M/C | LOC/M |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Controllers          |  4653 |  3800 |      86 |     492 |   5 |     5 |
</span><span class='line'>| Helpers              |  1142 |   949 |       0 |      90 |   0 |     8 |
</span><span class='line'>| Models               |  9893 |  7308 |     167 |     973 |   5 |     5 |
</span><span class='line'>| Javascripts          |  2770 |  2100 |       9 |     416 |  46 |     3 |
</span><span class='line'>| Mailers              |    63 |    58 |       5 |       8 |   1 |     5 |
</span><span class='line'>| Libraries            |    15 |    14 |       0 |       0 |   0 |     0 |
</span><span class='line'>| Gems                 |  4690 |  3641 |      35 |     254 |   7 |    12 |
</span><span class='line'>| Controller Tests     |  7344 |  6000 |       6 |      19 |   3 |   313 |
</span><span class='line'>| Model Tests          | 16747 | 13452 |      20 |      27 |   1 |   496 |
</span><span class='line'>| Request Tests        |    32 |    24 |       0 |       0 |   0 |     0 |
</span><span class='line'>| Spec Support         |   577 |   427 |       3 |       9 |   3 |    45 |
</span><span class='line'>| Feature Tests        |  6079 |  4809 |       0 |      17 |   0 |   280 |
</span><span class='line'>| Helper Tests         |   602 |   470 |       2 |       1 |   0 |   468 |
</span><span class='line'>| Lib Tests            |  1455 |  1216 |       8 |      11 |   1 |   108 |
</span><span class='line'>| Mailer Tests         |   252 |   208 |       0 |       0 |   0 |     0 |
</span><span class='line'>| Other Tests          |    33 |    27 |       0 |       0 |   0 |     0 |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>| Total                | 56347 | 44503 |     341 |    2317 |   6 |    17 |
</span><span class='line'>+----------------------+-------+-------+---------+---------+-----+-------+
</span><span class='line'>  Code LOC: 17870     Test LOC: 26633     Code to Test Ratio: 1:1.5
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>

]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Rails Stats</wp:post_id>
            <wp:post_date>2014-11-07 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Rails Schema with LHM</title>
            <link>http://bleonard.github.io/blog/2014/10/30/rails-schema-with-lhm/</link>
            <pubDate>2014-10-30 00:00:00 -0700</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2014/10/30/rails-schema-with-lhm/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>At <a href="https://www.taskrabbit.com">TaskRabbit</a>, we like <a href="http://www.mysql.com/">MySQL</a>. As with everything, it has its own set of issues, though. One of these issues is that it locks the table while a column is added. This is not the biggest deal in the early days of a table, but once you start getting millions of rows and consistent traffic around the clock, this prevents the site from working as expected.</p>

<p>The first way that we worked around this problem was with the <a href="http://www.percona.com/doc/percona-toolkit/2.1/pt-online-schema-change.html">pt-online-schema-change</a> tool. It does the following:</p>

<ul>
<li>Makes a a new table with the old table&#8217;s schema</li>
<li>Copies data from the old table to the new table</li>
<li>Sets up a trigger for data to keep syncing</li>
<li>Adds the column to the new table</li>
<li>Renames the old table to something else and renames the new table to replace it</li>
<li>Deletes the old table</li>
</ul>


<p>This worked quite well, but had a flaw within our process. It was outside of the development and deployment workflow. In order to develop, we would still make a <a href="http://guides.rubyonrails.org/migrations.html">Rails migration</a>. Then just before deploy, we would run the tool and add the row to the <code>schema_migrations</code> table. When we deploy, it runs migrations, but in this case it would not run because we had added that row. I don&#8217;t think we ever messed it up, but the process had a few gaps.</p>

<p>We now use <a href="https://github.com/soundcloud/lhm">LHM</a> also known as Large Hadron Migrator from the good folks at <a href="https://soundcloud.com/">soundcloud</a>. It does basically the same thing, but allows you to do it right there in the migration.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;lhm&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AddMiddleNameToUsers</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="no">Lhm</span><span class="o">.</span><span class="n">change_table</span> <span class="ss">:users</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class='line'>      <span class="c1"># same as: add_column :users, :middle_name</span>
</span><span class='line'>      <span class="n">m</span><span class="o">.</span><span class="n">add_column</span> <span class="ss">:middle_name</span><span class="p">,</span> <span class="s2">&quot;VARCHAR(191) DEFAULT NULL&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So this is great. Now it&#8217;s in the process.</p>

<h3>Schema</h3>

<p>One design choice (and it seems like the right one) is that it makes the last step manual. That is, it leaves the old (renamed) table around. We go back and delete these from production when sure everything worked out. The above migration might leave around a table named something like this: <code>lhma_2014_10_28_20_41_56_933_users</code>.</p>

<p>So that&#8217;s fine, but you&#8217;ll notice that when you run <code>rake db:migrate</code> that your <code>schema.rb</code> file now has that table in it. This happens because ActiveRecord takes a snapshot of your database right after the migration. We try to take really good care of our schema file, so this made us sad.</p>

<p>I went poking around in the ActiveRecord code ready to monkey patch the adapter that reads the table list or the code that generates the schema file. When I got there, though, I found there was already a class setting that did what I wanted. It even took a regex!</p>

<p>So here&#8217;s what to add if you don&#8217;t want those tables showing up in your schema file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/initializers/active_record_schema.rb</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_record&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ignore LHM</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">SchemaDumper</span><span class="o">.</span><span class="n">ignore_tables</span> <span class="o">&lt;&lt;</span> <span class="sr">/^lhma_/</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it. Happy migrating.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Rails Schema with LHM</wp:post_id>
            <wp:post_date>2014-10-30 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Geohashes</title>
            <link>http://bleonard.github.io/blog/2014/09/24/geohashes/</link>
            <pubDate>2014-09-24 00:00:00 -0700</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2014/09/24/geohashes/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>Over the years, we&#8217;ve struggled at <a href="https://www.taskrabbit.com">TaskRabbit</a> with a way to represent smaller geographic areas. Postal codes seems to be the most obvious but these vary dramatically in size. For example, there are postal codes that are just one building and ones that are bigger than some US states. We&#8217;ve also tried &#8220;neighborhood&#8221; data from various sources, but these are somewhat unreliable.</p>

<p>I recently learned about and started using <a href="http://en.wikipedia.org/wiki/Geohash">geohashes</a> to break the world into boxes and have been very happy with the results. I gave a lightning talk last week at <a href="http://gogaruco.com/">GoGaRuCo</a> on the subject. Many of them had heard about it, but the talk went over fairly well.</p>

<h3>Use Case</h3>

<p>The problem at hand is one of probabilities. Given a task, who are the best taskers for the job. Or conversely, given a tasker, what are the best few tasks for them. Taskers give us an idea of where they want to work but actions often speak louder than <s>words</s> user-drawn geographic polygons. So what I wanted to do was map their history into positive and negative areas of probability depending on what tasks they wanted to do and which they did not.</p>

<p>I had all those points and it was fairly easy to draw a heatmap using <a href="https://www.mapbox.com/mapbox.js/example/v1.0.0/leaflet-heat/">this Leaflet plugin</a>, but that needed to be mapped to something more concrete. We would be using <a href="http://www.elasticsearch.org/">Elasticsearch</a> for the storage, so while researching it&#8217;s geo functions, I stumbled across the concept of <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations-bucket-geohashgrid-aggregation.html">geohashes</a> which it evidently uses internally for such queries.</p>

<p><a href="http://www.bigfastblog.com/geohash-intro">This</a> article gives a really good explanation of how it works. The short version is that if you were to start with the whole world and keep cutting it in half depending on where your lat/lng was, you&#8217;d end up with a lot of left/right (or top/bottom) choices. Those choices can be encoded into binary, which can be encoded into a simple string. So this spot in London (51.507794, -0.127952) would become the &#8220;gcpvj0dyds&#8221; geohash. It has the interesting property that strings (locations) that have the same start are known to be close to it. For example, the &#8220;gcpvj09swr&#8221; geohash has the first six characters in common, so we would know that is within half a mile or so of the first one.</p>

<p>So now I have all of these points. I can map them to geohashes of the necessary precision (I chose 6) and give positive and negative weights for each user action. The actual calculation turns out to be really fast. I used the code from the <a href="https://github.com/masuidrive/pr_geohash/blob/master/lib/pr_geohash.rb">pr_geohash</a> gem and had no issues. It also calculates neighbors which turns out the be important.</p>

<p>Using the weight, I can combine and draw the geohashes (<a href="https://github.com/rgeo/rgeo">RGeo</a>/<a href="http://leafletjs.com/">Leaflet</a>). As an example, here is drawing where a particular Tasker is likely to want to work:</p>

<p><img src="http://bleonard.github.io/images/posts/geohashes/medium.jpg" alt="Likely to Accept" /></p>

<!-- more -->


<p>And where this Tasker is generally positive:</p>

<p><img src="http://bleonard.github.io/images/posts/geohashes/low.jpg" alt="Positive" /></p>

<p>And also where they have negative feedback:</p>

<p><img src="http://bleonard.github.io/images/posts/geohashes/negative.jpg" alt="Negative" /></p>

<p>Using these tools and the fact that every Tasker&#8217;s map is different, we can make better recommendations. This reduces friction in the marketplace.</p>

<p>One of the gotchas is mentioned in the <a href="http://www.bigfastblog.com/geohash-intro">article</a> I referenced earlier. If a point is on a border, especially at the beginning of the decision process, it can end up being massively off. I worked around this in my implementation by spreading out the weight to it&#8217;s neighbors. So if the location got 100 points, the neighbors would also get some, degrading as it spread out.</p>

<p><img src="http://bleonard.github.io/images/posts/geohashes/boxes.jpg" alt="Spread out the weight" /></p>

<p>This has proven to minimize the boundary issue.</p>

<h3>Conclusion</h3>

<p>Overall, I just wanted to share a new tool and concept that I learned about. We&#8217;ve found it to be a great pattern and will likely use geohashes more for representing our world.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Geohashes</wp:post_id>
            <wp:post_date>2014-09-24 00:00:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Yammer to Hipchat</title>
            <link>http://bleonard.github.io/blog/2014/04/08/yammer-to-hipchat/</link>
            <pubDate>2014-04-08 20:40:00 -0700</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2014/04/08/yammer-to-hipchat/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>So I&#8217;m at least two years behind blogging about various projects, but I have the list right here. I feel like being productive tonight but am not quite ready to start the next big feature so I thought I&#8217;d mention one on that list.</p>

<p>For a variety of reasons, I was trying to get everyone to migrate from <a href="https://www.yammer.com">Yammer</a> to <a href="https://www.hipchat.com">Hipchat</a> a few years back. They aren&#8217;t exactly direct competitors, but I liked the more direct Hipchat model and didn&#8217;t want to be running two distracting things all the time. The main holdout was that Yammer tended to be used for communicating to the whole company as it&#8217;s model is better suited to that.</p>

<p>I quickly made <a href="https://github.com/bleonard/yam2hip">yam2hip</a> to sync them over to my new client of choice. It&#8217;s made to deploy to <a href="https://www.heroku.com/">Heroku</a>. Every 90 seconds it will look for new Yammer messages and post them in a Hipchat room. I made a Hipchat room called &#8220;Yammer&#8221; to be the target room.</p>

<p>If people would have continued to use both, I probably would have made it bi-directional; however, we are now quite happily all on Hipchat (boom).</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Yammer to Hipchat</wp:post_id>
            <wp:post_date>2014-04-08 20:40:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>iOS Authentication Blocks</title>
            <link>http://bleonard.github.io/blog/2014/04/05/ios-auth-blocks/</link>
            <pubDate>2014-04-05 16:54:00 -0700</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2014/04/05/ios-auth-blocks/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>In my recent project, <a href="http://www.bleonard.com/blog/2014/04/03/cakewalk/">Cakewalk</a>, we give the user a fairly complete experience without having to sign up. This seems like the nice thing to do but it&#8217;s also in Apple&#8217;s guidelines for app approval. At some point, though, we need to create an account for them. In our case, it&#8217;s when they want to add an idea to their favorites or save their filter preferences. A &#8220;gate&#8221; such as this is something I&#8217;ve done on the web many times but it&#8217;s the first time I&#8217;ve done it an iPhone app. I&#8217;ll describe how I solved it using <a href="https://developer.apple.com/library/ios/documentation/cocoa/Conceptual/Blocks/Articles/bxGettingStarted.html#//apple_ref/doc/uid/TP40007502-CH7-SW1">blocks</a>.</p>

<h2>Web</h2>

<p>On the web, I would usually send them to a URL. If that URL requires a logged in user, then it would redirect to the login/signup URL with a query param. For example, if the page was <code>http://www.example.com/favorite</code>, it would redirect to something like <code>http://www.example.com/login?after_auth=%2Ffavorite</code>. The login/signup form would add this as a hidden parameter that it POSTs. If the action is successful, it will use this url instead of the default one to send the user to next place. In Rails, it would look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">login</span>
</span><span class='line'>  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_email</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># right!</span>
</span><span class='line'>    <span class="n">log_in!</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">params</span><span class="o">[</span><span class="ss">:after_auth</span><span class="o">]</span> <span class="o">||</span> <span class="n">dashboard_path</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="c1"># not right!</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">:form</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the site allows the users to switch back and forth between login and signup pages or allows Facebook, Twitter or some other OAuth, it can be easy to lose this parameter. I&#8217;ve seen sites put the value in a cookie for this reason. It can simplify it, but is more likely to have unintended site effects.</p>

<h2>Blocks</h2>

<p>Most of the complexity of the web version is because of the stateless nature of the medium. The query parameter or cookie is an attempt to add that state globally. This is not particularly an issue in an iPhone app. The global state is fairly well known in the view controllers and there is shared memory. The interesting thing that I realized is that it&#8217;s not just data that we can store, but also <a href="https://developer.apple.com/library/ios/documentation/cocoa/Conceptual/Blocks/Articles/bxGettingStarted.html#//apple_ref/doc/uid/TP40007502-CH7-SW1">blocks</a>.</p>

<p>An Objective C block is an inline declaration of a function. It is similar to features available in Ruby and Javascript. Here we use one to change how a sort is done:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">NSComparator</span> <span class="n">finderSortBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">string1</span><span class="p">,</span> <span class="kt">id</span> <span class="n">string2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSRange</span> <span class="n">string1Range</span> <span class="o">=</span> <span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">string1</span> <span class="n">length</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">string1</span> <span class="nl">compare:</span><span class="n">string2</span> <span class="nl">options:</span><span class="n">comparisonOptions</span> <span class="nl">range:</span><span class="n">string1Range</span> <span class="nl">locale:</span><span class="n">currentLocale</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">finderSortArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">stringsArray</span> <span class="nl">sortedArrayUsingComparator:</span><span class="n">finderSortBlock</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>I find it a little hard to read when using them like this, so I typedef&#8217;d them as needed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// blocks.h</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">MyVoidBlock</span><span class="p">)();</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">MyVoidBlockWithBool</span><span class="p">)(</span><span class="kt">BOOL</span><span class="p">);</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">MyVoidBlockWithString</span><span class="p">)(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">MyVoidBlockWithDictionary</span><span class="p">)(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">BOOL</span> <span class="p">(</span><span class="o">^</span><span class="n">MyBoolBlockWithString</span><span class="p">)(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows us to use them throughout the app to provide more semantics to the block in use. For example, in a method declaration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="cp">// MyAppDelegate.h</span>
</span><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">MyAppDelegate</span> : <span class="nc">UIResponder</span> <span class="o">&lt;</span><span class="n">UIApplicationDelegate</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">authenticateWithSuccess:</span><span class="p">(</span><span class="n">MyVoidBlock</span><span class="p">)</span><span class="n">success</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Use in context</h2>

<p>So most of the time, it does not matter if the user is logged in or not, but then the time comes they hit the &#8220;favorite&#8221; button and we need to make sure.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// MyIdeaViewController.m</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">favoriteButtonPressed:</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">MyAppDelegate</span> <span class="o">*</span> <span class="n">delegate</span> <span class="o">=</span> <span class="p">(</span><span class="n">MyAppDelegate</span><span class="o">*</span><span class="p">)</span> <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">delegate</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">delegate</span> <span class="nl">authenticateWithSuccess:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">CurrentUser</span> <span class="n">shared</span><span class="p">]</span> <span class="nl">setIdeaAsFavorite:</span> <span class="n">self</span><span class="p">.</span><span class="n">idea</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This was the cleanest of several alternatives that I came up with. It just occurred to me, though, that I also could have made a block that passed a user instead of nothing for even better encapsulation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// blocks.h</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">MyVoidBlockWithUser</span><span class="p">)(</span><span class="n">CurrentUser</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MyAppDelegate.h</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">authenticateWithSuccess:</span><span class="p">(</span><span class="n">MyVoidBlockWithUser</span><span class="p">)</span><span class="nv">success</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MyIdeaViewController.m</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">favoriteButtonPressed:</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">MyAppDelegate</span> <span class="o">*</span> <span class="n">delegate</span> <span class="o">=</span> <span class="p">(</span><span class="n">MyAppDelegate</span><span class="o">*</span><span class="p">)</span> <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">delegate</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">delegate</span> <span class="nl">authenticateWithSuccess:</span><span class="o">^</span><span class="p">(</span><span class="n">CurrentUser</span><span class="o">*</span> <span class="n">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">user</span> <span class="nl">setIdeaAsFavorite:</span> <span class="n">self</span><span class="p">.</span><span class="n">idea</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I did the earlier version because the app already had that shared user concept. Either way, this technique encapsulates all the logic for getting the user authenticated and lets the feature focus on what happens if it is successful (or already logged in).</p>

<h2>Callbacks</h2>

<p>The system works because the block is passed along much like the web parameter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// MyAppDelegate.m</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">authenticateWithSuccess:</span><span class="p">(</span><span class="n">MyVoidBlock</span><span class="p">)</span><span class="nv">success</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">CurrentUser</span> <span class="n">isLoggedIn</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// return immediately if the user is already logged in</span>
</span><span class='line'>        <span class="n">success</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// otherwise, launch view that allows login or signup, passing block along</span>
</span><span class='line'>        <span class="n">MyAuthController</span> <span class="o">*</span> <span class="n">auth</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyAuthController</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithSuccess:</span><span class="n">success</span><span class="p">];</span>
</span><span class='line'>        <span class="n">auth</span><span class="p">.</span><span class="n">modalTransitionStyle</span> <span class="o">=</span> <span class="n">UIModalTransitionStyleCoverVertical</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">rootViewController</span> <span class="nl">presentViewController:</span><span class="n">auth</span> <span class="nl">animated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This slides up the authentication controller and most importantly passes along the success callback. Then, if the user does login or signup, the auth controller closes itself, logs the user in, and calls the <code>success</code> block.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// MyAuthController.m</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">didSubmitLogin</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">CurrentUser</span> <span class="nl">loginWithEmail:</span><span class="n">self</span><span class="p">.</span><span class="n">emailField</span><span class="p">.</span><span class="n">text</span> <span class="nl">password:</span><span class="n">self</span><span class="p">.</span><span class="n">passwordField</span><span class="p">.</span><span class="n">text</span> <span class="nl">success:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">closeAuthentication:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">showError:</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">didTapCancelButton</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">closeAuthentication:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">closeAuthentication:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">authenticated</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">dismissViewControllerAnimated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">authenticated</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">successBlock</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If they do hit the cancel, button, it will slide down and everything will be back where it started. However, if they do login, what I think is really cool about this is that it slides down and the originally invoked code is back in the same position as if the user would have been authenticated in the first place.</p>

<h2>Summary</h2>

<p>I hadn&#8217;t used blocks much in Objective C before, so this ability was a new concept to me. The power of it lies in the simplicity of the <code>favoriteButtonPressed</code> code even in the face of handling several varying circumstances. I&#8217;m sure there are other cases like this so it&#8217;s nice to have a new tool in the toolbelt.</p>

<p><a href="https://news.ycombinator.com/item?id=7539649">Discuss on Hacker News</a></p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>iOS Authentication Blocks</wp:post_id>
            <wp:post_date>2014-04-05 16:54:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Cakewalk</title>
            <link>http://bleonard.github.io/blog/2014/04/03/cakewalk/</link>
            <pubDate>2014-04-03 21:10:00 -0700</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2014/04/03/cakewalk/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>It&#8217;s nice to be useful. I was glad to be able to help out my wife and her partner make a new iPhone app called <a href="http://www.cakewalkapp.com">Cakewalk</a>.</p>

<p>I really like the counter-culture situation of it. Technology has become a way to distract the kids or something you can hand them when you are out of other things to do. <a href="http://www.personify.us">Krista</a> and <a href="http://www.textunvexed.com">Marijane</a> had the idea to use technology to go the other way by giving parents an app that was for them, not the kids. And the goal of the app is to stop using the app and start real playtime with the kids.</p>

<p>Put simply, Cakewalk comes in handy when the kids really want to play with you, but you’re having a hard time coming up with something to do. It is full of quick ideas for simple fun. And every activity is something you can do right now—no research, no prep, and no trips to the store.</p>

<p>So get it now on the App Store <a href="http://www.cakewalkapp.com/get">here</a>. See below for the tech notes on how it was built.</p>

<p><img src="http://bleonard.github.io/images/posts/cakewalk/HoolaPhoto.jpg" alt="Cakewalk Idea" /></p>

<!-- more -->


<p><img src="http://bleonard.github.io/images/posts/cakewalk/HoolaText.jpg" alt="Cakewalk Text" /></p>

<p><img src="http://bleonard.github.io/images/posts/cakewalk/CheckBoxes.jpg" alt="Idea Filtering" /></p>

<h1>Tech Notes</h1>

<p>I made a <a href="http://rubyonrails.org/">Rails</a> server as well as the iPhone client.</p>

<p>The real work in the project has been Marijane and Krista writing the content and taking beautiful pictures, so the first order of business was allow that to be stored in a useful way. Rails is awesome at <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> applications, so I made an admin panel of sorts where they could enter the content and attach photos. I tried to practice what I <a href="/blog/2014/02/11/rails-4-engines/">preach</a> and made an admin <a href="/blog/2014/02/11/rails-4-engines/">engine</a> using Bootstrap to make it not terrible to look at.</p>

<p>Then, I made an api engine to serve json for the app to use. The main functionality of the app is listing ideas with various filters which was still fairly straightforward from the data they entered.</p>

<p>Then came the hard part (for me at least). I had not developed an iPhone app since right after Apple first released the SDK and much has changed. This was a great opportunity to see what has been going on. It turns out that a lot has been going on.</p>

<ul>
<li>People make and share libraries now and <a href="http://cocoapods.org/">CocoaPods</a> is a good thing.</li>
<li><a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> and <a href="https://github.com/Inferis/ViewDeck">ViewDeck</a> saved me a ton of time.</li>
<li><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/CoreData/cdProgrammingGuide.html">Core Data</a> worked pretty well for my use case.</li>
<li>You can take up the whole screen, but it can get pretty weird.</li>
<li>I couldn&#8217;t resist doing the <a href="http://www.macworld.com/article/2042808/inside-the-technology-behind-ios-7s-parallax-effect.html">parallax</a> stuff.</li>
<li>I still didn&#8217;t use <a href="https://developer.apple.com/xcode/interface-builder/">Interface Builder</a> and preferred laying it out with code.</li>
<li>The <a href="https://developer.apple.com/library/ios/releasenotes/objectivec/rn-transitioningtoarc/introduction/introduction.html">ARC</a> compiler sure simplified the situation a lot.</li>
<li><a href="https://developer.apple.com/library/ios/documentation/cocoa/Conceptual/Blocks/Articles/bxGettingStarted.html#//apple_ref/doc/uid/TP40007502-CH7-SW1">Blocks</a> syntax really cleans things up.</li>
<li>The 2x images for retina display are somewhat annoying but the tooling is much better.</li>
<li><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIGestureRecognizer_Class/Reference/Reference.html">Gesture Recognizers</a> may have been there before but I didn&#8217;t know about them. That&#8217;s <em>much</em> easier.</li>
</ul>


<p>The whole app is basically a <a href="http://www.appcoda.com/uipageviewcontroller-tutorial-intro/">UIPageViewController</a> to infinitely swipe through idea after idea. On each page is a background image with a parallax effect. The content for the idea is in a <a href="http://idevzilla.com/2010/09/16/uiscrollview-a-really-simple-tutorial/">UIScrollView</a>. I spent way too much time on the interaction between the two components. The background changes and tilts as you scroll up. It&#8217;s so fun to do the little UI touches.</p>

<p>On the side of the ideas, you can filter what you want to see. This uses <a href="https://github.com/Inferis/ViewDeck">ViewDeck</a> to slide open a controller that has a <a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UITableView_Class/Reference/Reference.html">UITableView</a> of options. Selecting any given option toggles the filters, which affects the list of ideas.</p>

<p>Everything is fairly straightforward. The most interesting parts of this project for me were around performance. For example, my first inclination was to use the APIs to load the list of ideas. Then fetch the idea data when the user swiped to the next one. Where I ended up was completely the opposite. The user rarely interacts directly with the server at all. All of the filtering and loading of the next idea happen locally on the phone immediately using <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/CoreData/cdProgrammingGuide.html">Core Data</a>. The communication with the server happens in a background thread and any different results are injected into the list. This produces a <em>much</em> more fluid user experience.</p>

<p>The other performance issue was figuring out how to run this project at a <em>very</em> low cost even if a million parents decided this was the next big thing. I stumbled upon <a href="https://www.cloudflare.com/">Cloudflare</a> as one of the main solutions. By structuring the API requests well, I&#8217;ve been able to have Cloudflare fully cache the results for a reasonable amount of time. This prevents most requests from even having to hit my server. I did the same thing with web pages like the homepage. If you go to that page, it will stop at Cloudflare. This is very powerful because they can handle a huge amount of users without a problem.</p>

<p>So try out the <a href="http://www.cakewalkapp.com/get">app</a>. It&#8217;s free and has made me a better parent. If there&#8217;s anything you want to hear more about, let me know.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Cakewalk</wp:post_id>
            <wp:post_date>2014-04-03 21:10:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Offshore: Rails Remote Factories</title>
            <link>http://bleonard.github.io/blog/2014/03/16/offshore/</link>
            <pubDate>2014-03-16 10:31:00 -0700</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2014/03/16/offshore/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>Last year at <a href="https://www.taskrabbit.com">TaskRabbit</a>, we decided to go headlong into this <a href="http://en.wikipedia.org/wiki/Service-oriented_architecture">Service Oriented Architecture</a> thing. We ended up with several <a href="http://rubyonrails.org/">Rails</a> and <a href="http://www.sinatrarb.com/">other</a> Ruby apps that loosely depended on each other to work. While this was mostly good from a separation of concerns and organizational perspective, we found effective automated testing to be quite difficult.</p>

<p>Specifically, we have one core platform application whose API is the most used. We also allow other apps to have read-only access to its database. Several of the apps are more or less a client to that server. So while the satellite apps have their own test suite, the integration tests can only be correct if they are exercising the core API.</p>

<p>To handle this use case, we created a gem called <a href="https://github.com/taskrabbit/offshore">Offshore</a>. A normal test suite has <a href="https://github.com/thoughtbot/factory_girl">factories</a> and/or <a href="http://guides.rubyonrails.org/testing.html#the-low-down-on-fixtures">fixture data</a> and it uses database <a href="http://api.rubyonrails.org/classes/ActiveRecord/Transactions/ClassMethods.html">transactions</a> to reset the data for every test. Offshore brings this the SOA world by providing the ability to use another application&#8217;s factories from your test suite as well as handling the rollback between tests. Through the actual exercising of the other application as well as a simplified usage pattern, we found that we trusted our integration tests much more that alternative approaches.</p>

<h2>System</h2>

<p>What we have are several apps based on use case, all using a core platform. There are web apps for each of the participants in our marketplace: workers, consumers, and businesses. We also have iPhone and Android apps along those same lines.</p>

<p>The apps communicate in a few ways. All of them use the platform&#8217;s API synchronously. The web apps use <a href="https://github.com/taskrabbit/resque-bus">Resque Bus</a> to subscribe and publish asynchronously. We also allow the web apps to read the platform database, but not write.</p>

<p><img src="http://bleonard.github.io/images/posts/offshore/generic_network_map.png" alt="Network Map" /></p>

<h2>Use Case</h2>

<p>The APIs and data involved are basically about tasks and users in the system and their various state transitions. For example, our business app signs up a user and post a tasks using the API. The user will then be on the their dashboard seeing a list of tasks in various states, conversations with the workers, payment details, etc.</p>

<!-- more -->


<p>This dashboard has many, many (many) possible combinations of what it can show after factoring in all the types of tasks and their states. To have an effective test suite for this one page, we&#8217;ll need several tests that put it in those various states. The page is mostly <a href="https://github.com/taskrabbit/sudojs">Javascript</a> driven.</p>

<p>The other thing we want to test are flows that got the user into those states. For example, can the user post a task, receive some bids, chat back and forth, select a worker, have the worker mark it complete, pay for it, and rate the worker without any problems?</p>

<p>The first thing that we did was what we would have to do if this was a true &#8220;external&#8221; service. We stubbed the responses. We made our Javascript tests in <a href="https://github.com/jfirebaugh/konacha">Konacha</a> and our Ruby tests used <a href="http://rspec.info/">rspec</a> and <a href="https://github.com/vcr/vcr">vcr</a>. Both used &#8220;recordings&#8221; of API responses to &#8220;stub&#8221; the platform. This had a few problems.</p>

<p>First, there was still the question of what server to use. Should it be the local one or staging one or something else? Second, you kind of had to get it right the first time if there was any state involved in the test. If test signed up a user and then posted a task, for example, and it failed just a bit the first time, then it would fail harder the second time because that database was not reset (and the user existed when it went to sign up). Third, I was concerned that this easily get out of date with our evolving platform. Finally, if anything was read directly from the database, this would not work at all (as the data wouldn&#8217;t actually be there).</p>

<h2>Offshore Pattern</h2>

<p>When using Offshore, we actually run the platform server and the app uses that instead of stubbing. Both have the <code>offshore</code> gem installed.</p>

<p>Before a test, the app tells the platform that it&#8217;s about to start a test. It is then given a token that lets it make other requests to it during the test. It will create objects using factories, make regular API calls, and read/write to the platform database as required. It can do it&#8217;s own checks throughout to see if the test should pass. When it&#8217;s done, it let&#8217;s the platform know.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;Integration Test&quot;</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="ss">:request</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should work as expected&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Offshore</span><span class="o">.</span><span class="n">test</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="n">example</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">user</span>   <span class="o">=</span> <span class="n">users</span><span class="p">(</span><span class="ss">:billy</span><span class="p">)</span>
</span><span class='line'>      <span class="n">worker</span> <span class="o">=</span> <span class="n">users</span><span class="p">(</span><span class="ss">:robby</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">task</span>   <span class="o">=</span> <span class="no">FactoryOffshore</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:task_posted</span><span class="p">,</span> <span class="ss">:user_id</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">offer</span>  <span class="o">=</span> <span class="no">FactoryOffshore</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:offer</span><span class="p">,</span> <span class="ss">:worker_id</span> <span class="o">=&gt;</span> <span class="n">worker</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">task</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="s2">&quot;opened&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">visit</span> <span class="s2">&quot;/tasks&quot;</span>
</span><span class='line'>      <span class="n">click_on</span> <span class="s2">&quot;Hire!&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">task</span><span class="o">.</span><span class="n">reload</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="s2">&quot;assigned&quot;</span>
</span><span class='line'>      <span class="n">task</span><span class="o">.</span><span class="n">worker_id</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="n">worker</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>
</span><span class='line'>      <span class="no">Offshore</span><span class="o">.</span><span class="n">test</span><span class="o">.</span><span class="n">stop</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The point is that this is more or less the same test that you&#8217;d write if you were using factories and capybara in a regular test suite.</p>

<h2>Server</h2>

<p>The server app is the one with the factories and the database that your app needs to work. For Rails, add this to your Gemfile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;offshore&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also add the rake tasks to your Rakefile</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;offshore/tasks&#39;</span> <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">Offshore</span><span class="p">)</span>
</span><span class='line'><span class="k">rescue</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You might need something like this to your test.rb application config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Offshore</span><span class="o">.</span><span class="n">redis</span> <span class="o">=</span> <span class="s2">&quot;localhost:6379&quot;</span>
</span><span class='line'><span class="no">Offshore</span><span class="o">.</span><span class="n">enable!</span> <span class="k">if</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;OFFSHORE&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;true&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then run something like this on the command line</p>

<pre><code>$ rake offshore:startup
$ OFFSHORE=true rails s thin -e test -p 6001
</code></pre>

<p>In you want it anything but a blank database, you must create a rake task called <code>offshore:seed</code> that creates the test database referenced in the database.yml file in the test environment. Something like this would work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:offshore</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:preload</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;RAILS_ENV&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;test&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:setup</span> <span class="o">=&gt;</span> <span class="ss">:environment</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;seeds the db for offshore gem&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:seed</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s1">&#39;db:migrate&#39;</span><span class="o">].</span><span class="n">invoke</span>
</span><span class='line'>    <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s1">&#39;db:test:prepare&#39;</span><span class="o">].</span><span class="n">invoke</span>
</span><span class='line'>    <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s1">&#39;db:seed&#39;</span><span class="o">].</span><span class="n">invoke</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>:preload</code> and <code>:setup</code> steps will be invoked in that order before your <code>:seed</code> call. They are actually unnecessary here, but shown in case you have something more complex to do.</p>

<h2>Client</h2>

<p>The client app is the one running the tests.</p>

<p>The same thing in the Gemfile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;offshore&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Rspec config looks likes this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:suite</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Offshore</span><span class="o">.</span><span class="n">suite</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="ss">:host</span> <span class="o">=&gt;</span> <span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="ss">:port</span> <span class="o">=&gt;</span> <span class="mi">4111</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Offshore</span><span class="o">.</span><span class="n">test</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="n">example</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Offshore</span><span class="o">.</span><span class="n">test</span><span class="o">.</span><span class="n">stop</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="ss">:suite</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Offshore</span><span class="o">.</span><span class="n">suite</span><span class="o">.</span><span class="n">stop</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could also do this based on tags if you didn&#8217;t need this behavior in all your tests.</p>

<h2>How It Works</h2>

<p><img src="http://bleonard.github.io/images/posts/offshore/offshore_interaction.png" alt="Offshore Interaction" /></p>

<p>The <code>rake offshore:startup</code> calls your seed rake worker and then takes a snapshot of the database. We use fixture data and by making a &#8220;template&#8221; of the database, Offshore is able to copy it into place when needed to create the illusion of &#8220;transactional&#8221; behavior.</p>

<p>So now we run the server and have it enabled. Requiring the gem required a Railtie that added the <code>Offshore::Middleware</code> which will respond to the requests that it serves (<code>factory_create</code>, <code>suite_start</code>, <code>suite_stop</code>, <code>test_start</code>, <code>test_stop</code>). Calling <code>Offshore.enable!</code> will tell it to handle the requests. Note you can just add <code>Offshore::Middleware</code> if you want to use this with Sinatra or other <a href="https://github.com/rack/rack">Rack</a> apps.</p>

<p>When it receives the <code>suite_start</code> command, it sets everything up to run and records who is running. The main things to set up are the database and <a href="http://redis.io/">Redis</a> lock. Offshore uses Redis to make sure only one test is using it&#8217;s database at a time, further simulating the notion of transactions.</p>

<p>The <code>test_start</code> command acquires the lock and copies the template to be the <code>real</code> database. If the lock is not acquired, the server will return an error code to the client to say wait. The client will poll until it&#8217;s available.</p>

<p>The client can now call <code>factory_create</code> or real APIs as much as it wants. The changes are made in the real database.</p>

<p>The <code>test_stop</code> command releases the lock.</p>

<p>We can go through many tests, calling <code>start_test</code> each time to reset the database so we get a fresh copy.</p>

<p>At the end, the <code>suite_stop</code> method notes that this client is no longer running.</p>

<h2>Deployment</h2>

<p>Developers can run this locally fairly easily using the instructions above. We have also deployed this to a server that auto-refreshes based on our <code>master</code> branch. This allows our continuous integration service called <a href="https://www.tddium.com/">Tddium</a> to use Offshore as well. Multiple branches can be building at the same time and it works out because of the locks.</p>

<h2>Summary</h2>

<p>We&#8217;ve gained a lot more confidence in the overall performance of our environment by exercising both the server and client app in parts of our test suites. <a href="https://github.com/taskrabbit/offshore">Offshore</a> makes this possible by enabling factories and database &#8220;transactions&#8221; across apps and threads. There&#8217;s plenty more things to make this even better to improve performance, but we thought it was an interesting pattern. Let us know if you find it helpful.</p>

<p>Note that while this is the best approach we could come up with for multiple apps, in our newer project, we chose to have a single app with <a href="/blog/2014/02/11/rails-4-engines/">multiple engines</a>. This was in part to make tricks like that <a href="https://github.com/taskrabbit/offshore">Offshore</a> does unnecessary.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Offshore: Rails Remote Factories</wp:post_id>
            <wp:post_date>2014-03-16 10:31:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Jekyll Slides</title>
            <link>http://bleonard.github.io/blog/2014/03/06/jekyll-slides/</link>
            <pubDate>2014-03-06 15:57:00 -0800</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2014/03/06/jekyll-slides/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>I really like <a href="http://jekyllrb.com/">Jekyll</a>/<a href="http://octopress.org/">Octopress</a> and have aspirations to make my presentations in HTML instead of Powerpoint. For my last <a href="http://www.meetup.com/San-Francisco-Redis-Meetup/events/164972192/">presentation to the Redis Meetup</a>, I combined the two. I found it really easy to &#8220;blog&#8221; the talk and created a <a href="https://github.com/bleonard/jekyll-slides">plugin</a> to convert <a href="http://www.bleonard.com/blog/2014/02/16/resque-bus-presentation/">that</a> to a <a href="http://lab.hakim.se/reveal-js">reveal.js</a> <a href="http://www.bleonard.com/blog/2014/02/16/resque-bus-presentation/slides">presentation</a> from the same source. It&#8217;s my first Jekyll plugin, but it got the job done. Check it out <a href="https://github.com/bleonard/jekyll-slides">here</a>.</p>

<h2>Usage</h2>

<p>Make a new blog post and add <code>slides: simple</code> to the metadata at the top. The value <code>simple</code> refers to the <a href="http://lab.hakim.se/reveal-js/?theme=solarized#/themes">reveal.js theme</a> to use. The options are: <code>beige</code>, <code>blood</code>, <code>moon</code>, <code>night</code>, <code>serif</code>, <code>simple</code>, <code>sky</code>, and <code>solarized</code>.</p>

<p>Here is the header from the <a href="http://www.bleonard.com/blog/2014/02/16/resque-bus-presentation/slides">last presentation</a>:</p>

<pre><code>---
layout: post
published: true
title: "Resque Bus Presentation"
date: 2014-02-16 08:48
comments: true
author: BL
slides: simple
categories: architecture resque redis bus
---
</code></pre>

<p>You then write your normal blog post with a few extra elements mixed in.</p>

<p>For example, you start a slide with the <code>{% slide %}</code> notation. You can also say <code>{% notes %}</code> at the &#8220;bottom&#8221; of a slide. This will not appear in the slideshow, but will appear in the blog post.</p>

<p>You say <code>{% endslide %}</code> at the end of the presentation. You could do this each time, but it&#8217;s inferred by the beginning of a new slide using <code>{% slide %}</code>, so the end notation is only needed at the end.</p>

<p>That&#8217;s about it. Here &#8216;s the whole presentation if it was only a few of the slides:</p>

<pre><code>{% slide %}

## Resque Bus

### Brian Leonard

##### TaskRabbit
##### 02/17/2014

{% notes %}

Hi, my name is Brian Leonard and I'm the Chief Architect and Technical Cofounder of TaskRabbit. TaskRabbit is a marketplace where neighbors help neighbors get things done.

At TaskRabbit we are using Redis and Resque to do all of our background processing. We've also gone one step further to use these tools to create an asynchronous message bus system that we call Resque Bus.

{% slide %}

### Redis

* Key/Value Store
* Atomic Operations

![Redis Logo](http://bleonard.github.io/images/posts/resque-bus-presentation/redis-logo.jpeg)

{% notes %}

I don't have to tell you guys about Redis, but for our purposes the main point is that we can store stuff in it and the operations are atomic.

{% slide %}

## Thanks!

Questions?

{% endslide %}
</code></pre>

<p>Compilation produces the <a href="http://www.bleonard.com/blog/2014/02/16/resque-bus-presentation/">blog post here</a> as well as the <a href="http://www.bleonard.com/blog/2014/02/16/resque-bus-presentation/slides">presentation here</a>.</p>

<!-- more -->


<h2>Installation</h2>

<p>The jekyll-slides repo is <a href="https://github.com/bleonard/jekyll-slides">here</a>. Clone the project.</p>

<pre><code>cd jekyll-slides
./install ~/your/blog/path
</code></pre>

<p>This will run a bash script that copies over the necessary files.</p>

<ul>
<li>plugins/slides.rb</li>
<li>assets/slides/(js|css)</li>
<li>layouts/slides.html</li>
</ul>


<p>It also will add a link to <code>/assets/slides/css/for_blog.css</code> in the custom head.html file that <a href="http://octopress.org/">octopress</a> uses within _includes. If you have another setup, you&#8217;ll have to add something like this to your normal blog layout:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/assets/slides/css/for_blog.css&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That should be it. I couldn&#8217;t find a best practice for installing these plugins so I made this script. I&#8217;ve tested it on a fresh octopress install and it works as expected. If you have another setup or other issues, please let me know.</p>

<h2>Extra Options</h2>

<p>There are a few other things I threw in that I wanted to have in my presentation.</p>

<p>The reveal.js framework supports <a href="http://lab.hakim.se/reveal-js/#/2">vertical slides</a>. This is handled in jekyll through the <code>{% slide_top %}</code> and <code>{% slide_bottom %}</code> tags used instead of the normal <code>{% slide %}</code> one. The first one in a vertical stack is noted as <code>slide_top</code>, the last one is <code>slide_bottom</code> and the ones in the middle are just <code>slide</code>.</p>

<p>It also supports other metadata on the slide. For example, if you add <code>data-transition="none"</code> to the <code>&lt;section class="slide"&gt;</code> it will affect the transition. You can add metadata by adding it to the <code>{% slide %}</code> (or <code>{% slide_top %}</code> or <code>{% slide_bottom %}</code>) tag. The <code>data-background</code> options should also work with this approach.</p>

<p>Here is the example from the presentation</p>

<pre><code>{% slide_top transition: none %}

![Bus 2](http://bleonard.github.io/images/posts/resque-bus-presentation/rating_bus_2.png)

{% notes %}

As you can see, the difference is this new layer of `resquebus_incoming` that we've added, so now it looks like this.

{% slide transition: none %}

![Bus 3](http://bleonard.github.io/images/posts/resque-bus-presentation/rating_bus_3.png)

{% notes %}

Several more slides in the stack

{% slide_bottom transition: none %}

![Bus 9](http://bleonard.github.io/images/posts/resque-bus-presentation/rating_bus_9.png)
</code></pre>

<h2>Supported Reveal Features</h2>

<p>A few of the presentation-mode features are supported as well. Hitting the <code>f</code> key in the presentation will put it in full screen mode.</p>

<p>Speaker notes are also supported. Hitting <code>s</code> in the presentation will launch a new window that shows the current and next slides along with the current notes.</p>

<h2>Technical Details</h2>

<p>All the ruby code is in <a href="https://github.com/bleonard/jekyll-slides/blob/master/slides.rb">slides.rb</a>. It implements the tags used, all of which extend from <code>Liquid::Tag</code>. Each available tag is mapped to a ruby class the outputs HTML.</p>

<p>I tried to be as minimal as possible about tag use. That is, there are no blocks or unnecessary end tags. To do this, context is kept in memory about where we are in the hierarchy. For example, if it hits a new <code>{% slide %}</code> call, it knows it hasn&#8217;t closed out the last one and takes care of that before proceeding.</p>

<p>It was important that all of these tags only take effect if the page/post was marked as <code>slide</code> in the metadata. Similarly, I extended the <code>Site</code> compile process to produce the extra files (one for slides and one for notes) if it has the same metadata field.</p>

<p>Something interesting was that I was trying to output HTML, but I think Jekyll/Liquid was expecting that it was outputting Markdown. This probably usually works out fine as HTML can be rendered in Markdown and the HTML is usually something inline and not huge blocks. The issue was that it put <code>&lt;p&gt;</code> tags around everything which threw off the reveal.js situation. To fix this, I go back over the text in the compilation process and remove those <code>&lt;p&gt;</code> tags with a fairly targeted <code>gsub</code> call.</p>

<h2>Summary</h2>

<p>It&#8217;s likely a limitation added by the translation layer, but I didn&#8217;t have the control I wanted to over the slides. In Powerpoint, I would have made them just right. I&#8217;m not sure if I could achieve that even in straight HTML without massive effort and this added abstraction might be insurmountable.</p>

<p>So we&#8217;ll see how it goes. I achieved what I was trying to do with this and I hope you get some use of out of it. I&#8217;ll probably iterate on it a bit to see if I can make the slides better. Pull requests quite welcome.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Jekyll Slides</wp:post_id>
            <wp:post_date>2014-03-06 15:57:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Resque Bus Presentation</title>
            <link>http://bleonard.github.io/blog/2014/02/16/resque-bus-presentation/</link>
            <pubDate>2014-02-16 08:48:00 -0800</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2014/02/16/resque-bus-presentation/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p><a href="/blog/2014/02/16/resque-bus-presentation/slides"><h2>View the Presentation</h2></a></p>

<h5>Or view the slide sheet below</h5>


<hr />


<section class='slide'><div class='content'>

<h2>Resque Bus</h2>

<h3>Brian Leonard</h3>

<h5>TaskRabbit</h5>

<h5>02/17/2014</h5>

<!-- more -->


</div>

<aside class='notes'>

<p>Hi, my name is Brian Leonard and I&#8217;m the Chief Architect and Technical Cofounder of TaskRabbit. TaskRabbit is a marketplace where neighbors help neighbors get things done.</p>

<p>At TaskRabbit we are using Redis and Resque to do all of our background processing. We&#8217;ve also gone one step further to use these tools to create an asynchronous message bus system that we call Resque Bus.</p>

</aside>

</section>

<section class='slide'><div class='content'>

<h3>Redis</h3>

<ul>
<li>Key/Value Store</li>
<li>Atomic Operations</li>
</ul>


<br/>


<p><img src="http://bleonard.github.io/images/posts/resque-bus-presentation/redis-logo.jpeg" alt="Redis Logo" /></p>

</div>

<aside class='notes'>

<p>I don&#8217;t have to tell you guys about Redis, but for our purposes the main point is that we can store stuff in it and the operations are atomic.</p>

</aside>

</section>

<section class='slide'><div class='content'>

<h3>Resque</h3>

<p><img src="http://bleonard.github.io/images/posts/resque-bus-presentation/resque-screenshot.png" alt="Resque UI" /></p>

</div>

<aside class='notes'>

<p><a href="https://github.com/defunkt/resque">Resque</a> is a background queue built on top of Redis. It uses arrays and the atomic properties of Redis to get this done.</p>

<p>The ability to put things in order and then atomically pop an item from the list is all that is really needed for a great background queue and Redis fits perfectly.</p>

<p>There is plenty of code, but it all comes down to inserting json the queue, popping, and executing code with that as an input.</p>

</aside>

</section>

<section class='slide'><div class='content'>

<h3>Resque Pattern</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Rating</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">after_commit</span> <span class="ss">:enqueue_worker</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">enqueue_worker</span>
</span><span class='line'>    <span class="no">Resque</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="no">CalculateAverageWorker</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CalculateAverageWorker</span>
</span><span class='line'>  <span class="vi">@queue</span> <span class="o">=</span> <span class="ss">:default</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">perform</span><span class="p">(</span><span class="n">rating_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rating</span> <span class="o">=</span> <span class="no">Rating</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">rating_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">total</span>  <span class="o">=</span> <span class="no">Rating</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">rabbit_id</span><span class="p">:</span> <span class="n">rating</span><span class="o">.</span><span class="n">rabbit_id</span><span class="p">)</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>    <span class="n">sum</span>    <span class="o">=</span> <span class="no">Rating</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">rabbit_id</span><span class="p">:</span> <span class="n">rating</span><span class="o">.</span><span class="n">rabbit_id</span><span class="err">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="ss">:value</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">profile</span> <span class="o">=</span> <span class="no">RabbitProfile</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">rating</span><span class="o">.</span><span class="n">rabbit_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profile</span><span class="o">.</span><span class="n">ratings_total</span>  <span class="o">=</span> <span class="n">total</span>
</span><span class='line'>    <span class="n">profile</span><span class="o">.</span><span class="n">rating_average</span> <span class="o">=</span> <span class="n">sum</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="p">(</span><span class="mi">5</span><span class="o">*</span><span class="n">total</span><span class="o">.</span><span class="n">to_f</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profile</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


</div>

<aside class='notes'>

<p>The pattern goes something like this: something happens on the main (request) thread. It queues up a worker in the background with a class name and arguments. In this case, we enqueue the CalculateAverageWorker with the new rating id. The background worker then does whatever it needs to do. In this case, we update the TaskRabbit&#8217;s average rating on her profile.</p>

</aside>

</section>

<section>

<section class='slide' data-transition='none'><div class='content'>

<p><img src="http://bleonard.github.io/images/posts/resque-bus-presentation/rating_resque_1.png" alt="Resque 1" /></p>

</div>

<aside class='notes'>

<p>Looking at the Redis data workflow, it looks like this.</p>

</aside>

</section>

<section class='slide' data-transition='none'><div class='content'>

<p><img src="http://bleonard.github.io/images/posts/resque-bus-presentation/rating_resque_2.png" alt="Resque 2" /></p>

</div>

</section>

<section class='slide' data-transition='none'><div class='content'>

<p><img src="http://bleonard.github.io/images/posts/resque-bus-presentation/rating_resque_3.png" alt="Resque 3" /></p>

</div>

</section>

<section class='slide' data-transition='none'><div class='content'>

<p><img src="http://bleonard.github.io/images/posts/resque-bus-presentation/rating_resque_4.png" alt="Resque 4" /></p>

</div>

</section>

</section>

<section class='slide'><div class='content'>

<h3>New Profile App</h3>

<p><img src="http://bleonard.github.io/images/posts/resque-bus-presentation/rating_bus_1.png" alt="Bus 1" /></p>

</div>

<aside class='notes'>

<p>As we moved our code to a more service-oriented architecture, we wanted to move profiles to a new Rails app. Most of this app was concerned with uploading media and content and other ways for our TaskRabbits to market themselves. A very minor point is this app is this number to display on a profile. Something like that did not justify <em>not</em> splitting up the app, but it was still something that needed to happen.</p>

</aside>

</section>

<section class='slide'><div class='content'>

<h3>Resque Bus Pattern</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Rating</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">after_commit</span> <span class="ss">:enqueue_worker</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">enqueue_worker</span>
</span><span class='line'>    <span class="no">ResqueBus</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s2">&quot;rating_created&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># initializer</span>
</span><span class='line'><span class="no">ResqueBus</span><span class="o">.</span><span class="n">dispatch</span><span class="p">(</span><span class="s2">&quot;profile&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">subscribe</span> <span class="s2">&quot;rating_created&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">attributes</span><span class="o">|</span>
</span><span class='line'>    <span class="n">rating</span> <span class="o">=</span> <span class="no">Rating</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">rating_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">total</span>  <span class="o">=</span> <span class="no">Rating</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">rabbit_id</span><span class="p">:</span> <span class="n">rating</span><span class="o">.</span><span class="n">rabbit_id</span><span class="p">)</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>    <span class="n">sum</span>    <span class="o">=</span> <span class="no">Rating</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">rabbit_id</span><span class="p">:</span> <span class="n">rating</span><span class="o">.</span><span class="n">rabbit_id</span><span class="err">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="ss">:value</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">profile</span> <span class="o">=</span> <span class="no">RabbitProfile</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">rating</span><span class="o">.</span><span class="n">rabbit_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profile</span><span class="o">.</span><span class="n">ratings_total</span>  <span class="o">=</span> <span class="n">total</span>
</span><span class='line'>    <span class="n">profile</span><span class="o">.</span><span class="n">rating_average</span> <span class="o">=</span> <span class="n">sum</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="p">(</span><span class="mi">5</span><span class="o">*</span><span class="n">total</span><span class="o">.</span><span class="n">to_f</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profile</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


</div>

<aside class='notes'>

<p>So this is more or less the same thing, but with different syntax. The difference is that the rating calculation code can now live in another app. This is possible because of the layer of abstraction that ResqueBus adds.</p>

</aside>

</section>

</section>

<section>

<section class='slide' data-transition='none'><div class='content'>

<p><img src="http://bleonard.github.io/images/posts/resque-bus-presentation/rating_bus_2.png" alt="Bus 2" /></p>

</div>

<aside class='notes'>

<p>As you can see, the difference is this new layer of <code>resquebus_incoming</code> that we&#8217;ve added, so now it looks like this:</p>

<ul>
<li>Profile App subscribes to events (puts a hash in Redis saying what it is interested in)</li>
<li>Task App publishes the event (puts published hash as args in a Resque queue called <code>resquebus_incoming</code> with a class of <code>Driver</code>)</li>
<li>The <code>Driver</code> copies the event hash to 0 to N application queues based on subscriptions (arg hash now in <code>profile_default</code> queue with a class of <code>Rider</code>)</li>
<li>The <code>Rider</code> in Profile App executes the block given in the subscription</li>
</ul>


</aside>

</section>

<section class='slide' data-transition='none'><div class='content'>

<p><img src="http://bleonard.github.io/images/posts/resque-bus-presentation/rating_bus_3.png" alt="Bus 3" /></p>

</div>

</section>

<section class='slide' data-transition='none'><div class='content'>

<p><img src="http://bleonard.github.io/images/posts/resque-bus-presentation/rating_bus_4.png" alt="Bus 4" /></p>

</div>

</section>

<section class='slide' data-transition='none'><div class='content'>

<p><img src="http://bleonard.github.io/images/posts/resque-bus-presentation/rating_bus_5.png" alt="Bus 5" /></p>

</div>

</section>

<section class='slide' data-transition='none'><div class='content'>

<p><img src="http://bleonard.github.io/images/posts/resque-bus-presentation/rating_bus_6.png" alt="Bus 6" /></p>

</div>

</section>

<section class='slide' data-transition='none'><div class='content'>

<p><img src="http://bleonard.github.io/images/posts/resque-bus-presentation/rating_bus_7.png" alt="Bus 7" /></p>

</div>

</section>

<section class='slide' data-transition='none'><div class='content'>

<p><img src="http://bleonard.github.io/images/posts/resque-bus-presentation/rating_bus_8.png" alt="Bus 8" /></p>

</div>

</section>

<section class='slide' data-transition='none'><div class='content'>

<p><img src="http://bleonard.github.io/images/posts/resque-bus-presentation/rating_bus_9.png" alt="Bus 9" /></p>

</div>

</section>

</section>

<section class='slide'><div class='content'>

<h3>It&#8217;s Just Resque</h3>

<p><img src="http://bleonard.github.io/images/posts/resque-bus-presentation/resque-screenshot.png" alt="Resque UI" /></p>

</div>

<aside class='notes'>

<p>The thing to note here is that it&#8217;s all still Resque workers; which, in turn, is all just moving things around in Redis. This allows us leverage our current infrastructure but with new-found capabilities. The simplicity also allows us use technologies other than Ruby itself. For example, [Evan] just wrote a <a href="http://github.com/taskrabbit/node-resque">resque</a> and <a href="http://github.com/taskrabbit/node-resquebus">resque-bus</a> client in node.</p>

</aside>

</section>

<section class='slide'><div class='content'>

<h3>Use Cases</h3>

<p>Publishing all all data changes, especially state changes.</p>

<ul>
<li>Rails app communication</li>
<li>Bus Apps</li>
<li>Loggers</li>
</ul>


</div>

<aside class='notes'>

<p>We publish all the time, basically every time the data changes. We&#8217;ve found it&#8217;s particularly important to publish when the state of an object changes. For example a Task goes from the assigned state to the completed state. Some of these events have many subscribers. Many events are completely ignored (at the moment) and that is fine too.</p>

</aside>

</section>

<section class='slide'><div class='content'>

<h3>Rails app communication</h3>

<ul>
<li>Own codebase and storage mechanisms</li>
<li>+1: Local Simplicity</li>
<li>+1: Local Specialization</li>
<li>-1: Global Complexity</li>
</ul>


</div>

<aside class='notes'>

<p>This is like the profile app case. It has it&#8217;s own codebase and storage to optimize that particular experience. Specifically, it&#8217;s much more of a document store than the other app, which is more relational.</p>

<p>The separation described here between the two systems involved (Tasks and Profiles) has had a few effects.</p>

<p>Local simplicity has increased. Each system does what it does with simpler code than if it was all combined into the same thing.</p>

<p>Local specialization has increased. For example, now that the profile experience is separate in code, I feel better in choosing the right storage solution for that experience. When in one system, it feels like &#8220;yet another thing&#8221; added to something that&#8217;s already complicated.</p>

<p>Global complexity has increased. This separation has a cost and it is in the number of moving pieces. More moving pieces adds maintenance costs through mysterious bugs, time in runtime execution, and overall cognitive load on the developer. It&#8217;s case by case, but we believe it can be worth it.</p>

</aside>

</section>

<section class='slide'><div class='content'>

<h3>Bus Apps</h3>

<ul>
<li>No UI, only listens to bus</li>
<li>+1: Local Simplicity</li>
<li>+1: Local Specialization</li>
<li>+1: Memory Profile</li>
</ul>


<p>Examples</p>

<ul>
<li>External Analytics</li>
<li>Communications</li>
<li>Fraud</li>
</ul>


</div>

<aside class='notes'>

<p>We have several apps that have no UI and only exist to listen to the bus and take action accordingly. For example, we have a fraud app that might subscribe to the ratings event, along with several others, to help look for fraudulent or &#8220;bad&#8221; behavior. These apps can be very specialized and focused. It&#8217;s easy to let a team member own the problem and run with it without worrying about anything else in the system. The straightforwardness allows them to be just a simple ruby process too, which drastically reduces memory usage.</p>

</aside>

</section>

<section class='slide'><div class='content'>

<h3>Switchboard</h3>

<ul>
<li>Centralized sending email, text messages, push notifications, etc.</li>
<li>No shared knowledge or credentials</li>
<li>Asynchronous API for all apps to use and just focus on the content.</li>
</ul>


</div>

<aside class='notes'>

<p>The best example of a bus app is what we call Switchboard. It receives an event that indicates that a text message needs to be sent, so it does so. Or it can look at the user&#8217;s preference and decide not send it.</p>

<p>Switchboard allows all of the apps in the system to send mails and text messages and push notifications without knowing how to do it. In effect, Resque Bus and Switchboard create an asynchronous API. It&#8217;s just instead of being a normal API call, it&#8217;s knowing what to publish to the bus.</p>

<p>In a decentralized system, this adds a lot of value by encapsulating knowledge about Twilio and other external providers and making is dead simple for the various apps to accomplish these tasks. They can just focus on the content and move on.</p>

</aside>

</section>

<section class='slide'><div class='content'>

<h3>Loggers</h3>

<ul>
<li>Subscribes to everything that&#8217;s published</li>
<li>Writes to Elastic Search</li>
</ul>


<p>Enabling&#8230;</p>

<ul>
<li>Tracing events through system</li>
<li>Simple centralized logging</li>
<li>Realtime business dashboards and metrics</li>
</ul>


</div>

<aside class='notes'>

<p>This is a specialized case of the bus app that I think is really interesting. The app subscribes to everything by doing a regex with a <em>dot</em> <em>plus</em>. Any app can now save something to Elastic search by publishing to the bus. We can then also query this index to get all kinds of interesting data like tracing event through the system or adding up revenue for the day on a refreshing screen.</p>

</aside>

</section>

<section class='slide'><div class='content'>

<h3>Best Practices</h3>

<ul>
<li>Always Be Publishing</li>
<li>Make many small bus apps</li>
<li>Start small</li>
</ul>


</div>

<aside class='notes'>

<p>It&#8217;s fine if an event is completely ignored. Even at the base case, we have recorded what happened in the system for admins to examine later. In our most-used cases, we&#8217;ve seen events like the user signing up to trigger many parallel code paths such as notification, search indexing, fraud checking, analytics analysis, etc. All of this happens while the most important code (the signup itself) has remained unchanged and focused.</p>

<p>The value continues to increase with each subscriber. Small, self-contained, reactive bus apps that process things that can be done asynchronously keep things really tight.</p>

<p>Like any architectural principal, it&#8217;s easy to overuse something and have it generally get out of control. To get started, start publishing a bunch of things. Then add a few subscribers without your own app. Those &#8220;bus apps&#8221; can be within your main codebase too. If you&#8217;re on Rails, maybe within an <a href="http://tech.taskrabbit.com/blog/2014/02/11/rails-4-engines/">engine</a> or even just regular code. See how it works and expand if you like it.</p>

</aside>

</section>

<section class='slide'><div class='content'>

<h2>Thanks!</h2>

<p>Questions?</p>

</div>

</section>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Resque Bus Presentation</wp:post_id>
            <wp:post_date>2014-02-16 08:48:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Rails 4 Engines</title>
            <link>http://bleonard.github.io/blog/2014/02/11/rails-4-engines/</link>
            <pubDate>2014-02-11 16:27:00 -0800</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2014/02/11/rails-4-engines/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>At <a href="https://www.taskrabbit.com">TaskRabbit</a>, we have gone through a few iterations on how we make our app(s). In the beginning, there was the monolithic Rails app in the standard way with 100+ models and their many corresponding controllers and views. Then we moved to several apps with their own logic and often using the big one via API. Our newest <a href="https://taskrabbit.co.uk">project</a> is a single &#8220;app&#8221; made up of several Rails engines. We have found that this strikes a great balance between the (initial) straightforwardness of the single Rails app and the modularity of the more service-oriented architecture.</p>

<p>We&#8217;ve talked about this approach with a few people and they often ask very specific questions about the tactics used to make this happen, so let&#8217;s go through it here and via a <a href="https://github.com/taskrabbit/rails_engines_example">sample application</a>.</p>

<h2>Rails Engines</h2>

<p><a href="http://edgeguides.rubyonrails.org/engines.html">Rails Engines</a> is basically a whole Rails app that lives in the container of another one. Put another way, as the docs note: an app itself is basically just an engine at the root level. Over the years, we&#8217;ve seen sen engines as parts of gems such as <a href="https://github.com/plataformatec/devise/blob/7a9ae13baadc3643d0f5b74077d9760d19c56adb/lib/devise/rails.rb">devise</a> or <a href="https://github.com/sferik/rails_admin/blob/master/lib/rails_admin/engine.rb">rails_admin</a>. These example show the power of engines by providing a large set of relatively self-contained functionality &#8220;mounted&#8221; into an app.</p>

<p>At some point, there was a talk that suggested the approach of putting my our functionality into engines and that the Rails team seemed to be devoting more and more time to make them a first class citizen. Our friends at Pivotal Labs were talking about it a lot, too. Sometimes <a href="http://pivotallabs.com/migrating-from-a-single-rails-app-to-a-suite-of-rails-engines/">good</a> and sometimes <a href="http://pivotallabs.com/experience-report-engine-usage-that-didn-t-work/">not so good</a>.</p>

<h2>Versus Many Apps</h2>

<p>We&#8217;d seen an app balloon and get out of control before, leading us to try and find better ways of modularization. It was fun and somewhat liberating to say &#8220;Make a new app!&#8221; when there was a new problem domain to tackle. We also used it as a way to handle our growing organization. We could ask Team A to work on App A and know that they could run faster by understanding the scope was limited to that. As a side-note and in retrospect, we probably let organizational factors affect architecture way more than appropriate.</p>

<p>Lots of things were great about this scenario. The teams had freedom to explore new approaches and we learned a lot. App B could upgrade Rack (or whatever) because it depend on the crazy thing that App A depended on. App C had the terrible native code-dependent gem and we only had to put that on the App C servers. Memory usage was kept lower, allowing us to run more background workers and unicorn threads.</p>

<!-- more -->


<p>But things got rough in coordinating across these apps. It wasn&#8217;t just the data access. We made APIs and allowed any app to have read-only access to the platform app&#8217;s database. This allowed things go much faster by preventing creation of many GET endpoints and possible points of failure. The main issue in coordinating releases that spanned apps. They just went slower than if it was one codebase. There was also interminable bumping of gem versions to get shared code to all the apps. Integration testing the whole experience was also very rough.</p>

<p>So it&#8217;s a simple one, but the main advantage that we&#8217;ve seen in the engine model is that it is one codebase and git repo. A single pull request has everything related to that feature. It rolls out atomically. Gems can be bumped once and our internal gems aren&#8217;t bumped at all as they live unbuilt in a <code>gems</code> folder in the app itself. We still get most of the modularization that multiple apps had. For example, the User model in the payments engine has all the stuff about balances and the one in the profile engine doesn&#8217;t know anything about all that and it&#8217;s various helper methods.</p>

<p>The issue with gem upgrades and odd server configurations does continue to exist in the engine model and is mostly fine in the many app model. The gem one is tough and we just try to stay on top of upgrading to the newest things and overall reducing dependencies. The specs will also run slower in the engine app, but you&#8217;ll have better integration testing. I&#8217;ll go over a little bit about we&#8217;ve tackled server configurations and memory further down.</p>

<h2>Versus Single App</h2>

<p>It&#8217;s very tempting when green-fielding a project to just revert back to the good-old-days of the original app. Man, that was so nice back before the (too) fat models and tangled views and combinatorics of 4 years of iterating screwed things up. And we&#8217;ve learned a lot since then too, right? Especially about saying no to all those <a href="http://firstround.com/article/The-one-cost-engineers-and-product-managers-dont-consider">combinatorics</a> and also using <a href="http://robots.thoughtbot.com/tidy-views-and-beyond-with-decorators">decorators</a> and <a href="http://adequate.io/culling-the-activerecord-lifecycle">service objects</a> and using <a href="http://www.api-first.com/">APIs</a>. Maybe.</p>

<p>What we do know is that you can feel that way again even a year into an app. Inside any given engine, you have the scope of a much smaller project. Some engines may grow larger and you&#8217;ll start to use those tools to keep things under control. Some will (correctly) have limited scope and feel like a simple app in which you understand everything that is happening. For example, decorators are great tool and they came in handy in our big app and larger engines. However, we&#8217;ve found in an a targeted engine that only serves its one purpose, it feels like there is room in that model to have some things that would have been decorated in a larger app. This is because it doesn&#8217;t have all that other junk in it. Only this engine&#8217;s junk :-)</p>

<h2>Engine Usage</h2>

<p>We&#8217;ve seen a few different ways to use engines in a Rails project. A few examples are below. The basic variables are what is in the &#8220;operator&#8221; (root) app and what kind of app we&#8217;re making (API driven or not).</p>

<h3>Admin</h3>

<p>The first engine we&#8217;ve recommend making to people is the admin engine. In the first app, we made the mistake of putting admin functionality in the &#8220;normal&#8221; pages. It was very enticing. We had that form already for the user to edit it. Just by changing the permissions, we could allow the admin to edit it, too. Forms are cheap and admins want extra fields. And more info. And basically a different UI.</p>

<p>So we can made an engine basically just like rails_admin did and gave it&#8217;s own layout and views and JS and models and controllers, etc. Overall, we started treating our hardworking admins like we should: a customer with their own needs and dedicated experience.</p>

<p>The structure looked something like this&#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app
</span><span class='line'>  assets
</span><span class='line'>  controllers
</span><span class='line'>  models
</span><span class='line'>    user.rb
</span><span class='line'>    post.rb
</span><span class='line'>  views
</span><span class='line'>    layouts
</span><span class='line'>admin
</span><span class='line'>  app
</span><span class='line'>    assets
</span><span class='line'>    controllers
</span><span class='line'>    models
</span><span class='line'>      admin
</span><span class='line'>        user.rb
</span><span class='line'>        post.rb
</span><span class='line'>    views
</span><span class='line'>      layouts
</span><span class='line'>config
</span><span class='line'>db
</span><span class='line'>  migrate
</span><span class='line'>gems
</span><span class='line'>spec</span></code></pre></td></tr></table></div></figure>


<p>When we had this all mixed into one interface and set of models, at least a third of the code in a model like <code>Post</code> or <code>User</code> would be admin-specific actions. With this approach, we can give the admins a better, targeted experience and keep that code in admin-land.</p>

<p>Throughout these engine discussions, the question of sharing code and/or inheriting from objects will keep coming up. Specifically, for the admin scenario, we say do whatever works for you and on a case by case basis. In the above approach, we would probably tend to have <code>Admin::Post &lt; ::Post</code> and other such inheritance. In Rails 2, we probably wouldn&#8217;t have done what as they would have different <code>attr_accessible</code> situations but that&#8217;s happening in the controller these days, so now inheriting from them will just get the benefit of the data validations, which is something we definitely want to share.</p>

<p>Note that inheriting is probably a bad choice if you have callbacks in the root model that you don&#8217;t want triggered when the admin saves the record. In that case, it would be better to <code>Admin::Post &lt; ActiveRecord::Base</code> and either duplicate the logic, have it only in SQL table (unique indexes for example), or have a mixin that is included in both.</p>

<h3>Shared Code</h3>

<p>The note about controllers being in charge of the parameters involved leads to the next possibility. You can have your models (at least the ones you need to have shared) in the operator and all the other stuff in the engines. At this point, maybe you could add the <code>engines</code> namespace to be more clear.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app
</span><span class='line'>  models
</span><span class='line'>    user.rb
</span><span class='line'>    post.rb
</span><span class='line'>config
</span><span class='line'>db
</span><span class='line'>  migrate
</span><span class='line'>engines
</span><span class='line'>  customer
</span><span class='line'>    app
</span><span class='line'>      assets
</span><span class='line'>      controllers
</span><span class='line'>      models
</span><span class='line'>        customer
</span><span class='line'>          something_admin_doesnt_use.rb
</span><span class='line'>      views
</span><span class='line'>        layouts
</span><span class='line'>  admin
</span><span class='line'>    app
</span><span class='line'>      assets
</span><span class='line'>      controllers
</span><span class='line'>      models
</span><span class='line'>        admin
</span><span class='line'>          admin_notes.rb
</span><span class='line'>      views
</span><span class='line'>        layouts
</span><span class='line'>gems
</span><span class='line'>spec</span></code></pre></td></tr></table></div></figure>


<p>Now you can use <code>Post</code> from both and everything is just fine. This would work out well if it&#8217;s mostly the data definition you are using and like to use things like decorators and/or service objects and/or fat controllers in your engines.</p>

<p>You could also put layouts or mixins in the operator. This might be a good idea if you were sharing the layout between two engines. At that point, maybe we&#8217;ll just go all in on the engines by making a <code>shared</code> engine. Having a namespace for clarity is much simpler.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apps
</span><span class='line'>  shared
</span><span class='line'>    app
</span><span class='line'>      assets
</span><span class='line'>      controllers
</span><span class='line'>        shared
</span><span class='line'>          authentication.rb
</span><span class='line'>      models
</span><span class='line'>        shared
</span><span class='line'>          post.rb
</span><span class='line'>          user.rb
</span><span class='line'>      views
</span><span class='line'>        shared
</span><span class='line'>          layouts
</span><span class='line'>  marketing
</span><span class='line'>    app
</span><span class='line'>      controllers
</span><span class='line'>        marketing
</span><span class='line'>          application_controller.rb
</span><span class='line'>          home_controller.rb
</span><span class='line'>  content
</span><span class='line'>    controllers
</span><span class='line'>    models
</span><span class='line'>      content
</span><span class='line'>        something_admin_doesnt_use.rb
</span><span class='line'>  admin
</span><span class='line'>    app
</span><span class='line'>      assets
</span><span class='line'>      controllers
</span><span class='line'>      models
</span><span class='line'>        admin
</span><span class='line'>          admin_notes.rb
</span><span class='line'>      views
</span><span class='line'>        layouts
</span><span class='line'>config
</span><span class='line'>db
</span><span class='line'>  migrate
</span><span class='line'>gems
</span><span class='line'>spec</span></code></pre></td></tr></table></div></figure>


<p>In this structure, admin can still get it&#8217;s own layout if it wants, but marketing and content can easily share the same layout in addition to the models.</p>

<p>The <a href="https://github.com/taskrabbit/rails_engines_example">example in Github</a> takes this just one step farther by not sharing models at all. Sharing the actual model can still lead to the <a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">god model</a> situation of a mono-Rails app without the use of other mitigating objects. To keep things as tight as possible, we&#8217;ve allowed each engine to have their own <a href="https://github.com/taskrabbit/rails_engines_example/blob/434e687b795ec52705a3be1dd2c635f0054336d4/apps/content/app/models/content/user.rb">User</a> object, for example. If there is model code to share, it would still go in the shared engine, but as a mixin like <a href="https://github.com/taskrabbit/rails_engines_example/blob/434e687b795ec52705a3be1dd2c635f0054336d4/apps/shared/app/models/shared/user/display.rb">this one</a>. Note that in a well-designed schema, only one of these actually writes to the database and the others include a <code>ReadOnly</code> module from the shared engine.</p>

<p>The repo&#8217;s structure looks as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apps
</span><span class='line'>  shared
</span><span class='line'>    app
</span><span class='line'>      assets
</span><span class='line'>      controllers
</span><span class='line'>        shared
</span><span class='line'>          controller
</span><span class='line'>            authentication.rb
</span><span class='line'>      models
</span><span class='line'>        shared
</span><span class='line'>          model
</span><span class='line'>            read_only.rb
</span><span class='line'>          user
</span><span class='line'>            user_display.rb
</span><span class='line'>      views
</span><span class='line'>        shared
</span><span class='line'>          layouts
</span><span class='line'>  marketing
</span><span class='line'>    app
</span><span class='line'>      controllers
</span><span class='line'>        marketing
</span><span class='line'>          application_controller.rb
</span><span class='line'>          home_controller.rb
</span><span class='line'>        models
</span><span class='line'>          marketing
</span><span class='line'>            user.rb
</span><span class='line'>    db
</span><span class='line'>      migrate
</span><span class='line'>  account
</span><span class='line'>    app
</span><span class='line'>      controllers
</span><span class='line'>      models
</span><span class='line'>        content
</span><span class='line'>          user.rb
</span><span class='line'>          post.rb
</span><span class='line'>    db
</span><span class='line'>      migrate
</span><span class='line'>  content
</span><span class='line'>    app
</span><span class='line'>      assets
</span><span class='line'>      controllers
</span><span class='line'>      models
</span><span class='line'>        admin
</span><span class='line'>          post.rb
</span><span class='line'>          user.rb
</span><span class='line'>    db
</span><span class='line'>      migrate
</span><span class='line'>  admin
</span><span class='line'>    app
</span><span class='line'>      assets
</span><span class='line'>      controllers
</span><span class='line'>      models
</span><span class='line'>        admin
</span><span class='line'>          admin_notes.rb
</span><span class='line'>          post.rb
</span><span class='line'>          user.rb
</span><span class='line'>      views
</span><span class='line'>        layouts
</span><span class='line'>    db
</span><span class='line'>      migrate
</span><span class='line'>config
</span><span class='line'>gems
</span><span class='line'>spec</span></code></pre></td></tr></table></div></figure>


<h3>API Server</h3>

<p>Our latest project at TaskRabbit basically looks the the above and the <a href="https://github.com/taskrabbit/rails_engines_example">example</a> with one difference: we don&#8217;t share layouts between our engines. We&#8217;ve made the choice to have all the frontend code in one engine and all of the other engines just serve API endpoints. There are several shared mixins for these backend engines, but they don&#8217;t need a layout because they are just using <a href="https://github.com/rails/jbuilder">jbuilder</a> to send back JSON to the frontend client. The frontend engine, therefore, doesn&#8217;t really use any models and has all the assets and such. Admin still has its own layout and uses a more traditional Rails MVC approach.</p>

<p>It looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apps
</span><span class='line'>  shared
</span><span class='line'>    app
</span><span class='line'>      assets
</span><span class='line'>      controllers
</span><span class='line'>        shared
</span><span class='line'>          controller
</span><span class='line'>            authentication.rb
</span><span class='line'>      models
</span><span class='line'>        shared
</span><span class='line'>          model
</span><span class='line'>            read_only.rb
</span><span class='line'>          user
</span><span class='line'>            user_display.rb
</span><span class='line'>  frontend
</span><span class='line'>    app
</span><span class='line'>      assets
</span><span class='line'>      controllers
</span><span class='line'>        marketing
</span><span class='line'>          application_controller.rb
</span><span class='line'>          home_controller.rb
</span><span class='line'>        models
</span><span class='line'>          marketing
</span><span class='line'>            user.rb
</span><span class='line'>      views
</span><span class='line'>        frontend
</span><span class='line'>          layouts
</span><span class='line'>  account
</span><span class='line'>    app
</span><span class='line'>      controllers
</span><span class='line'>      models
</span><span class='line'>        content
</span><span class='line'>          user.rb
</span><span class='line'>          post.rb
</span><span class='line'>      views
</span><span class='line'>        account
</span><span class='line'>          users
</span><span class='line'>            show.json.jbuilder
</span><span class='line'>    db
</span><span class='line'>      migrate
</span><span class='line'>  content
</span><span class='line'>    app
</span><span class='line'>      controllers
</span><span class='line'>      models
</span><span class='line'>        admin
</span><span class='line'>          post.rb
</span><span class='line'>          user.rb
</span><span class='line'>      views
</span><span class='line'>    db
</span><span class='line'>      migrate
</span><span class='line'>  admin
</span><span class='line'>    app
</span><span class='line'>      assets
</span><span class='line'>      controllers
</span><span class='line'>      models
</span><span class='line'>        admin
</span><span class='line'>          admin_notes.rb
</span><span class='line'>          post.rb
</span><span class='line'>          user.rb
</span><span class='line'>      views
</span><span class='line'>        layouts
</span><span class='line'>    db
</span><span class='line'>      migrate
</span><span class='line'>config
</span><span class='line'>gems
</span><span class='line'>spec</span></code></pre></td></tr></table></div></figure>


<p>The API setup alleviates one of the odder things about the example approach. Ideally, there is no interaction between engines. Particularly in the models and views, this is critical. However, some knowledge leaks out in the example though from the controllers. For example, the <a href="https://github.com/taskrabbit/rails_engines_example/blob/434e687b795ec52705a3be1dd2c635f0054336d4/apps/account/app/controllers/account/application_controller.rb#L11">login controller</a> redirects to <code>/posts</code> after login. This is in the content engine. It&#8217;s probably not the end of the world but that is coupling. We get around this using our one frontend engine and the several API ones, but this does some serious commitment.</p>

<h2>Strategies</h2>

<p>We&#8217;ve gotten lots of questions and read about issues people are having with engines so let&#8217;s go through them here.</p>

<h3>Migrations and Models</h3>

<p>Rails bills itself as &#8220;convention over configuration&#8221; so it&#8217;s not too surprising to be confronted with lots of questions about &#8220;where to put stuff&#8221; when deviating (slightly) from the conventions. The one people seem the most worried about are migrations. We&#8217;ve never had an issue, but there must be scenarios that get a little tricky. If you are sharing the models, wewould just put them in the normal <code>db/migrate</code> location. If your models live inside the engines, it&#8217;s probably not a huge deal to still do that, but we&#8217;ve decided to have the migrations live with their models.</p>

<p>As notes, each model/table (say <code>users</code>) ideally has one master model. In the sample app, the <code>User</code> model&#8217;s master is in the <a href="https://github.com/taskrabbit/rails_engines_example/tree/434e687b795ec52705a3be1dd2c635f0054336d4/apps/account">account</a> engine. This engine is in charge of signing up and logging in users. Fleshed out, it would also be responsible for reseting a lost password and editing account information. It&#8217;s the only <code>User</code> model that <a href="https://github.com/taskrabbit/rails_engines_example/blob/434e687b795ec52705a3be1dd2c635f0054336d4/apps/account/app/models/account/user.rb#L7">mentions</a> <code>has_secure_password</code> and knows anything about that kind of thing. The rest of the engines may <a href="https://github.com/taskrabbit/rails_engines_example/blob/434e687b795ec52705a3be1dd2c635f0054336d4/apps/content/app/models/content/user.rb#L5">need</a> a <code>User</code> model but they have the <code>ReadOnly</code> <a href="https://github.com/taskrabbit/rails_engines_example/blob/434e687b795ec52705a3be1dd2c635f0054336d4/apps/shared/app/models/shared/model/read_only.rb">module</a> to prevent actually writing to the table.</p>

<p>Therefore, the account engine has the <a href="https://github.com/taskrabbit/rails_engines_example/tree/434e687b795ec52705a3be1dd2c635f0054336d4/apps/account/db/migrate">migrations</a> having to do with the users table. In order to register that migrations are within these engines, we <a href="https://github.com/taskrabbit/rails_engines_example/blob/434e687b795ec52705a3be1dd2c635f0054336d4/apps/account/lib/account/engine.rb">add</a> a snippet like the following to each engine.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">initializer</span> <span class="s1">&#39;account.append_migrations&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">app</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">to_s</span> <span class="o">==</span> <span class="n">root</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">paths</span><span class="o">[</span><span class="s2">&quot;db/migrate&quot;</span><span class="o">].</span><span class="n">expanded</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span>
</span><span class='line'>      <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">paths</span><span class="o">[</span><span class="s2">&quot;db/migrate&quot;</span><span class="o">].</span><span class="n">push</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This (via <a href="http://pivotallabs.com/leave-your-migrations-in-your-rails-engines/">here</a>) puts the engine&#8217;s migrations in the path. Migrations continue to work as they normally do with the timestamps and such. So our <code>db/migrate</code> folder doesn&#8217;t have any files in it (and is not checked into git). I have one locally, just because when I make a migration, Rails creates it automatically. However, I end up doing something like this immediately.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rails g migration CreatePosts
</span><span class='line'>      invoke  active_record
</span><span class='line'>      create    db/migrate/20140207011608_create_posts.rb
</span><span class='line'><span class="nv">$ </span>mv db/migrate/20140207011608_create_posts.rb apps/content/db/migrate
</span></code></pre></td></tr></table></div></figure>


<p>You might wonder, and it does come up, what to do when you are adding a column to the users table for some other feature in some other engine. For example, we added a boolean <code>admin</code> column to the example users table to know if the given user is allowed to do stuff in the admin engine. We see the notion of permissions as being within the account engine&#8217;s scope, even if it&#8217;s not being actively leveraged there. Tt&#8217;s still part of the account. Therefore, we <a href="https://github.com/taskrabbit/rails_engines_example/blob/434e687b795ec52705a3be1dd2c635f0054336d4/apps/account/db/migrate/20140207164357_add_admin_to_users.rb">added</a> the migration to the account engine.</p>

<p>In part, if I couldn&#8217;t justify to myself why it would be part of the account engine, it would be a red flag. Specifically, should this even be in the users table at all. If the answer is &#8220;yes&#8221; for whatever reason, then I&#8217;d likely still put the migration in the account engine, but usually it helps me realize that it shouldn&#8217;t be in the users table at all. A good example that came up in our app was the notion of profile. It seemed like it was 1-to-1 with users and what ever columns supported it should go in the users table. For a variety of reasons, including that we wanted a different engine for that, we ended up making it&#8217;s own table with a a <code>has_one</code> relationship in that engine. This paid off even further as we realized that a <code>User</code> should actually have two profiles, one for their activity as a TaskPoster and one as a TaskRabbit, as they record and display very different information. Each has their own table and engine now.</p>

<p>Let&#8217;s say we wanted to cache the number of posts the user had made. That&#8217;s a pretty clearcut case to use <code>counter_cache</code> and put a <code>posts_count</code> in the users table. We&#8217;ll want to look closely at this situation. First of all, the <code>counter_cache</code> code would clearly go on the <code>User</code> model in the content engine. That would also require that model to not be read-only or at least not in spirit (depending on the specifics used to implement the feature). It&#8217;s not a good feeling when you do all this architecture stuff and it gets in the way of something that is so easy and we have to look out for those cases. If this is one of those cases, just do it; literally, however you want. We would probably keep the migration in the account engine.</p>

<p>It might not be one of those cases, though. I have almost never been sorry when I&#8217;ve made another model in these cases. So we could make a <code>PostStatistic</code> model or something in the content engine which <code>belongs_to :user</code> for recording this (and likely other things that come up). The counter cache feature is not magic - we just increment that table as necessary. It also doesn&#8217;t feel that superfluous as it exists only inside that engine (which. in turn, doesn&#8217;t have all the random stuff internal to other engines). We have some tables that started out that way. Mostly because we actively try not to do JOINs on our API calls, these tables ending up being the hub of the most relevant data of what has happening in our marketplace. Another option that we&#8217;ve used in similar situations is not to make the column at all. The content engine, or whoever is using this kind of data, would use the timestamp of the last <code>Post</code> or some other data to use as the cache key to look up all kinds of stuff in a store like memcache or Redis. If it&#8217;s not there, it will take bit the bullet and calculate it and store it in the cache.</p>

<p>Again, architecture does not exist for fun or to get in the way. If something is super-simple and obvious and easy to maintain while doing the &#8220;right&#8221; way for the design is difficult and fragile, we just do it the easy way. That&#8217;s the way to ship things for customers. However, we&#8217;ve found that in most case the rules of the system kick off useful discussions and behaviors that tend to work out quite well.</p>

<h3>Admin</h3>

<p>One of the cases where it&#8217;s important to really examine the value and return on investment in engine separation is with the admin engine. We believe it&#8217;s a special case.</p>

<p>In our system, the admin engine has it&#8217;s own migrations. For example, we have a model called <code>AdminNote</code> where an admin can jot down little notes about most objects in the system. It clearly owns that. But the reason this whole experience exists in the first place is that it also is able to write more or less whatever it wants to <em>all</em> the objects in the system. This clearly violates our single-model-master rule. So we don&#8217;t fight an uphill battle here by making a special case and saying that the admin engine can literally do whatever it wants. All the other engines live in complete isolation from each other for a variety of reasons. Admin can depend directly on any or all of them. It&#8217;s at the top of the food chain because it needs to regulate the whole system.</p>

<p>So it&#8217;s <a href="https://github.com/taskrabbit/rails_engines_example/blob/434e687b795ec52705a3be1dd2c635f0054336d4/apps/admin/app/models/admin/post.rb">fine</a> if <code>Admin::Post &lt; Content::Post</code> or just uses <code>Content::Post</code> directly in it&#8217;s controllers. It&#8217;s just not worth it to share all of the data definitions and validations with when it will almost always be with engine X and admin. Note that it&#8217;s important to have the same validations because admin might be in charge, but it still needs to produce valid data as that other engine will be using it.</p>

<p>In our much larger app, we inherit from and/or use most of the models in the system as well as service objects from other engines. We do not use outside controllers or views. Our admin engine does use it&#8217;s own layout and much simpler request cycle than our much fancier frontend app. We tried to show the admin engine using a different layout in the example app, but they&#8217;re both bootstrap so it might be hard to tell. The header is red in admin :-)</p>

<h3>Assets</h3>

<p>Everyone seems to have struggled with this one and I can&#8217;t even imagine pulling apart assets if they weren&#8217;t coded in a modular way at the start. However, starting with them separate in Rails 4 has been fairly straightforward. We add the following <a href="https://github.com/taskrabbit/rails_engines_example/blob/434e687b795ec52705a3be1dd2c635f0054336d4/apps/account/lib/account/engine.rb">code</a> to our engine much like the migration code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">initializer</span> <span class="s1">&#39;account.asset_precompile_paths&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="o">[</span><span class="s2">&quot;account/manifests/*&quot;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could list all the manifests one by one, but we&#8217;ve found that it&#8217;s simpler to just always put them in a folder created for the purpose. This works for both css and js. You would would reference those files something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;account/manifests/application&#39;</span>
</span><span class='line'><span class="o">=</span> <span class="n">javascript_include_tag</span> <span class="s1">&#39;account/manifests/application&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Routes</h3>

<p>In an Engine, routes go within the engine directory at the <a href="https://github.com/taskrabbit/rails_engines_example/blob/434e687b795ec52705a3be1dd2c635f0054336d4/apps/account/config/routes.rb">same</a> <code>config/routes.rb</code> path. It&#8217;s important to note here that in order for these routes to be put into use in the overall app, the engine needs to be mounted. In a normal engine use case, you would mount rails_admin (say to /admin) to give a namespace in the url, but we think it&#8217;s important that all of these engines get mounted at the root level. You can see our root routes.rb file <a href="https://github.com/taskrabbit/rails_engines_example/blob/434e687b795ec52705a3be1dd2c635f0054336d4/config/routes.rb">here</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RailsEnginesExample</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">BootInquirer</span><span class="o">.</span><span class="n">each_active_app</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>    <span class="n">mount</span> <span class="n">app</span><span class="o">.</span><span class="n">engine</span> <span class="o">=&gt;</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="n">as</span><span class="p">:</span> <span class="n">app</span><span class="o">.</span><span class="n">gem_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So as expected, the operator app has no routes of it&#8217;s own and it&#8217;s all handled by the engines. I&#8217;ll add little more about the <code>BootInquirer</code> in a bit. It is just a helper class that knows all the engines. This means that the code is functionally something more like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RailsEnginesExample</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">mount</span> <span class="no">Admin</span><span class="o">::</span><span class="no">Engine</span>     <span class="o">=&gt;</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="n">as</span><span class="p">:</span> <span class="s1">&#39;admin&#39;</span>
</span><span class='line'>  <span class="n">mount</span> <span class="no">Account</span><span class="o">::</span><span class="no">Engine</span>   <span class="o">=&gt;</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="n">as</span><span class="p">:</span> <span class="s1">&#39;account&#39;</span>
</span><span class='line'>  <span class="n">mount</span> <span class="no">Content</span><span class="o">::</span><span class="no">Engine</span>   <span class="o">=&gt;</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="n">as</span><span class="p">:</span> <span class="s1">&#39;content&#39;</span>
</span><span class='line'>  <span class="n">mount</span> <span class="no">Marketing</span><span class="o">::</span><span class="no">Engine</span> <span class="o">=&gt;</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="n">as</span><span class="p">:</span> <span class="s1">&#39;marketing&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It would really clean to have something other than root in these mountings, but it doesn&#8217;t seem practical or that important. We want to be able to have full control over our url structure. For example, mounting the account engine at anything but root would prevent it from handling both the <code>/login</code> and <code>/signup</code> paths. The tradeoff is that two engines could claim the same URLs and conflict with much confusion. That&#8217;s something we can manage with minimal effort. We&#8217;ve found that most engine route files start with <code>scope</code> to put most things under one directory or a few <code>resources</code> which does basically the same thing.</p>

<p>Another important note is to <a href="https://github.com/taskrabbit/rails_engines_example/blob/434e687b795ec52705a3be1dd2c635f0054336d4/apps/account/lib/account/engine.rb#L3">use</a> <code>isolate_namespace</code> in your Engine declaration. That prevents various things like helper methods from leaking into other engines. This makes sense for our case because the whole point is to stay contained. Another side effect is route helpers like &#8216;posts_path&#8217; to work as expected without needing to prefix them like <code>content.posts_path</code> in your views. I believe it might also make the parameters more regular (for example having <code>params[:post]</code> instead of <code>params[:content_post]</code>). Oh, just put it in <a href="https://github.com/taskrabbit/rails_engines_example/blob/434e687b795ec52705a3be1dd2c635f0054336d4/apps/admin/lib/admin/engine.rb">there</a>.</p>

<h3>Tests</h3>

<p>Many of the issues noted <a href="http://pivotallabs.com/experience-report-engine-usage-that-didn-t-work/">here</a> revolve around testing. One of the promises of engines is the existence of the subcomponents that you could (theoretically) use in some other app. This is not the goal here. We are using engines maximize local simplicity in our application, not create a reusable library. To that end, we don&#8217;t think the normal Engine testing mechanism of creating a dummy app within the engine is helpful.</p>

<p>On our first engine application, we put a <code>spec</code> folder within each engine and then wrote a <code>rspec_all.sh</code> script to run each of them. It was not the right way. To do that really correctly, you&#8217;d test at that level and you&#8217;d have to test again at the integration level. This is another case of it not being worth it. Now we just put all our specs in the spec <a href="https://github.com/taskrabbit/rails_engines_example/tree/434e687b795ec52705a3be1dd2c635f0054336d4/spec">directory</a> and run <code>rspec spec</code> to run them all.</p>

<p>Each engine has it&#8217;s own directory in there to keep it somewhat separate and to be able to easily test all of a single engine and it ends up looking like a normal app&#8217;s root spec folder with models, requests, controllers, etc. Much like the admin engine, there are no rules about what you can and can&#8217;t use in the tests. The goal is make sure the code is right, not to follow some architectural edict. For example, in a test that checks whether a Task can be paid for, it&#8217;s fine to use the models from the payment engine to make sure everything worked together well.</p>

<p>One thing that is interesting is <a href="http://api.rubyonrails.org/v3.2.13/classes/ActiveRecord/Fixtures.html">fixtures</a>. We like using fixtures because it&#8217;s a pretty good balance between speed and fully executing most of the code in out tests. We use <a href="https://github.com/rdy/fixture_builder">fixture_builder</a> to save the hassle of maintaining those yml files precisely. Anyway, the issue in the case where we have multiple engine&#8217;s each with their own model class is that fixtures (and <a href="https://github.com/thoughtbot/factory_girl">factories</a> for that matter) only get one class. So if you do something like this while testing in the content engine, you&#8217;d be in trouble:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Content</span><span class="o">::</span><span class="no">Post</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">fixtures</span> <span class="ss">:users</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should be associated with a user&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="n">users</span><span class="p">(</span><span class="ss">:willy</span><span class="p">)</span>
</span><span class='line'>    <span class="n">post</span> <span class="o">=</span> <span class="no">Content</span><span class="o">::</span><span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">content</span><span class="p">:</span> <span class="s2">&quot;words&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">save</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a problem because of classes expecting to be a certain type. You&#8217;d get this error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Failures:
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> Content::Post should be associated with a user
</span><span class='line'>     Failure/Error: post.user <span class="o">=</span> user
</span><span class='line'>     ActiveRecord::AssociationTypeMismatch:
</span><span class='line'>       Content::User<span class="o">(</span><span class="c">#70346317272500) expected, got Account::User(#70346295701620)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the user has to be and instance of the <code>Content::User</code> and not an <code>Account::User</code> class. We use a <a href="https://github.com/taskrabbit/rails_engines_example/blob/434e687b795ec52705a3be1dd2c635f0054336d4/spec/support/fixture_class_name_helper.rb">helper</a> to say what the classes are as well as switch between them. So this test will use the correct classes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Content</span><span class="o">::</span><span class="no">Post</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">fixtures</span> <span class="ss">:users</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should be associated with a user&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="n">fixture</span><span class="p">(</span><span class="ss">:users</span><span class="p">,</span> <span class="ss">:willy</span><span class="p">,</span> <span class="no">Content</span><span class="p">)</span>
</span><span class='line'>    <span class="n">post</span> <span class="o">=</span> <span class="no">Content</span><span class="o">::</span><span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">content</span><span class="p">:</span> <span class="s2">&quot;words&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">save</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The same sort of thing could be done with FactoryGirl too. Often, we end up just using the ids more than we would in a normal test suite. The important thing to note is to just do whatever you feel gives you the best coverage with the most return on investment for your time.</p>

<h3>Memory</h3>

<p>You may have noticed the <a href="https://github.com/taskrabbit/rails_engines_example/blob/434e687b795ec52705a3be1dd2c635f0054336d4/lib/boot_inquirer.rb">BootInquirer</a> class mentioned earlier. This is a class that know about all the engines in the system.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">APPS</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;a&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;account&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;c&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;content&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;m&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;marketing&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;z&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;admin&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is called from three places.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'><span class="n">gemspec</span> <span class="n">path</span><span class="p">:</span> <span class="s2">&quot;apps/shared&quot;</span>
</span><span class='line'><span class="no">BootInquirer</span><span class="o">.</span><span class="n">each_active_app</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>  <span class="n">gemspec</span> <span class="n">path</span><span class="p">:</span> <span class="s2">&quot;apps/</span><span class="si">#{</span><span class="n">app</span><span class="o">.</span><span class="n">gem_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># application.rb</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;../lib/boot_inquirer&quot;</span>
</span><span class='line'><span class="no">BootInquirer</span><span class="o">.</span><span class="n">each_active_app</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">require</span> <span class="n">app</span><span class="o">.</span><span class="n">gem_name</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># routes.rb</span>
</span><span class='line'><span class="no">BootInquirer</span><span class="o">.</span><span class="n">each_active_app</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>  <span class="n">mount</span> <span class="n">app</span><span class="o">.</span><span class="n">engine</span> <span class="o">=&gt;</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="n">as</span><span class="p">:</span> <span class="n">app</span><span class="o">.</span><span class="n">gem_name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The main point here is to simplify even further how to add a new engine to the app. The secondary point is somewhat interesting, though. One of the potential downsides of an engine-based app over multiple apps is the larger memory footprint or larger scale production rollout of some obscure and complicated native library for just one of the engines. This would not be a problem if you could &#8220;boot&#8221; the app with the just <em>some</em> of the engines enabled. The <code>BootInquirer</code> makes that possible. It inspects and environment variable to know which engines to add to the gemspec and require and route towards.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="no">ENGINE_BOOT</span><span class="o">=</span><span class="n">am</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rails</span> <span class="n">c</span>
</span><span class='line'>    <span class="o">=&gt;</span> <span class="n">will</span> <span class="n">boot</span> <span class="n">the</span> <span class="n">account</span> <span class="ow">and</span> <span class="n">marketing</span> <span class="n">engines</span> <span class="o">-</span> <span class="n">but</span> <span class="ow">not</span> <span class="n">content</span><span class="p">,</span> <span class="n">admin</span><span class="p">,</span> <span class="n">etc</span><span class="o">.</span>
</span><span class='line'><span class="err">$</span> <span class="no">ENGINE_BOOT</span><span class="o">=-</span><span class="n">m</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rails</span> <span class="n">c</span>
</span><span class='line'>    <span class="o">=&gt;</span> <span class="n">will</span> <span class="n">boot</span> <span class="n">all</span> <span class="n">engines</span> <span class="n">except</span> <span class="n">marketing</span>
</span></code></pre></td></tr></table></div></figure>


<p>We haven&#8217;t actually seen memory be that different that in our large Rails app. In fact, it is less because of a combination of Ruby upgrades and less conspicuous gem consumption. However, memory-wise this setup allows us to use our one codebase like multiple apps. In that case, we use a load balancer to map url paths to the correct app.</p>

<p>This is also useful in processing background workers. You would likely get an extra Resque worker or two. It&#8217;s important to have a good queue strategy (different queues per engine) and to really not have the engines depend on each other to make this work, of course.</p>

<p>In order for this to work, we need to be more mindful of our gem usage. The first step is changing <a href="https://github.com/taskrabbit/rails_engines_example/blob/434e687b795ec52705a3be1dd2c635f0054336d4/config/application.rb#L7">application.rb</a> to say <code>Bundler.setup(:default, Rails.env)</code> instead of <code>Bundler.require(:default, Rails.env)</code> as usual. This mean we will have to explicitly require the gems we are using instead of it happening automatically. Most of those dependencies are in the engines&#8217; gemspecs and they&#8217;d have to be required anyway. However, by changing this line, we&#8217;ll have to require what is needed from the main Gemfile as well. Ideally, there wouldn&#8217;t be anything in <a href="https://github.com/taskrabbit/rails_engines_example/blob/434e687b795ec52705a3be1dd2c635f0054336d4/Gemfile">there</a> at all, but we have some Rails and test stuff that all the engines use.</p>

<p>You may notice that the exception we made for the admin engine rears its head here. If admin depends on the other engines, you won&#8217;t be able to use admin experience unless you launch the app with all those engines. This is definitely true. The servers that the admin urls route to will have to have all of the engines running. We found it was useful to quarantine admin usage anyway as there are a few requests and inputs that could blow out the heap size fairly easily.</p>

<h3>Folders and Files</h3>

<p>If you&#8217;re interested in this setup, you&#8217;re just going to have to get used to it. There are a lot of directories. There are lot of files named the same thing. I&#8217;ve found that Sublime Text is better for this than Textmate. I&#8217;m a huge fan of ⌘T to open files and Sublime allows the use of the directory names in that typeahead list. If your editor doesn&#8217;t do this, then you&#8217;ll spend more time than you want to look through the six different <code>user.rb</code> or <code>application_contoller.rb</code> files in the project.</p>

<h3>Interaction Between Engines</h3>

<p>So we&#8217;ve gone through a lot of trouble to keep that shiny new Rails app feel. Each engine has a particular goal in life and everything is nice and simple. Particularly in the API case, it writes and reads its data and generally just takes of business. But the world isn&#8217;t always perfect and sometimes the engines need to talk to each other. If it&#8217;s happening too much, we probably didn&#8217;t modularize along the right lines and we should consider throwing them together. We don&#8217;t have all the answers, but engine naming and scoping seems to be a fine art. It&#8217;s very tempting to go very narrow for cleanliness and it&#8217;s also very tempting to just throw stuff in to an existing one so I&#8217;m not surprised when we find that the lines are a not drawn quite right.</p>

<p>There are other cases, though, that are not systemic errors in engine-picking and future-prediction. It&#8217;s the kind of case I talked about with the <code>posts_count</code> above. Let&#8217;s say we had a good reason to make that happen. Actually let&#8217;s change it just a little bit to be more realistic. Let&#8217;s say we had a profile engine where user could manage his online presence. Let&#8217;s also say that other users could see and rate his posts. It&#8217;s a completely reasonable thing to have an average post rating shown on his profile. Does this data about posts mean that the profile pages or API should be part of the content engine? We don&#8217;t think so. This is likely just one tiny detail in an engine otherwise setup to upload photos, quote favorite movies, or whatever. We just need a little average rating on the there somewhere with a link to the posts.</p>

<p>In this case, we use our <a href="https://github.com/taskrabbit/resque-bus">Resque Bus</a> gem extensively. This is a minor add-on to <a href="https://github.com/resque/resque/blob/1-x-stable/README.markdown">Resque</a> that changes the paradigm just enough to allow us to decouple these engines. In a normal Rails apps using Resque, we would queue up a background worker to process the rating. This worker would calculate the new average rating and store it in the profile. Resque Bus uses publishing and subscription to accomplish similar goals. If you buy into this model, you have all of your engines and in this case the content engine, publishing to the bus when interesting things happen. Creation of a post or rating would be a good example. Other engines (or completely separate apps) then subscribe to events they find interesting. There can be more than one subscriber. Even when there is nothing particularly interesting to do, we&#8217;ve found that always having a subscriber to record the event produces a really useful log. In the rating case, though, the profile engine would also subscribe to the event and record the new rating. By one engine simply noting that something happened and the other reacting to the occurrence, we maintain the conceptual as well as physical (these engines could be on different servers) decoupling.</p>

<p>What exactly gets published and how that is used is up to the developers involved. There seems to be a few options in this specific case.</p>

<p>A) The content engine is publishing data changes. <code>ResqueBus.publish('post_rated', {post_id: 42, author_id: 2, rated_by: 4, rating: 4})</code>
B) The content engine adds some calculations. <code>ResqueBus.publish('post_rated', {post_id: 42, author_id: 2, rated_by: 4, rating: 4, new_average: 4.25, total_ratings: 20})</code></p>

<p>Choosing option B is interesting for a few reasons:</p>

<ul>
<li>It is predicting the information other engines will want to know.</li>
<li>It decreases the coupling because now the profile engine now just records the info instead of having to calculate it.</li>
<li>It creates a record of the averages in our event store. Maybe we&#8217;ll draw a graph of it sometime.</li>
<li>It adds to the time required to complete the request to create the rating.</li>
</ul>


<p>This would mean the post engine would have something like this in an initializer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ResqueBus</span><span class="o">.</span><span class="n">dispatch</span><span class="p">(</span><span class="s1">&#39;profile&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">subscribe</span> <span class="s1">&#39;post_rated&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">attributes</span><span class="o">|</span>
</span><span class='line'>    <span class="n">profile</span> <span class="o">=</span> <span class="no">Profile</span><span class="o">::</span><span class="no">Document</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">attributes</span><span class="o">[</span><span class="s1">&#39;author_id&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profile</span><span class="o">.</span><span class="n">post_ratings_total</span>  <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="s1">&#39;total_ratings&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">profile</span><span class="o">.</span><span class="n">post_rating_average</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="s1">&#39;new_average&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">profile</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or in the way that we prefer using a subscriber class that we would put in <code>profile/app/subscribers</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Profile</span><span class="o">::</span><span class="no">ContentSubscriber</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ResqueBus</span><span class="o">::</span><span class="no">Subscriber</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">subscribe</span> <span class="ss">:post_created</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">post_created</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profile</span> <span class="o">=</span> <span class="no">Profile</span><span class="o">::</span><span class="no">Document</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">attributes</span><span class="o">[</span><span class="s1">&#39;post_author_id&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profile</span><span class="o">.</span><span class="n">post_ratings_total</span>  <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="s1">&#39;total_ratings&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">profile</span><span class="o">.</span><span class="n">post_rating_average</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="s1">&#39;new_average&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">profile</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s clearly a fine option and the added time probably isn&#8217;t too much assuming we have the right indexes on our database, but we actually tend to use option A. We don&#8217;t particularly like trying to predict which events are interesting and how other engines will use them so we just publish on all creations or updates. We are fine with the profile engine having read-only <code>Rate</code> model and code to calculate the average. It could keep a running tally of the total number and just add this one to it, but we tend to recalculate it every time because it&#8217;s not that hard and is less fragile.</p>

<p>It would look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Profile</span><span class="o">::</span><span class="no">ContentSubscriber</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ResqueBus</span><span class="o">::</span><span class="no">Subscriber</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">subscribe</span> <span class="ss">:post_rated</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">post_rated</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="no">Profile</span><span class="o">::</span><span class="no">Rate</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">author_id</span><span class="p">:</span> <span class="n">attributes</span><span class="o">[</span><span class="s1">&#39;author_id&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>    <span class="n">sum</span>   <span class="o">=</span> <span class="no">Profile</span><span class="o">::</span><span class="no">Rate</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">author_id</span><span class="p">:</span> <span class="n">attributes</span><span class="o">[</span><span class="s1">&#39;author_id&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="ss">:rating</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">profile</span> <span class="o">=</span> <span class="no">Profile</span><span class="o">::</span><span class="no">Document</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">attributes</span><span class="o">[</span><span class="s1">&#39;post_author_id&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profile</span><span class="o">.</span><span class="n">post_ratings_total</span>  <span class="o">=</span> <span class="n">total</span>
</span><span class='line'>    <span class="n">profile</span><span class="o">.</span><span class="n">post_rating_average</span> <span class="o">=</span> <span class="n">sum</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="p">(</span><span class="mi">5</span><span class="o">*</span><span class="n">total</span><span class="o">.</span><span class="n">to_f</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profile</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>However you do it, the point is that this engine is working on it&#8217;s own for it&#8217;s own purposes. Layering it on, it&#8217;s quite straightforward to see how we could build spam detection as its own engine or into the admin one. We could subscribe to ratings or post creation and react accordingly, maybe pulling the post or giving the user a score that limits his visibility, etc. Or we could add a metrics engine, to report the conversion of a user on his first post to a variety of external services. Then, when a new developer starts and asks where the metrics code is, we don&#8217;t have to say what we said before which was, &#8220;everywhere.&#8221; We could show very simple mappings between things that are happening throughout the system and the numbers like revenue or engagement that are getting reported to something like Google Analytics.</p>

<h2>Summary</h2>

<p>Try out engines. We like them.</p>

<p>Discuss on <a href="https://news.ycombinator.com/item?id=7225447">Hacker News</a>.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Rails 4 Engines</wp:post_id>
            <wp:post_date>2014-02-11 16:27:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Resque Bus</title>
            <link>http://bleonard.github.io/blog/2013/09/28/resque-bus/</link>
            <pubDate>2013-09-28 16:27:00 -0700</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2013/09/28/resque-bus/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>At <a href="http://www.taskrabbit.com">TaskRabbit</a>, we are using <a href="https://github.com/resque/resque">Resque</a> to do our background job processing. We&#8217;ve also gone one step further and used <a href="http://redis.io/">Redis</a> and Resque to create an asynchronous <a href="http://en.wikipedia.org/wiki/Message_queue">message</a> <a href="http://en.wikipedia.org/wiki/Enterprise_service_bus">bus</a> system that we call <a href="https://github.com/taskrabbit/resque-bus">Resque Bus</a>.</p>

<h3>Redis / Resque</h3>

<p><a href="http://redis.io/">Redis</a> is a single-threaded in-memory key/value store similar to <a href="http://memcached.org/">memcached</a>. Redis has other features like pub/sub and more advanced data structures, but the key feature that makes it an ideal storage engine for a queue and a message bus is that is can perform atomic operations.  Atomic operations are the kind of operations you can expect to do on in-process data (like Array.pop or Array.splice) but in way that keeps the data sane for everyone connected to the database.</p>

<p><a href="https://github.com/resque/resque">Resque</a> is a background queue built on top of Redis. There seems to be <a href="http://sidekiq.org/">other</a> <a href="https://github.com/collectiveidea/delayed_job">options</a> <a href="https://github.com/kr/beanstalkd">out</a> there these days, but we are pretty happy with Resque and associated <a href="http://resquework.org">tools/ecosystem</a>. There is plenty of code in the resque codebase, but it all comes down to inserting json the queue, popping, and executing code with that as an input.</p>

<h3>Resque Bus</h3>

<p><a href="https://github.com/taskrabbit/resque-bus">Resque Bus</a> uses Resque to create an asynchronous <a href="http://en.wikipedia.org/wiki/Message_queue">message</a> <a href="http://en.wikipedia.org/wiki/Enterprise_service_bus">bus</a> system. As we have created more applications with interdependencies, we have found it helpful to create something like this to loosely couple the worlds. There are <a href="http://zeromq.org/">several</a> <a href="http://www.rabbitmq.com/">other</a> <a href="http://redis.io/topics/pubsub">possible</a> <a href="http://kafka.apache.org/">solutions</a> to this problem, but I really felt that it was important to use something that our team understood well for this piece of infrastructure that we could easily modify and maintain.</p>

<!-- more -->


<h4>Application A publishes an event</h4>

<p>Something happens in your application and you want to let the world know. In this case, you publish an event.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># business logic</span>
</span><span class='line'><span class="no">ResqueBus</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s2">&quot;user_created&quot;</span><span class="p">,</span> <span class="s2">&quot;id&quot;</span> <span class="o">=&gt;</span> <span class="mi">42</span><span class="p">,</span> <span class="s2">&quot;first_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;John&quot;</span><span class="p">,</span> <span class="s2">&quot;last_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Smith&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># or do it later</span>
</span><span class='line'><span class="no">ResqueBus</span><span class="o">.</span><span class="n">publish_at</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">hour</span><span class="o">.</span><span class="n">from_now</span><span class="p">,</span> <span class="s2">&quot;user_created&quot;</span><span class="p">,</span> <span class="s2">&quot;id&quot;</span> <span class="o">=&gt;</span> <span class="mi">42</span><span class="p">,</span> <span class="s2">&quot;first_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;John&quot;</span><span class="p">,</span> <span class="s2">&quot;last_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Smith&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Application B subscribes to events</h4>

<p>If the same or different application is interested when an event happens, it subscribes to it by name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># initializer</span>
</span><span class='line'><span class="no">ResqueBus</span><span class="o">.</span><span class="n">dispatch</span><span class="p">(</span><span class="s2">&quot;app_b&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">subscribe</span> <span class="s2">&quot;user_created&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">attributes</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># business logic</span>
</span><span class='line'>    <span class="no">NameCount</span><span class="o">.</span><span class="n">find_or_create_by_name</span><span class="p">(</span><span class="n">attributes</span><span class="o">[</span><span class="s2">&quot;last_name&quot;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">increment!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>How it works</h3>

<p>The following is how this workflow is accomplished:</p>

<ul>
<li>Application B subscribes to events (puts a hash in Redis saying what it is interested in)</li>
<li>Application A publishes the event (puts published hash as args in a Resque queue called <code>resquebus_incoming</code> with a class of <code>Driver</code>)</li>
<li>The <code>Driver</code> copies the event hash to 0 to N application queues based on subscriptions (arg hash now in <code>app_b_default</code> queue with a class of <code>Rider</code>)</li>
<li>The <code>Rider</code> in Application B executes the block given in the subscription</li>
</ul>


<p><img src="http://bleonard.github.io/images/posts/resque-bus/data_flow.jpg" alt="Redis Bus Data Flow" /></p>

<h4>Dedicated Setup</h4>

<p>Each app needs to tell it&#8217;s subscriptions to Redis</p>

<pre><code>$ rake resquebus:subscribe
</code></pre>

<p>The incoming queue needs to be processed on a dedicated or all the app servers.</p>

<p>  $ rake resquebus:driver resque:work</p>

<p>The subscription block is run inside a Resque worker which needs to be started for each app.</p>

<pre><code>$ rake resquebus:setup resque:work
</code></pre>

<p>If you want retry to work for subscribing app or you are using hte delayed <code>publish_at</code> syntax, you should run resque-scheduler</p>

<pre><code>$ rake resque:scheduler
</code></pre>

<h4>Combined Setup</h4>

<p>This is the most dedicated way to run it, but all that <code>resquebus:driver</code> and <code>resquebus:setup</code> do is set the <code>QUEUES</code> environment variable. So you could run:</p>

<pre><code>$ rake resque:work QUEUES=*
</code></pre>

<p>That would work only if you have a single app. While I believe this paradigm still adds value for a single app, it&#8217;s likely you have more than one app and the most important rule is to not allow Application C to process Application B&#8217;s queue, so that command would likely look more like this:</p>

<pre><code>$ rake resque:work QUEUES=app_b_default,resquebus_incoming
</code></pre>

<p>It&#8217;s best practice to set your queue names, anyway. If you use resque-bus in the same Redis db as your &#8220;normal&#8221; Resque queues, then your full command set would probably look something like this:</p>

<pre><code>$ rake resquebus:subscribe
$ rake resque:work QUEUES=high,app_b_default,medium,resquebus_incoming,low
$ rake resque:scheduler
</code></pre>

<h4>It&#8217;s Just Resque</h4>

<p>The above illustrates the primary reason that I like this system. <strong>It&#8217;s just Resque</strong>.  While this may not be the most performant way to create a message bus, there are a number of good reasons to do so:</p>

<ul>
<li>Nothing new to monitor or deploy</li>
<li>If used in a combined setup, you have nothing new to run</li>
<li>If it stops processing a queue (downtime, during deploy process), it catches back up easily</li>
<li>I understand what is going on (and resque has a simple data model in general)</li>
<li>It&#8217;s portable.  Resque has been re-implemented in a number of languages beyond ruby (we use a node.js rider for example)</li>
<li>Many plugins already exist to add in extra capabilities (stats recording for example)</li>
</ul>


<p>I feel that the &#8220;I understand point&#8230;&#8221; sounds a little like <a href="http://en.wikipedia.org/wiki/Not_invented_here">NIH</a>, but it&#8217;s just really important to me to fully know where this critical data lives.</p>

<p>Of course, because it&#8217;s just Resque, there are known issues to work through:</p>

<ul>
<li>It&#8217;s relatively slow when compared with other systems. We&#8217;ve experimented with Node and Sidekiq to do the <code>Driver</code> role if this becomes an issue.</li>
<li>Redis does not have a good failover system so this adds a single point of failure to the system. We&#8217;ve been working on various techniques to mitigate this risk including replication and (failover tools)[https://github.com/twitter/twemproxy].</li>
</ul>


<h3>Use Cases</h3>

<p>The effect on our apps from other apps publishing and subscribing ends up being one of focus. A request comes in to the web server and that code is in charge of accomplishing the primary mission, for example signing up a user. When this is finished, it publishes an event called <code>user_created</code> just in case other apps care.</p>

<p>Sometimes one or several apps do care. In the signup case, our marketing app subscribes and starts a campaign to onboard that user as effectively as it knows how starting with a welcome email. Our analytics app subscribes and lets various external systems like Mixpanel know. Our admin search tool subscribes to get that user in the index. And so on.</p>

<p>Most of our data goes through certain states. For example, a Task goes from assigned to completed. Overall, we have found that publishing when the states changes is just about always the right thing to do. Some of those events have many subscribers. Many events are completely ignored (at the moment) and that is fine too.</p>

<p>A few types of apps have evolved within this paradigm:</p>

<ul>
<li>Rails apps that subscribe and publish in order to achieve their goals</li>
<li>Bus apps that are small and data driven that have no UI</li>
<li>Logging and analytics apps that subscribe to record many events</li>
</ul>


<h4>Rails app communication</h4>

<p>When a Task is posted on the site, the app publishes a <code>task_opened</code> event. This is a very important event and there are lots of subscribers. One of them is our Task-browsing app that helps TaskRabbits find the right job for them. It has its own codebase and storage designed to optimize this particular experience. When it receives the event about the new Task, it does all the calculations about who is right for the job and stores them in the way it wants to optimize the browsing. It is also subscribed to events that would indicate that the Task is now longer to be browsed by TaskRabbits. In these cases, it removes objects related to that Task from storage.</p>

<p>The separation described here between the two systems involved (Task posting and browsing) has had a few effects.</p>

<ul>
<li>Local simplicity has increased. Each system does what it does with simpler code than if it was all combined into the same thing.</li>
<li>Local specialization has increased. For example, now that the browsing experience is separate in code, I feel better in choosing the right storage solution for that experience. When in one system, it feels like &#8220;yet another thing&#8221; added to something that&#8217;s already complicated.</li>
<li>Global complexity has increased. This separation has a cost and it is in the number of moving pieces. More moving pieces adds maintenance costs through mysterious bugs, time in runtime execution, and overall cognitive load on the developer. It&#8217;s case by case, but we believe it can be worth it.</li>
</ul>


<p>Finally, note that this Rails app also publishes events about the new TaskRabbits that are relevant to the Task.</p>

<h4>Bus Apps</h4>

<p>Specifically, the browsing application publishes N events, each about a notification that should occur because of the new Task. We have a class of application which has no UI and just listens on the bus. We call the app listening for notification events Switchboard. Switchboard is an example of what I called a &#8220;bus app.&#8221; A bus app exists to subscribe to various events and take action based on the data. In this case, Switchboard receives an event that indicates that a text message needs to be sent, so it does so. Or it can look at the user&#8217;s preference and decide not send it.</p>

<p>With this approach, Switchboard is able to accomplish a few things effectively:</p>

<ul>
<li>It is the only app that knows our <a href="https://www.twilio.com">Twilio</a> credentials or how to format the HTTP call</li>
<li>It is the only one that knows that we even use Twilio or what phone number(s) to send from</li>
<li>It is the only app that decides what phone number to send to and/or how to look up a user&#8217;s preferences</li>
<li>It can have a drastically reduced memory profile than a normal Rails app in order to be able to process more effectively.</li>
<li>It provides a centralized choke point for all outgoing communications, making something like a staging whitelist easy to implement</li>
</ul>


<p>In effect, ResqueBus and Switchboard create an asynchronous API. Simply knowing the terms of the API (what to publish) provides several benefits to the consuming apps:</p>

<ul>
<li>They don&#8217;t have to know how to send text messages</li>
<li>They don&#8217;t have to know how to look up a user&#8217;s preferences or even phone number</li>
<li>They don&#8217;t have to change anything if we decide to send text messages differently</li>
<li>They can focus on the content of the message only</li>
<li>They will not be help up or crash if Twilio is having a problem of some sort</li>
</ul>


<h4>Loggers</h4>

<p>As noted, all of these benefits of decentralization come at the cost of global complexity. It&#8217;s important to choose such architectural areas carefully and clearly this approach is one that we&#8217;ve fully embraced. The addition of these &#8220;additional&#8221; moving pieces requires creation of new tools to mitigate the operational and cognitive overhead that they add. A good example that I read about recently was the ability Twitter has to <a href="http://highscalability.com/blog/2013/7/8/the-architecture-twitter-uses-to-deal-with-150m-active-users.html">trace a tweet</a> through the whole lifecycle.</p>

<p>At TaskRabbit, the equivalent is an app called Metrics that subscribes to every single event. Case by case, the Metrics subscription adds some data to assist in querying later and stores each event.  We store events in log files, and optionally, <a href="http://www.elasticsearch.org/">elastic search</a>. When combined with <a href="https://github.com/taskrabbit/resque-bus/blob/9171f0879e1c356e64086230d71698a52304f8d7/lib/resque-bus.rb#L153">unique ids</a> for each event that subscriptions can chain along if they republish, this provides the capability to trace any logical event through the system.</p>

<p>That was the original goal of the system, but it somewhat accidentally had several effects.</p>

<ul>
<li>Again, the ability to trace a logical event throughout decoupled systems</li>
<li>Centralized logging capability a la <a href="http://www.sumologic.com/">SumoLogic</a> for free (any app can publish random stuff to bus)</li>
<li>With minor denormalization and well-crafted queries, realtime business dashboards and metrics a la <a href="https://mixpanel.com/">Mixpanel</a> or <a href="https://www.google.com/analytics">Google Analytics</a></li>
</ul>


<h3>Subscriptions</h3>

<p>There are a few other ways to subscribe to receive events.</p>

<h4>Any Attributes</h4>

<p>The first version of Resque Bus only allowed subscribing via the event type as show above. While I found this covered the majority of use cases and was the easiest to understand, we found ourselves subscribing to events and then throwing it away if other attributes didn&#8217;t line up quite right. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">subscribe</span> <span class="s2">&quot;task_changed&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">attributes</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">attributes</span><span class="o">[</span><span class="s2">&quot;state&quot;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;opened&#39;</span>
</span><span class='line'>    <span class="no">TaskIndex</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">attributes</span><span class="o">[</span><span class="s2">&quot;id&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>While this is fine, something didn&#8217;t sit quite right. It adds unnecessary load to the system that could have been avoided at the <code>Driver</code> level. The biggest realization is that <code>bus_event_type</code> is no different than any other attribute in the hash and doesn&#8217;t deserver to be treated as such.</p>

<p>In the current version of Resque Bus, this code is now:</p>

<p>subscribe &#8220;any_id_i_want&#8221;, &#8220;bus_event_type&#8221; => &#8220;task_changed&#8221;, &#8220;state&#8221; => &#8220;opened&#8221; do |attributes|
  TaskIndex.write(attributes[&#8220;id&#8221;])
end</p>

<p>This ensures it never even makes it to this queue unless all of the attributes match. I felt it was important to keep the simple case simple (so it&#8217;s still possible), but in the implementation the first subscription is equivalent to this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">subscribe</span> <span class="s2">&quot;task_changed&quot;</span><span class="p">,</span> <span class="s2">&quot;bus_event_type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;task_changed&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">attributes</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">attributes</span><span class="o">[</span><span class="s2">&quot;state&quot;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;opened&#39;</span>
</span><span class='line'>    <span class="no">TaskIndex</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">attributes</span><span class="o">[</span><span class="s2">&quot;id&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Subscriber Mixin</h4>

<p>It feels really powerful and magical to put code like this in a <a href="http://en.wikipedia.org/wiki/Domain-specific_language">DSL</a> in your initializer or other setup code. However, when we started creating apps that had many subscriptions, it got to be a little overwhelming. For this we created an Object mixin for subscription.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TaskChangesSubscriber</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ResqueBus</span><span class="o">::</span><span class="no">Subscriber</span>
</span><span class='line'>  <span class="n">subscribe</span> <span class="ss">:task_changed</span>
</span><span class='line'>  <span class="n">subscribe</span> <span class="ss">:changed_when_opened</span><span class="p">,</span> <span class="s2">&quot;bus_event_type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;task_changed&quot;</span><span class="p">,</span> <span class="s2">&quot;state&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;opened&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">task_changed</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># gets called for all task changes</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">changed_when_opened</span>
</span><span class='line'>    <span class="c1"># only gets called when state == &quot;opened&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This really cleaned up subscription-heavy apps.</p>

<p>Note: This subscribes when this class is loaded, so it needs to be in your load or otherwise referenced/required during app initialization to work properly.</p>

<h3>More to come</h3>

<p>If people seem to like this approach and gem, we have lots of approaches and tools built on top of it that I&#8217;d be excited to make available. Let us know on <a href="https://github.com/taskrabbit/resque-bus">Github</a> that you like it by watching, starring, or creating issues with questions, etc.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Resque Bus</wp:post_id>
            <wp:post_date>2013-09-28 16:27:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Rollback ActiveRecord model in after_save</title>
            <link>http://bleonard.github.io/blog/2013/05/23/rollback-after-save/</link>
            <pubDate>2013-05-23 11:40:00 -0700</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2013/05/23/rollback-after-save/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>It&#8217;s not exactly a best practice, but sometimes it comes up and I couldn&#8217;t find any material on the Internet about how to make it work. The situation is that you&#8217;re saving your record and it&#8217;s <code>after_save</code> and now you&#8217;ve decided that you don&#8217;t want to save it at all. What to do? The short answer is to <code>raise ActiveRecord::RecordInvalid.new(self)</code> and run away.</p>

<h3>How did you get here?</h3>

<p>This seems most relevant to syncing scenarios. For example, when a Task is created, we need to create a parallel record in an external system. When it is necessary, it has to happen and the Task should not exist (or be saved) without it. I could make that call in a <code>before_save</code> callback and add a validation error if it didn&#8217;t work. However, if the rest of the validations don&#8217;t work, then there is no taking back that call. Everything else in a SQL transaction, but not other systems. I had some success with making absolute sure that it was the <em>last</em> <code>before_save</code> and that worked out for a while. Then we needed to send the <code>id</code> of the Task to the external system. This just does not exist before the save actually occurs the first time. So I wanted to put it in an <code>after_save</code> callback.</p>

<h3>What to do?</h3>

<p>The thing to note in this case, though, is that <code>after_save</code> is still in the SQL transaction. So if we freak out enough, it will roll the whole thing back. The trick is freaking out in the right way.</p>

<p>Returning <code>false</code> no longer seems to stop things. I swear that used to happen in older (&lt; 3) versions of Rails. Raising most errors will stop the transaction but also crash the system.  The first one that I tried was <code>ActiveRecord::Rollback</code> and it worked just fine in that it did not save and did not crash, but this test that I had was failing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span><span class="o">.</span><span class="n">save</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, I wouldn&#8217;t have even have caught this if I did what I usually do which would be to use the <code>task.save.should be_false</code> rspec helper. This is because raising <code>ActiveRecord::Rollback</code> ended up in the <code>save</code> call returning nil. That would usually be fine, but I wanted to get it just like normal.</p>

<p>If you take a look at the ActiveRecord <a href="https://github.com/rails/rails/blob/7ead1d81431b2c2c0366347b7bfdf9a329b6f934/activerecord/lib/active_record/persistence.rb#L105">code</a> for save, the answer reveals itself.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">save</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
</span><span class='line'>  <span class="n">create_or_update</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">RecordInvalid</span>
</span><span class='line'>  <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>By raising <code>ActiveRecord::RecordInvalid</code> we treat it like a validation error and it has the expected behavior. I went ahead and added an actual error to seem even more like the normal case. Final code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Task</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">after_save</span> <span class="ss">:sync_with_external</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sync_with_external</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="no">External</span><span class="o">.</span><span class="n">sync!</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">info</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">info</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">response</span><span class="o">.</span><span class="n">error?</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:base</span><span class="p">,</span> <span class="s2">&quot;There was a problem, etc ...&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">RecordInvalid</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="kp">true</span> <span class="c1"># I still do this out of superstition</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Caveats</h3>

<p>This main issue that comes up is that you only get to have one of these to be absolutely sure everything is fine. If there were two of these external services, you&#8217;d end up with the same original problem. I guess, you should put and your flakiest ones first or try to get out of it altogether.</p>

<p>Also note that or non-immediately-critical syncing (like search indexing), the right spot for these types of things are in <code>after_commit</code> where I would queue up a background job with retry logic. That would be outside of the SQL transaction and actually be needed to prevent timing issues in that background thread.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Rollback ActiveRecord model in after_save</wp:post_id>
            <wp:post_date>2013-05-23 11:40:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Rails App Template Alternative</title>
            <link>http://bleonard.github.io/blog/2013/02/08/rails-app-template-alternative/</link>
            <pubDate>2013-02-08 08:44:00 -0800</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2013/02/08/rails-app-template-alternative/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>We are making lots of new apps at <a href="https://www.taskrabbit.com">TaskRabbit</a> and have many shared components. All of this stuff (gems, best practices, test setup, etc) needs to get into the new project quickly so the team can focus on the business of providing the intended functionality. My first attempt to solve this problem was to create a <a href="http://edgeguides.rubyonrails.org/rails_application_templates.html">Rails app template</a> with all that stuff, but switched to a new way that involves a true template application.</p>

<p>Conventional app templates seem to work for a lot of people and <a href="https://github.com/RailsApps/rails-composer/">Rails Composer</a> looks to be a good option in this space. This method works by running Ruby code that puts down files. This level of indirection is likely a positive thing when projects vary (<a href="https://github.com/rspec/rspec">rspec</a> one time, <a href="https://github.com/test-unit/test-unit">test-unit</a> the next). However, we&#8217;re trying as hard as we can to be consistent across apps, so when I found that this indirection made working with the templates more difficult, I decided that it was not worth it.</p>

<p>The alternative method is pretty simple. I made a Rails app called <a href="http://en.wikipedia.org/wiki/Warren_(domestic">Warren</a>) that was exactly what I wanted to see new projects use. It contained all our our gems for authentication, shared styles, inter-app communication, and developer tools. You could basically log in, log out, and go to a page where you saw who was logged in. It had its own test suite to test these things along with all the normal stuff: yml files, initializers, .rvmrc, .gitigore, ApplicationController, favicon, etc. It was simply a working Rails app.</p>

<p>The only addition is the <code>app.rake</code> file that I put in the /lib/tasks directory. That provides this functionality:</p>

<pre><code>% rake app:create[new_name]
</code></pre>

<p>This will create a new app called NewName in a peer folder to Warren. The full process looks something like this:</p>

<pre><code>localhost:warren brian$ rake app:create[new_name]

localhost:warren brian$ cd ../new_name
=== RVM Message ===
Do you wish to trust this .rvmrc file? (/Users/brian/taskrabbit/new_name/.rvmrc)
y[es], n[o], v[iew], c[ancel]&gt; yes
Using /Users/brian/.rvm/gems/ruby-1.9.3-p194 with gemset new_name

localhost:new_name brian$ bundle install
Fetching gem metadata from http://rubygems.org/......
Installing all-the-things (3.9.2) 
Your bundle is complete!

localhost:new_name brian$ rake db:create db:migrate db:test:prepare

localhost:new_name brian$ rails s
&gt;&gt; Listening on 0.0.0.0:3000, CTRL+C to stop
</code></pre>

<p>And http://localhost:3000 works.</p>

<!-- more -->


<p>Everything is set up. As a small example, the application.rb and routes.rb have the right stuff in them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">NewName</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Rails</span><span class="o">::</span><span class="no">Application</span>
</span><span class='line'>    <span class="c1"># normal stuff</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">NewName</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># routes</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>As well as the database.yml</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql2</span>
</span><span class='line'>  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">new_name_development</span>
</span><span class='line'>  <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in application.html.erb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>NewName<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are obviously tons of places that are customized with NewName or new_name and the main point is that it&#8217;s the same places that were customized with Warren or warren. So there is no magic here. I just copy, find, and replace.</p>

<p>NewName works because Warren works. I know Warren works because I can actually use it (and test it with rspec). With app templates, I was regenerating every time that I made a change to a generator file to see if it worked.</p>

<p>I&#8217;m not sure where to check this in. I was going to make a gem/generator to add this one file to your template project, but that goes against the spirit of what I&#8217;m talking about. So I just put it here:</p>

<div class='px500'><script src='https://gist.github.com/4740777.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>You&#8217;ll note that my instructions had me <code>cd</code>ing into the directory. I tried to do that in the script, too, but I couldn&#8217;t get the RVM stuff to work. If anyone wants to take a look at the <code>rvm_stuff_that_does_not_work</code> method, I&#8217;d love some help.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Rails App Template Alternative</wp:post_id>
            <wp:post_date>2013-02-08 08:44:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Singletons, Threads, and Flexibility</title>
            <link>http://bleonard.github.io/blog/2013/01/18/singletons/</link>
            <pubDate>2013-01-18 08:50:00 -0800</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2013/01/18/singletons/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>In Ruby, we often like very simple APIs, but this often comes at the price of thread safety and code flexibility. I&#8217;ve found that if you use a few tricks from the start, you can get the best of it all.</p>

<p>I recently did a <a href="/blog/2013/01/11/hubtime">project</a> where I tried to use the <a href="https://github.com/vcr/vcr">VCR</a> gem, but it went awry when working in multiple threads. This is a great gem that, like many of my own, falls into the trap of module/class level singleton configuration/execution.</p>

<p>This is approach is characterized by things like <code>extend self</code> in the top-level <a href="https://github.com/vcr/vcr/blob/8bbe6aacba4bd5a76a946c99ff08f034ff0eb2ce/lib/vcr.rb#L23">module</a> and then having <a href="https://github.com/vcr/vcr/blob/8bbe6aacba4bd5a76a946c99ff08f034ff0eb2ce/lib/vcr.rb#L329">instance variables</a> at that level. This is not to call out VCR specifically. it&#8217;s just my most recent example of hundreds of gems that take this overall approach.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">VCR</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="nb">self</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">current_cassette</span>
</span><span class='line'>    <span class="n">cassetes</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">configure</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">configuration</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">configuration</span>
</span><span class='line'>    <span class="vi">@configuration</span> <span class="o">||=</span> <span class="no">Configuration</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cassettes</span>
</span><span class='line'>    <span class="vi">@cassettes</span> <span class="o">||=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When operating on multiple threads, things get wacky because of this because they are sharing this <code>current_cassette</code> and writing to the associated file. You end up with recordings on top of each other.</p>

<p>I am inclined (and some say <em>over-inclined</em>) to use singletons to do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">VCR</span><span class="o">::</span><span class="no">Client</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">current_cassette</span>
</span><span class='line'>    <span class="n">cassetes</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">configure</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">configuration</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">configuration</span>
</span><span class='line'>    <span class="vi">@configuration</span> <span class="o">||=</span> <span class="no">Configuration</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cassettes</span>
</span><span class='line'>    <span class="vi">@cassettes</span> <span class="o">||=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">VCR</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="nb">self</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:current_cassette</span><span class="p">,</span> <span class="ss">:configure</span><span class="p">,</span> <span class="ss">:configuration</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="ss">:default_client</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">default_client</span>
</span><span class='line'>    <span class="vi">@default_client</span> <span class="o">||=</span> <span class="no">Client</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p></p>

<p>The most common use case of the module doesn&#8217;t change at all because I delegate everything to a default one. You can still do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># global</span>
</span><span class='line'><span class="no">VCR</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">cassette_library_dir</span> <span class="o">=</span> <span class="s1">&#39;fixtures/vcr_cassettes&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Fetcher</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@path</span> <span class="o">=</span> <span class="n">path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fetch!</span>
</span><span class='line'>    <span class="no">VCR</span><span class="o">.</span><span class="n">use_cassette</span><span class="p">(</span><span class="s1">&#39;#{@path}/fetched&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">response</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="no">URI</span><span class="p">(</span><span class="s2">&quot;api.http://example.com/</span><span class="si">#{</span><span class="vi">@path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="n">process</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Main</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">process_all</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">paths</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span>
</span><span class='line'>      <span class="n">fetcher</span> <span class="o">=</span> <span class="no">Fetcher</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fetcher</span><span class="o">.</span><span class="n">fetch!</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and it will use the default_client.</p>

<p>But this whole scheme now allows my threaded code to do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ThreadedFetcher</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@path</span> <span class="o">=</span> <span class="n">path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">vcr_client</span>
</span><span class='line'>    <span class="k">return</span> <span class="vi">@vcr_client</span> <span class="k">if</span> <span class="vi">@vcr_client</span>
</span><span class='line'>    <span class="vi">@vcr_client</span> <span class="o">=</span> <span class="no">VCR</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@vcr_client</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>      <span class="n">c</span><span class="o">.</span><span class="n">cassette_library_dir</span> <span class="o">=</span> <span class="s2">&quot;fixtures/vcr_cassettes/</span><span class="si">#{</span><span class="vi">@path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@vcr_client</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fetch!</span>
</span><span class='line'>    <span class="c1"># the same original code would probably work but I like it even more separated </span>
</span><span class='line'>    <span class="c1"># that is, move the @path into client init above</span>
</span><span class='line'>    <span class="n">vcr_client</span><span class="o">.</span><span class="n">use_cassette</span><span class="p">(</span><span class="s1">&#39;fetched&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">response</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="no">URI</span><span class="p">(</span><span class="s2">&quot;http://api.example.com/</span><span class="si">#{</span><span class="vi">@path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="n">process</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Main</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">process_all</span>
</span><span class='line'>    <span class="n">mutex</span> <span class="o">=</span> <span class="no">Mutex</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">queue</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">paths</span><span class="o">.</span><span class="n">dup</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">thread_count</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span>
</span><span class='line'>      <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">path</span> <span class="o">=</span> <span class="n">mutex</span><span class="o">.</span><span class="n">synchronize</span> <span class="p">{</span> <span class="n">queue</span><span class="o">.</span><span class="n">pop</span> <span class="p">}</span>
</span><span class='line'>          <span class="n">fetcher</span> <span class="o">=</span> <span class="no">ThreadedFetcher</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>          <span class="n">fetcher</span><span class="o">.</span><span class="n">fetch!</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="p">}</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:join</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clearly there is more code, but it is now 8x (or whatever) faster.</p>

<p>One example that I&#8217;ve seen done really well in this way is the <a href="https://github.com/sferik/twitter/blob/7bd6f8f589a91a8c82363d07da77ec012890c6cb/lib/twitter.rb">twitter gem</a> and others that seems to follow that pattern like <a href="https://github.com/pengwynn/octokit/blob/a6cd608d3fa69730a93fef9746fa8c4e1b505fda/lib/octokit.rb">octokit</a> which I used for <a href="https://github.com/bleonard/hubtime">hubtime</a> in such a <a href="https://github.com/bleonard/hubtime/blob/639b5309c24604d54ded17c480b8747ff2208424/repo.rb#L28">threaded way</a>.</p>

<p>Again, I&#8217;m not calling out VCR or anything and I&#8217;m sure I&#8217;ve trivialized the complexity involved. I would love to put a pull request link to VCR here, but alas, for another time.</p>

<p>If you do this from the beginning, though, it can be a strong win with minimal overhead. It adds multi-threaded capabilities as well as the ability (such as with twitter) to work with two different users in your app without changing anything global.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Singletons, Threads, and Flexibility</wp:post_id>
            <wp:post_date>2013-01-18 08:50:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Hubtime</title>
            <link>http://bleonard.github.io/blog/2013/01/11/hubtime/</link>
            <pubDate>2013-01-11 18:03:00 -0800</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2013/01/11/hubtime/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>I got pretty sidetracked during my <a href="/blog/2012/12/31/review-2012/">2012 Review</a> and ended up making a new tool called <a href="https://github.com/bleonard/hubtime">Hubtime</a>. It lets you graph your activity in a variety aways across Github repositories.</p>

<p>The inspiration came from Github&#8217;s own <a href="https://github.com/bleonard/daily/graphs">reports</a>, but I made Hubtime because those reports are only at a repository level. I was looking to see patterns across the many repositories that I worked on over the year. It seems that Github agrees to some degree because they have since <a href="https://github.com/blog/1360-introducing-contributions">launched</a> metric overviews on user profile pages.</p>

<p><img src="http://bleonard.github.io/images/posts/hubtime-github-contributions.png"></p>

<p>A 42 day streak! Hubtime has the data to make Hubtime do the same graph, but right now focuses more on reproducing the Github experience that is only now per repository.</p>

<pre><code>$ ./hubtime.rb graph commits --months 3
</code></pre>

<p><img src="http://bleonard.github.io/images/posts/hubtime-commits.png"></p>

<p>Graphing commits, additions, deletions, or impact can also be done showing the magnitude by repository.</p>

<pre><code>$ ./hubtime.rb graph commits --months 3 --stacked
</code></pre>

<p><img src="http://bleonard.github.io/images/posts/hubtime-stacked.png"></p>

<p>This was the first purely command line Ruby project that I have done. In addition to that, I learned several new things and tried some new approaches during development.</p>

<!-- more -->


<h3>Commander</h3>

<p>For no particular reason versus the <a href="http://www.awesomecommandlineapps.com/gems.html">alternatives</a>, I decided to use the <a href="https://github.com/visionmedia/commander">Commander</a> gem to bootstrap the project. This gem take code like this:</p>

<div class=''><script src='https://gist.github.com/4527775.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>And produces help documentation like this:</p>

<pre><code>$ ./hubtime.rb impact -h

NAME:
  impact

SYNOPSIS:
  hubtime impact

DESCRIPTION:
  Graph your additions and deletions

OPTIONS:
  --months INTEGER 
      How many months of history
  --user USERNAME 
      Which Github user
</code></pre>

<p>It also parses the arguments and generally allows for getting right to the point.</p>

<p>The point for me was making the impact graph, initially. To get there, I decided to use only Github&#8217;s <a href="http://developer.github.com/v3/">API</a>. In theory, I could have checked repositories out and done a bunch of git stuff locally. In retrospect, this would have been much more performant and maybe more useful in the long run.</p>

<p>Nevertheless, the first step was authentication. I made a command to enter the username and password. In the original version, I sent this to Github to get an OAuth token and did not store the password, just the token. Right before releasing, I switched to not use a client application as it would cause all users collectively to get 5000 requests total to the API as opposed to per user. This limit proved to be a problem. I unfortunately had to store the password locally somewhere and took a half-hearted attempt at obfuscation.</p>

<p>As I mentioned, the API limit seems very high but very quickly became a problem. The core issue is that the data I needed (additions and deletions of a commit) is not available on the <a href="http://developer.github.com/v3/repos/commits/#list-commits-on-a-repository">commit list</a> API. It is only available on the <a href="http://developer.github.com/v3/git/commits/#get-a-commit">single commit</a> endpoint. Thus, I used the list command to see what I did within all my personal and organization repositories and then queried each commit for the data I needed.</p>

<h3>Caching</h3>

<p>Because I am involved in 50+ repositories and have thousands of commits and there were some <a href="https://gist.github.com/4256275">problems</a> with paging in the API, I very quickly hit my limit. Even for performance reasons, I started looking for a good way to cache the results. It&#8217;s not like the commit I did last January is going to get more or less lines now, right?</p>

<p>As I was <em>attempting</em> to make this a short project, I didn&#8217;t want to write a caching layer and, for the first time, it occurred to me to use the <a href="https://github.com/vcr/vcr">VCR</a> gem outside of a testing environment. It worked beautifully.</p>

<div class=''><script src='https://gist.github.com/4527774.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>So what I would do is have my API usage timeout, wait a bit, and then get back to it. Or only do the most recent month, then do the last two months, and walk backwards in that way. It never repeated itself, particularly on the single commit queries. For cached queries, it was much faster too.</p>

<h3>Performance</h3>

<p>The caching helped, but it was still very slow. That&#8217;s a lot of waiting for Github to tell you stuff. I&#8217;m not sure how I&#8217;ve made it this long without really working on multiple threads in Ruby, but I decided to make it happen here. The first approach I took had a worker pool and each thread would work a single repository.</p>

<div class=''><script src='https://gist.github.com/4527766.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>This dramatically sped up the fetching, of course. At this point in my development, all the requests were cached already, but it was still 5x faster with 8 threads. I felt pretty good about that, but it could still be better. It wasn&#8217;t 8x faster because one of the repositories had significantly more activity so, in the end, there was still just a single worker working for a significant amount of time. To remedy this, I dealt with each repository serially and moved the parallelization to the window and commit levels.</p>

<div class=''><script src='https://gist.github.com/4527771.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>The parallelization was in two spots now, but it also made the output simpler as my <code>puts</code> statements of what repositories it was working weren&#8217;t all coming in at the same time.</p>

<h3>Threadsafe</h3>

<p>I felt pretty happy about my multithreaded experiment and decided to jam through some of the other members of my team. Things got weird.</p>

<p>All this time, I had been using the multithreaded code on VCR-cached queries. Clearing the cache or looking up the activity of another user caused the recording to go back into effect. After much confusion, I realized that VCR was not <a href="https://github.com/vcr/vcr/issues/200">threadsafe</a> and that the &#8220;cassettes&#8221; would have have the output from one query and half from another. The first time through it would be fine, but then when trying to use the recording the next time, it would fail to parse and blow up.</p>

<p>I was in this far already and didn&#8217;t want to ditch the project, even though I already had my graphs for my <a href="/blog/2012/12/31/review-2012/">review</a>. I had also tasted the speed (or at least the lack of absurd slowness) and couldn&#8217;t go back to running it in one thread, so I wrote my own simple <a href="https://github.com/bleonard/hubtime/blob/master/cacher.rb">cacher</a> that was used in threadsafe way and removed VCR. For good measure, I also cached the final results needed to draw all the graphs. This made subsequent commands instantaneous, which was very satisfying. Looking back, I&#8217;d say it was close to a <a href="http://37signals.com/svn/posts/3113-how-key-based-cache-expiration-works">russian doll</a> caching strategy.</p>

<p>In end, the structure looked like this:</p>

<p><img src="http://bleonard.github.io/images/posts/hubtime-caching-windows.png"></p>

<p>Where all of those windows of time. The &#8216;activity&#8217; ones contain various stats. They are all together, but if I just had one repository, it would look like this (except with all the years, months, and days of each:</p>

<div class='px300'><script src='https://gist.github.com/4527842.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>And the commit windows contain shas for the user during that window:</p>

<div class='px100'><script src='https://gist.github.com/4527744.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>It also caches the commits themselves:</p>

<p><img src="http://bleonard.github.io/images/posts/hubtime-caching-shas.png"></p>

<p>The contents of each is the serialized version of the <a href="https://github.com/intridea/hashie">Hashie::Mash</a> that <a href="https://github.com/pengwynn/octokit">Octokit</a> returns.</p>

<h3>Charts</h3>

<p>Finally, I used <a href="http://www.highcharts.com/">HighCharts</a> to make the charts themselves. It was kind of funny to be building a command line tool and not really have a way to show charts, so I actually started with a table and a <a href="https://github.com/joemiller/spark-ping">sparkline</a>. I was looking for the those pretty pictures, though, so I fell back to doing things in a web way. In this case, I used ERB to render a page to an HTML file and then used the command line <code>open</code> command to launch that file.</p>

<p>A few more graphs:</p>

<pre><code>$ ./hubtime.rb impact --months 12
</code></pre>

<p><img src="https://raw.github.com/bleonard/hubtime/master/readme/impact.png" alt="Impact Graph" /></p>

<pre><code>$ ./hubtime.rb graph impact --stacked
</code></pre>

<p><img src="https://raw.github.com/bleonard/hubtime/master/readme/stacked.png" alt="Stacked Graph" /></p>

<pre><code>$ ./hubtime.rb pie
</code></pre>

<p><img src="https://raw.github.com/bleonard/hubtime/master/readme/pie.png" alt="Stacked Graph" /></p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Hubtime</wp:post_id>
            <wp:post_date>2013-01-11 18:03:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Playing Work</title>
            <link>http://bleonard.github.io/blog/2013/01/02/playing-work/</link>
            <pubDate>2013-01-02 19:59:00 -0800</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2013/01/02/playing-work/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>We didn&#8217;t go anywhere over the holidays and had a nice Christmas at home. It&#8217;s possible that I&#8217;m incapable of taking a vacation at all, but this is particularly true when on a stay-cation. Other than Christmas day itself, I was coding on a normal schedule for most of the week.</p>

<p>My daughter (4.5) was around most of the week too, often with the normal babysitter that comes for my younger son. So all week, our house had me coding, my wife editing, and her hanging out with the babysitter. She even brought us lunch like it was restaurant including a fork wrapped up in a napkin.</p>

<p>On January 1st, I also took the day completely off and asked her what she wanted to play. &#8220;Not now, I&#8217;m working,&#8221; she said. She was &#8220;playing work,&#8221; which involved writing out a dense set of letters on white sheets of paper.</p>

<blockquote><p>&#8220;There is a lot to do and I have to work, even on family days.&#8221;</p></blockquote>

<p>And she went back to scribbling like crazy. This all says something about me as a person and a parent. I&#8217;m not sure exactly what, but it&#8217;s probably not good.</p>

<p>It hurts because I actually think I&#8217;m doing a pretty good job. I leave early (by engineer-at-startup standards) to have dinner and hang out with her and only work again after she is asleep. I&#8217;m not sure I could have more &#8220;balance&#8221; anyway. To me, the term suggests a healthy ratio between what you are forced to do because of work and the things of &#8220;normal life.&#8221; I might be intrinsically unbalanced, but I feel lucky that my normal life has a lot of things that I love doing which centers mostly around building things for people. For better or worse, I&#8217;m thinking about this stuff all the time, anyway.</p>

<p>It likely comes with my being so visibly inaccessible all week. Regardless, I didn&#8217;t have any profound realizations at that moment or anything. Instead, I decided to plant a behavioral seed for later.</p>

<blockquote><p>&#8220;I understand. I&#8217;ll let you get to it. Let me know when you can play.&#8221;</p></blockquote>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Playing Work</wp:post_id>
            <wp:post_date>2013-01-02 19:59:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
        <item>
            <title>Review: 2012</title>
            <link>http://bleonard.github.io/blog/2012/12/31/review-2012/</link>
            <pubDate>2012-12-31 10:39:00 -0800</pubDate>
            <dc:creator>Brian Leonard</dc:creator>
            <guid isPermaLink="false">http://bleonard.github.io/blog/2012/12/31/review-2012/</guid>
            <description/>
            <content:encoded>
                <![CDATA[<p>I honestly can&#8217;t remember anything from January or even October very specifically. It sure felt like I was busy as we doubled the TaskRabbit engineering team and scaled the site to get a lot more stuff done for real people in the real world.</p>

<p>I can&#8217;t even decide what the best way is to see what I did in January. I could look at my email or calendar, but I strive not to make those the center of my world. Maybe in Evernote. My git commits are probably a bit too granular, but maybe there is something in the aggregate.</p>

<p><img src="http://bleonard.github.io/images/posts/2012-review-impact.png"></p>

<p>Most striking is the almost non-existence of code between July and October. We were growing the team during this time and I made the conscious choice to try on more of an &#8220;engineering manager&#8221; role as opposed to a &#8220;tech lead&#8221; kind of role. Judging by the large spike in October, it&#8217;s clear the experiment got cut short. Around this time, I made the biggest change of the year: transitioning from VP of Engineering to Chief Architect.</p>

<!-- more -->


<p>Yee, the new VP of Engineering once said to me, &#8220;The work-product of an engineer is code. The work-product of a manager is a team.&#8221; I think about long-polling our message bus system while walking down the street. He thinks about things like that quote. It seems like the right move to me.</p>

<p>From the beginning of TaskRabbit more than three years ago, I&#8217;ve played various development, product, and managerial roles. I realized this year that I add the most value when close to the code. It probably says enough that I started writing this blog post and then immediately got derailed into making a <a href="https://github.com/bleonard/hubtime">tool</a> to aggregate a user&#8217;s git commits across all repositories in order to make the graphs in this post.</p>

<p>I would guess that many engineers follow a similar trajectory wherein they code a bunch and eventually find themselves managing or leading a team of some sort. For example, I quit IBM to get back to coding rather than making various Powerpoint presentations. One of the great things about the culture we&#8217;ve built at TaskRabbit is that it allowed me to make that transition without going somewhere else. I did my best and am proud of the team and product we&#8217;ve built, but its time to build some more (and delete old) stuff to take this thing to the next level.</p>

<p>Architecturally, the most interesting change this year has been breaking up our monster Rails app into multiple ones. Much has been said on this topic, but each situation is so different that I&#8217;m sure there are some lessons in there that would be helpful to others. I&#8217;ll be writing about those tactics and lessons in 2013 as we continue the journey.</p>

<p>Looking back for a moment, there are are will be plenty of technological benefits like scaling memory, boot-time, and cutting test-time. The main benefits so far are more team-related, though. By giving teams an independent codebase on which to iterate, they are able to innovate more for the customer and, at the same time, impact other teams less.</p>

<p><img src="http://bleonard.github.io/images/posts/2012-review-stacked.png"></p>

<p>You can see that change in the stacked version of this graph. I&#8217;ve removed all the labels and such but the red one is our core app. Over the year, less and less code went there and world became much more colorful. Also with my role change, it&#8217;s interesting how there is more impact but less commits. As I went over the logs briefly, it became clear the reason: a majority of the changes in the first half of the year were small commits to keep the world on track with groundbreaking changes like &#8220;fixing intermittent failure in acceptance tests.&#8221; Since the transition, it&#8217;s been about writing new services that all our apps are sharing. That&#8217;s a move in the right direction, I think.</p>

<p>On the personal front, we bought a house in Menlo Park and plan to stay there for a while. My wife is still a freelance editor and is now doing some consulting for a startup as well as on few books. My son turned one and is now running all over the place. My daughter turned four and will going to Kindergarten before I know it. What a world.</p>
]]>
            </content:encoded>
            <excerpt:encoded>
                <![CDATA[]]>
            </excerpt:encoded>
            <wp:post_id>Review: 2012</wp:post_id>
            <wp:post_date>2012-12-31 10:39:00</wp:post_date>
            <wp:comment_status>closed</wp:comment_status>
            <wp:ping_status>closed</wp:ping_status>
            <wp:post_name>post-format-standard</wp:post_name>
            <wp:status>publish</wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type>post</wp:post_type>
            <wp:post_password/>
            <wp:is_sticky>0</wp:is_sticky>
        </item>
        
    </channel>
</rss>