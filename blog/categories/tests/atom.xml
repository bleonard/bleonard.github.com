<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tests | BLog]]></title>
  <link href="http://bleonard.github.io/blog/categories/tests/atom.xml" rel="self"/>
  <link href="http://bleonard.github.io/"/>
  <updated>2017-02-25T22:09:42-08:00</updated>
  <id>http://bleonard.github.io/</id>
  <author>
    <name><![CDATA[Brian Leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Offshore: Rails Remote Factories]]></title>
    <link href="http://bleonard.github.io/blog/2014/03/16/offshore/"/>
    <updated>2014-03-16T10:31:00-07:00</updated>
    <id>http://bleonard.github.io/blog/2014/03/16/offshore</id>
    <content type="html"><![CDATA[<p>Last year at <a href="https://www.taskrabbit.com">TaskRabbit</a>, we decided to go headlong into this <a href="http://en.wikipedia.org/wiki/Service-oriented_architecture">Service Oriented Architecture</a> thing. We ended up with several <a href="http://rubyonrails.org/">Rails</a> and <a href="http://www.sinatrarb.com/">other</a> Ruby apps that loosely depended on each other to work. While this was mostly good from a separation of concerns and organizational perspective, we found effective automated testing to be quite difficult.</p>

<p>Specifically, we have one core platform application whose API is the most used. We also allow other apps to have read-only access to its database. Several of the apps are more or less a client to that server. So while the satellite apps have their own test suite, the integration tests can only be correct if they are exercising the core API.</p>

<p>To handle this use case, we created a gem called <a href="https://github.com/taskrabbit/offshore">Offshore</a>. A normal test suite has <a href="https://github.com/thoughtbot/factory_girl">factories</a> and/or <a href="http://guides.rubyonrails.org/testing.html#the-low-down-on-fixtures">fixture data</a> and it uses database <a href="http://api.rubyonrails.org/classes/ActiveRecord/Transactions/ClassMethods.html">transactions</a> to reset the data for every test. Offshore brings this the SOA world by providing the ability to use another application's factories from your test suite as well as handling the rollback between tests. Through the actual exercising of the other application as well as a simplified usage pattern, we found that we trusted our integration tests much more that alternative approaches.</p>

<h2>System</h2>

<p>What we have are several apps based on use case, all using a core platform. There are web apps for each of the participants in our marketplace: workers, consumers, and businesses. We also have iPhone and Android apps along those same lines.</p>

<p>The apps communicate in a few ways. All of them use the platform's API synchronously. The web apps use <a href="https://github.com/taskrabbit/resque-bus">Resque Bus</a> to subscribe and publish asynchronously. We also allow the web apps to read the platform database, but not write.</p>

<p><img src="/images/posts/offshore/generic_network_map.png" alt="Network Map" /></p>

<h2>Use Case</h2>

<p>The APIs and data involved are basically about tasks and users in the system and their various state transitions. For example, our business app signs up a user and post a tasks using the API. The user will then be on the their dashboard seeing a list of tasks in various states, conversations with the workers, payment details, etc.</p>

<!-- more -->


<p>This dashboard has many, many (many) possible combinations of what it can show after factoring in all the types of tasks and their states. To have an effective test suite for this one page, we'll need several tests that put it in those various states. The page is mostly <a href="https://github.com/taskrabbit/sudojs">Javascript</a> driven.</p>

<p>The other thing we want to test are flows that got the user into those states. For example, can the user post a task, receive some bids, chat back and forth, select a worker, have the worker mark it complete, pay for it, and rate the worker without any problems?</p>

<p>The first thing that we did was what we would have to do if this was a true "external" service. We stubbed the responses. We made our Javascript tests in <a href="https://github.com/jfirebaugh/konacha">Konacha</a> and our Ruby tests used <a href="http://rspec.info/">rspec</a> and <a href="https://github.com/vcr/vcr">vcr</a>. Both used "recordings" of API responses to "stub" the platform. This had a few problems.</p>

<p>First, there was still the question of what server to use. Should it be the local one or staging one or something else? Second, you kind of had to get it right the first time if there was any state involved in the test. If test signed up a user and then posted a task, for example, and it failed just a bit the first time, then it would fail harder the second time because that database was not reset (and the user existed when it went to sign up). Third, I was concerned that this easily get out of date with our evolving platform. Finally, if anything was read directly from the database, this would not work at all (as the data wouldn't actually be there).</p>

<h2>Offshore Pattern</h2>

<p>When using Offshore, we actually run the platform server and the app uses that instead of stubbing. Both have the <code>offshore</code> gem installed.</p>

<p>Before a test, the app tells the platform that it's about to start a test. It is then given a token that lets it make other requests to it during the test. It will create objects using factories, make regular API calls, and read/write to the platform database as required. It can do it's own checks throughout to see if the test should pass. When it's done, it let's the platform know.</p>

<p>```ruby
describe "Integration Test", type: :request do<br/>
  it "should work as expected" do</p>

<pre><code>  Offshore.test.start(example)

  user   = users(:billy)
  worker = users(:robby)

  task   = FactoryOffshore.create(:task_posted, :user_id =&gt; user.id)
  offer  = FactoryOffshore.create(:offer, :worker_id =&gt; worker.id)

  task.state.should == "opened"

  visit "/tasks"
  click_on "Hire!"

  task.reload.state.should == "assigned"
  task.worker_id.should == worker.id

  Offshore.test.stop
</code></pre>

<p>  end
end
```
The point is that this is more or less the same test that you'd write if you were using factories and capybara in a regular test suite.</p>

<h2>Server</h2>

<p>The server app is the one with the factories and the database that your app needs to work. For Rails, add this to your Gemfile:</p>

<p><code>ruby
group :test do
  gem 'offshore'
end
</code></p>

<p>We also add the rake tasks to your Rakefile</p>

<p>```ruby
begin
  require 'offshore/tasks' if defined?(Offshore)
rescue</p>

<p>end
```
You might need something like this to your test.rb application config:</p>

<p><code>ruby
Offshore.redis = "localhost:6379"
Offshore.enable! if ENV['OFFSHORE'] == 'true'
</code></p>

<p>Then run something like this on the command line</p>

<pre><code>$ rake offshore:startup
$ OFFSHORE=true rails s thin -e test -p 6001
</code></pre>

<p>In you want it anything but a blank database, you must create a rake task called <code>offshore:seed</code> that creates the test database referenced in the database.yml file in the test environment. Something like this would work:</p>

<p>```ruby
namespace :offshore do
  task :preload do</p>

<pre><code>ENV['RAILS_ENV'] = "test"
</code></pre>

<p>  end
  task :setup => :environment</p>

<p>  desc "seeds the db for offshore gem"
  task :seed do</p>

<pre><code>Rake::Task['db:migrate'].invoke
Rake::Task['db:test:prepare'].invoke
Rake::Task['db:seed'].invoke
</code></pre>

<p>  end
end
```</p>

<p>The <code>:preload</code> and <code>:setup</code> steps will be invoked in that order before your <code>:seed</code> call. They are actually unnecessary here, but shown in case you have something more complex to do.</p>

<h2>Client</h2>

<p>The client app is the one running the tests.</p>

<p>The same thing in the Gemfile:</p>

<p><code>ruby
group :test do
  gem 'offshore'
end
</code></p>

<p>The Rspec config looks likes this:</p>

<p>```ruby
config.before(:suite) do
  Offshore.suite.start(:host => "localhost", :port => 4111)
end</p>

<p>config.before(:each) do
  Offshore.test.start(example)
end</p>

<p>config.after(:each) do
  Offshore.test.stop
end</p>

<p>config.after(:suite) do
  Offshore.suite.stop
end
```</p>

<p>You could also do this based on tags if you didn't need this behavior in all your tests.</p>

<h2>How It Works</h2>

<p><img src="/images/posts/offshore/offshore_interaction.png" alt="Offshore Interaction" /></p>

<p>The <code>rake offshore:startup</code> calls your seed rake worker and then takes a snapshot of the database. We use fixture data and by making a "template" of the database, Offshore is able to copy it into place when needed to create the illusion of "transactional" behavior.</p>

<p>So now we run the server and have it enabled. Requiring the gem required a Railtie that added the <code>Offshore::Middleware</code> which will respond to the requests that it serves (<code>factory_create</code>, <code>suite_start</code>, <code>suite_stop</code>, <code>test_start</code>, <code>test_stop</code>). Calling <code>Offshore.enable!</code> will tell it to handle the requests. Note you can just add <code>Offshore::Middleware</code> if you want to use this with Sinatra or other <a href="https://github.com/rack/rack">Rack</a> apps.</p>

<p>When it receives the <code>suite_start</code> command, it sets everything up to run and records who is running. The main things to set up are the database and <a href="http://redis.io/">Redis</a> lock. Offshore uses Redis to make sure only one test is using it's database at a time, further simulating the notion of transactions.</p>

<p>The <code>test_start</code> command acquires the lock and copies the template to be the <code>real</code> database. If the lock is not acquired, the server will return an error code to the client to say wait. The client will poll until it's available.</p>

<p>The client can now call <code>factory_create</code> or real APIs as much as it wants. The changes are made in the real database.</p>

<p>The <code>test_stop</code> command releases the lock.</p>

<p>We can go through many tests, calling <code>start_test</code> each time to reset the database so we get a fresh copy.</p>

<p>At the end, the <code>suite_stop</code> method notes that this client is no longer running.</p>

<h2>Deployment</h2>

<p>Developers can run this locally fairly easily using the instructions above. We have also deployed this to a server that auto-refreshes based on our <code>master</code> branch. This allows our continuous integration service called <a href="https://www.tddium.com/">Tddium</a> to use Offshore as well. Multiple branches can be building at the same time and it works out because of the locks.</p>

<h2>Summary</h2>

<p>We've gained a lot more confidence in the overall performance of our environment by exercising both the server and client app in parts of our test suites. <a href="https://github.com/taskrabbit/offshore">Offshore</a> makes this possible by enabling factories and database "transactions" across apps and threads. There's plenty more things to make this even better to improve performance, but we thought it was an interesting pattern. Let us know if you find it helpful.</p>

<p>Note that while this is the best approach we could come up with for multiple apps, in our newer project, we chose to have a single app with <a href="/blog/2014/02/11/rails-4-engines/">multiple engines</a>. This was in part to make tricks like that <a href="https://github.com/taskrabbit/offshore">Offshore</a> does unnecessary.</p>
]]></content>
  </entry>
  
</feed>
