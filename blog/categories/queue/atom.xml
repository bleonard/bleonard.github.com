<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: queue | BLog]]></title>
  <link href="http://bleonard.github.io/blog/categories/queue/atom.xml" rel="self"/>
  <link href="http://bleonard.github.io/"/>
  <updated>2017-04-14T15:13:13-07:00</updated>
  <id>http://bleonard.github.io/</id>
  <author>
    <name><![CDATA[Brian Leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Architecture: Surface Area]]></title>
    <link href="http://bleonard.github.io/blog/2017/03/10/architecture-surface-area/"/>
    <updated>2017-03-10T00:00:00-08:00</updated>
    <id>http://bleonard.github.io/blog/2017/03/10/architecture-surface-area</id>
    <content type="html"><![CDATA[<p>The last post in the <a href="https://www.taskrabbit.com">TaskRabbit</a> architecture series was about <a href="/blog/2017/03/03/architecture-service-objects/">service objects</a>. This an example of what I call minimizing "surface area" of the code.</p>

<p>Frankly, I might be using the term wrong. It seems possible "surface area" usually refers to API signature of some objects. What I'm talking about here is the following train of thought:</p>

<ul>
<li>I change or add a line of code</li>
<li>What did I just affect?</li>
</ul>


<p>The "surface area" is the other things I have to look over. It is the area that I have to make sure has appropriate test coverage. Having a large surface area is what slows down development teams. The goal is to minimize it.</p>

<h3>Service Objects</h3>

<p>So how does our use of service objects relate to this concept?</p>

<p>Let's say we have a new requirement that's applicable when a Tasker submits an invoice that modifies what gets saved. If I were to add the code to the <code>InvoiceJobOp</code> from the <a href="/blog/2017/03/03/architecture-service-objects/">previous article</a>, then it will only apply when the <code>Op</code> is run. If we were to do something in a <code>before_save</code> in the <code>Invoice</code> model, then it might accidentally kick in anytime an <code>Invoice</code> is changed.</p>

<p>That's a lot more tests and things to keep in our mind. If it is just in the <code>Op</code>, that is less of those kinds of debt, so adding in the <code>Op</code> is an example of minimizing the surface area of the change.</p>

<h3>Namespacing</h3>

<p>We went through a <a href="/blog/2015/10/06/v2-retrospective/">roundabout journey</a> to end up where were we are. Many of the changes were about surface area and trying to reduce it.</p>

<p>People like microservices and SOA because of this same principle. We tried it and that part of it worked out really well. There was just no way that a change in service A could affect service B. As <a href="/blog/2015/10/06/v2-retrospective/">discussed</a>, however, we ran into issues in other dimensions.</p>

<p>Our current use of <a href="/blog/2014/02/11/rails-4-engines/">engines</a> follows the same approach to achieve the same surface area effect. It is all about namespacing. Modifying the user management engine can not affect the marketplace engine. This allows us to proceed with more confidence when making such changes.</p>

<p>A particular aspect of our setup is that any given model is "owned" by only one engine. The rest of the engines are allowed to read from the database but they cannot write. This provides sanity and minimizes the surface area. For example, the validations only need to live in one spot. You also know that no other code can go rogue and start messing with the data by accident or otherwise.</p>

<h3>Bus</h3>

<p>Of course, the world isn't always cut and dry. Venn diagrams overlap. No abstraction or encapsulation is perfect. The seams in namespacing show up when something that happens in one service (engine) needs to affect something in another one.</p>

<p>For example, we were so happy just a few paragraphs ago that changes to the user management engine do not affect the marketplace engine. That is true and it is great. There is no direct effect from the code. However, as they tend to do, these pesky functional requirements always mess up perfect plans for the code. In this case, when a user changes their first name (in the account engine), the marketplace engine might need to update some data in <a href="https://www.elastic.co/">Elasticsearch</a>.</p>

<p>We use a <a href="/blog/2015/04/02/queue-bus/">message bus</a> to observe changes like this and react as appropriate.</p>

<p>```ruby</p>

<h1>Whenever the user changes</h1>

<p>subscribe 'user_may_have_changed', bus_observer_touched: 'user' do |attributes|
  # update the profile in ElasticSearch
  ProfileStoreWorker.enqueue(user_id: attributes['id'])
end
```</p>

<p>An important note here is that <code>ProfileStoreWorker</code> is <a href="http://www.restapitutorial.com/lessons/idempotency.html">idempotent</a>. It writes everything that should go in Elasticsearch every time. This technique reduces surface area by not depending on this single event and its contents, but rather only as a trigger.</p>

<p>One might say that these subscriptions are just as coupled as doing everything all in one spot. I see that point because, of course, the same things end up happening. However, we have this technique to be better for a few reasons.</p>

<ul>
<li>The trigger code (in the account engine) does not need to know about the rest of the system. It can mind its own business.</li>
<li>The subscribing code (in the marketplace engine) can be self-contained instead of being mixed up in the trigger code path.</li>
<li>Many different code paths might necessitate the <code>ProfileStoreWorker</code> to run. By decoupling it, we actually save complexity in many code paths.</li>
</ul>


<h3>Summary</h3>

<p>In code, developers tend to weave a tangled web wherein seemingly innocuous changes have far-reaching effects. We have been able to create more stable and agile code by considering the "surface area" of a change and minimizing it through some encapsulation and decoupling techniques.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Queue Bus]]></title>
    <link href="http://bleonard.github.io/blog/2015/04/02/queue-bus/"/>
    <updated>2015-04-02T00:00:00-07:00</updated>
    <id>http://bleonard.github.io/blog/2015/04/02/queue-bus</id>
    <content type="html"><![CDATA[<p>At <a href="http://www.taskrabbit.com">TaskRabbit</a>, we have been using <a href="/blog/2013/09/28/resque-bus/">resque-bus</a> for about two years. It has continued to provide value by  linking components via a loosely coupled publish/subscription model. We have seen 10x the number of events going through it, but have not yet hit any scaling issues. The benefit of using the tools we already have continues to be a huge win.</p>

<p>But other teams are using other tools like <a href="http://sidekiq.org/">Sidekiq</a>. We're also interested in trying it out, but resque-bus (unsurprisingly) was tied closely to <a href="https://github.com/resque/resque">Resque</a>. We've changed that by creating <a href="https://github.com/queue-bus/queue-bus">queue-bus</a> and using an adapter pattern. There are now adapters in <a href="https://github.com/queue-bus/resque-bus">resque-bus</a> and <a href="https://github.com/queue-bus/sidekiq-bus">sidekiq-bus</a>, as well as a compatible version in <a href="https://github.com/queue-bus/node-queue-bus">node-queue-bus</a>.</p>

<p>The code interactions are basically the same but can work across systems. You can even have one app using Resque and one using Sidekiq.</p>

<h4>Pick your adapter</h4>

<p>By requiring one of the adapters, it automatically gets set up to be the one for the app.</p>

<p><code>ruby
require 'sidekiq-bus' # (or 'resque-bus')
</code></p>

<h4>Application A publishes an event</h4>

<p>Something happens in your application and you want to let the world know. In this case, you publish an event.</p>

<p>```ruby</p>

<h1>business logic</h1>

<p>QueueBus.publish("user_created", id: 42, first_name: "John", last_name: "Smith")</p>

<h1>or do it later</h1>

<p>QueueBus.publish_at(1.hour.from_now, "user_created", id: 42, first_name: "John", last_name: "Smith")
```</p>

<h4>Application B subscribes to events</h4>

<p>If the same or different application is interested when an event happens, it subscribes to it by name.</p>

<p>```ruby</p>

<h1>initializer</h1>

<p>QueueBus.dispatch("app_b") do
  subscribe "user_created" do |attributes|</p>

<pre><code># business logic
NameCount.find_or_create_by_name(attributes["last_name"]).increment!
</code></pre>

<p>  end
end
```</p>

<h3>Upgrading</h3>

<p>The formats changed a little bit with the move. The last version that used the old format (0.3.7) also can adapt to the new format. This is important because you'll have things in the queue during the transition.</p>

<p>Steps:</p>

<ul>
<li>Upgrade everyone to 0.3.7</li>
<li>Deploy all the things</li>
<li>Upgrade everyone to the newest version</li>
</ul>


<h3>More to come</h3>

<p>If people continue to like this approach and gem, we have lots of approaches and tools built on top of it that we'd be excited to make available. Let us know on <a href="https://github.com/queue-bus/queue-bus">Github</a> that you like it by watching, starring, or creating issues with questions, etc.</p>

<p>Now that we have the adapter pattern, also let us know if you are interested in making one for your background system of choice. A special thanks goes out to <a href="https://github.com/jonsgreen">Jonathan Greenberg</a> and the team at <a href="http://www.purpose.com/">purpose.com</a> who did just that to get this whole thing going.</p>
]]></content>
  </entry>
  
</feed>
